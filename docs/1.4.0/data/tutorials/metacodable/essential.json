{"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"Use with general-purpose Swift types","category":"Discover MetaCodable","role":"project","categoryPathComponent":"Usage"},"kind":"project","hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},"sections":[{"estimatedTimeInMinutes":10,"kind":"hero","title":"Use with general-purpose Swift types","xcodeRequirement":"Xcode 15 or later","chapter":"MetaCodable essentials","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"creating equivalent types for decoding\/encoding.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"customizing fieldâ€™s "},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fallback field value when decoding fails"}]}]},{"content":[{"inlineContent":[{"text":"ignoring fields from decoding\/encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"share common data across "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}]}]}]}]},{"tasks":[{"title":"Create Codable type and customize CodingKey of fields","anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","stepsSection":[{"content":[{"inlineContent":[{"text":"Analyze fields and their data types from data.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":"Post-01.png","code":null,"runtimePreview":null},{"type":"step","runtimePreview":"Post-01.png","content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"struct"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"text":" with field name same as in data and type equivalent to encoded data type.","type":"text"}],"type":"paragraph"}],"code":"Post-01.swift","caption":[],"media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"type":"text","text":" macro to type definition."}]}],"runtimePreview":"Post-01.png","code":"Post-02.swift","type":"step","media":null},{"type":"step","code":"Post-03.swift","media":null,"runtimePreview":"Post-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide custom "},{"type":"codeVoice","code":"CodingKey"},{"text":" value to use to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" macro attached to said field."}]}]},{"caption":[],"media":null,"content":[{"inlineContent":[{"text":"Provide each ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path components in order, to "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro for decoding nested field at path."}],"type":"paragraph"}],"runtimePreview":"Post-04.png","code":"Post-04.swift","type":"step"},{"code":"Post-05.swift","runtimePreview":"Post-04.png","type":"step","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Last "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macro."}],"type":"paragraph"}],"media":null},{"media":null,"type":"step","caption":[],"runtimePreview":"Post-06.png","code":"Post-06.swift","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"type":"text","text":" macro to specify multiple possible "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s for a single field."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"text":" macro to specify ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" case style while using different case style for field name."}],"type":"paragraph"}],"type":"step","code":"Post-07.swift","media":null,"caption":[],"runtimePreview":"Post-07.png"}],"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"The simplest way to generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation is to attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" macro to type definition, provided all its properties using types that are already ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"text":" types like ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"code":"Codable","type":"codeVoice"},{"text":" automatically conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"code":"CodingKey","type":"codeVoice"},{"text":" of each field can be customized individually using ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"type":"text","text":" macros. Optionally, global field case style can be declared using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro."}]}],"kind":"contentAndMedia"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" macro."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"type":"text","text":" macro per fields and ignore only decoding or encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" macros per fields respectively."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields for a type from decoding\/encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro.","type":"text"}]}]}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Customize field decoding\/encoding","stepsSection":[{"caption":[],"type":"step","runtimePreview":"Post-06.png","content":[{"inlineContent":[{"type":"text","text":"Provide default value per field if decoding fails due to missing or invalid data."}],"type":"paragraph"}],"media":null,"code":"Post-08.swift"},{"code":"Post-09.swift","runtimePreview":"Post-06.png","caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Ignore fields from decoding or encoding or both with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"text":" respectively.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"text":" macro to type definition.","type":"text"}]}],"code":"Post-10.swift","runtimePreview":"Post-06.png"},{"media":null,"code":"Post-11.swift","runtimePreview":"Post-11.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow specific initialized field decoding and encoding by attaching any of "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":"\/","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"text":"\/","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":"\/"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"text":" macros.","type":"text"}]}],"caption":[]},{"caption":[],"media":null,"type":"step","code":"Post-12.swift","runtimePreview":"Post-11.png","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" macro to initialized field for only suppressing decoding or encoding respectively.","type":"text"}],"type":"paragraph"}]}],"anchor":"Customize-field-decodingencoding"},{"stepsSection":[{"media":"Post-13.png","caption":[],"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"text":"Identify fields that are common across multiple data.","type":"text"}],"type":"paragraph"}],"code":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with fields representing common data."}]}],"media":null,"runtimePreview":"Post-13.png","caption":[],"code":"Post-13.swift"},{"caption":[],"code":"Post-14.swift","media":null,"type":"step","runtimePreview":"Post-13.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type for each specific post category only with fields representing category specific data."}]}]},{"content":[{"inlineContent":[{"text":"Add common post data field to each specific post category, field name doesnâ€™t matter here.","type":"text"}],"type":"paragraph"}],"caption":[],"type":"step","code":"Post-15.swift","media":null,"runtimePreview":"Post-13.png"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}]}],"media":null,"caption":[],"type":"step","code":"Post-16.swift","runtimePreview":"Post-13.png"}],"title":"Share common Codable fields","contentSection":[{"content":[{"inlineContent":[{"text":"Common ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" fields can be extracted to a separate type to be shared across other "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Share-common-Codable-fields"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"callToAction","title":"Represent variations in data","action":{"overridingTitle":"Get started","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","isActive":true}}],"variants":[{"paths":["\/tutorials\/metacodable\/essential"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"Post-09.swift":{"syntax":"swift","identifier":"Post-09.swift","highlights":[{"line":14},{"line":15}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"Post-07.png":{"type":"image","identifier":"Post-07.png","alt":"Basic post JSON representation with author and creation time","variants":[{"url":"\/images\/MetaCodable\/Post-07.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-07~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","kind":"section","type":"section","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"title":"IgnoreEncoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"Post-04.png":{"type":"image","identifier":"Post-04.png","alt":"Basic post JSON representation with author","variants":[{"url":"\/images\/MetaCodable\/Post-04.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-04~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","role":"pseudoSymbol","kind":"section","type":"section","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding"},"Post-12.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-12.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"syntax":"swift","highlights":[{"line":17}]},"Xcode 15 or later":{"type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later","identifier":"Xcode 15 or later"},"Post-01.png":{"type":"image","identifier":"Post-01.png","alt":"Basic post JSON representation","variants":[{"url":"\/images\/MetaCodable\/Post-01.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-01~dark.png"}]},"Post-06.png":{"type":"image","identifier":"Post-06.png","alt":"Basic post JSON representation with author and creation time","variants":[{"url":"\/images\/MetaCodable\/Post-06.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-06~dark.png"}]},"Post-13.png":{"type":"image","identifier":"Post-13.png","alt":"Multi-category post JSON representation","variants":[{"url":"\/images\/MetaCodable\/Post-13.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-13~dark.png"}]},"Post-16.swift":{"syntax":"swift","identifier":"Post-16.swift","highlights":[{"line":15},{"line":22},{"line":30}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    @CodedAt","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    @CodedAt","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    @CodedAt","    let base: Post","    let url: String","    let duration: Float","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"Post-04.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-04.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"syntax":"swift","highlights":[{"line":9},{"line":10}]},"Post-14.swift":{"syntax":"swift","identifier":"Post-14.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"url":"\/tutorials\/metacodable\/enum","type":"topic","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","role":"project","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"Post-11.png":{"type":"image","identifier":"Post-11.png","alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","variants":[{"url":"\/images\/MetaCodable\/Post-11.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-11~dark.png"}]},"Post-08.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file","identifier":"Post-08.swift","highlights":[],"fileType":"swift","fileName":"Post.swift"},"Post-15.swift":{"syntax":"swift","identifier":"Post-15.swift","highlights":[{"line":15},{"line":21},{"line":28}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"type":"topic","role":"project","title":"Represent dynamic data variations with protocol","kind":"project","estimatedTime":"20min","url":"\/tutorials\/metacodable\/dynamic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"Post-11.swift":{"syntax":"swift","identifier":"Post-11.swift","highlights":[{"line":16},{"line":17}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","estimatedTime":"20min","url":"\/tutorials\/metacodable\/helper","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project","type":"topic","title":"Add common decoding\/encoding customizations"},"Post-03.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-03.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"syntax":"swift","highlights":[{"line":6},{"line":7}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","url":"\/documentation\/metacodable\/codedby(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"Post-05.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file","identifier":"Post-05.swift","highlights":[{"line":9}],"fileType":"swift","fileName":"Post.swift"},"Post-06.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-06.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","highlights":[{"line":7}]},"Post-10.swift":{"syntax":"swift","identifier":"Post-10.swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"doc://MetaCodable/tutorials/Usage":{"url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","type":"topic","kind":"overview","role":"overview","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","role":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","type":"topic","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"Post-01.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-01.swift","content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"syntax":"swift","highlights":[]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"Post-07.swift":{"syntax":"swift","identifier":"Post-07.swift","highlights":[{"line":4},{"line":11}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"type":"file","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","url":"\/documentation\/metacodable\/codable()","role":"symbol","kind":"symbol","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"text":" ","type":"text"},{"type":"text","text":"declarations."}],"title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","kind":"article","url":"\/tutorials\/usage\/metacodable-essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","title":"MetaCodable essentials","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","kind":"section","type":"section","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"Post-02.swift":{"fileName":"Post.swift","type":"file","fileType":"swift","identifier":"Post-02.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"syntax":"swift","highlights":[{"line":1},{"line":2},{"line":3}]},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"title":"Advanced MetaCodable","kind":"article","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"type":"topic","url":"\/documentation\/metacodable\/default(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"title":"Default(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"type":"text","text":" "},{"text":"of the provided case format.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"type":"topic","role":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","kind":"symbol"},"Post-13.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"syntax":"swift","type":"file","identifier":"Post-13.swift","highlights":[],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"section","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"type":"topic","role":"project","title":"Use with general-purpose Swift types","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"kind":"symbol","type":"topic","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"}}}