{"variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"content":[{"inlineContent":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"paragraph"}],"kind":"hero","title":"Add common decoding\/encoding customizations","estimatedTimeInMinutes":20,"xcodeRequirement":"Xcode 15 or later","chapter":"Advanced MetaCodable"},{"tasks":[{"title":"Decode\/Encode basic value types without type check","stepsSection":[{"type":"step","content":[{"inlineContent":[{"text":"Identify data with unpredictable type and can be mapped to an expected type.","type":"text"}],"type":"paragraph"}],"media":"Product.png","caption":[],"code":null,"runtimePreview":null},{"runtimePreview":"Product.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as expected type.","type":"text"}]}],"media":null,"code":"Product-01.swift","caption":[],"type":"step"},{"code":"Product-02.swift","runtimePreview":"Product.png","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}],"type":"paragraph"}],"type":"step","caption":[],"media":null}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"i.e. if expected ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" type data is coming as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", the data can be converted to expected type.","type":"text"}]}]}],"anchor":"DecodeEncode-basic-value-types-without-type-check"},{"title":"Decode\/Encode date representations","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" like text formats."}]}],"kind":"contentAndMedia"}],"anchor":"DecodeEncode-date-representations","stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify date formats represented in data."}]}],"caption":[],"media":"Date.png","runtimePreview":null,"type":"step"},{"media":null,"caption":[],"runtimePreview":"Date.png","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type."}]}],"code":"Date-01.swift","type":"step"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"Since1970DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode UNIX timestamp."}]}],"code":"Date-02.swift","runtimePreview":"Date.png","type":"step"},{"caption":[],"code":"Date-03.swift","runtimePreview":"Date.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"ISO8601DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}],"type":"paragraph"}],"media":null,"type":"step"},{"caption":[],"media":null,"code":"Date-04.swift","runtimePreview":"Date.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"DateCoder","type":"codeVoice"},{"text":" to decode\/encode date represented in custom formats by providing the formatter.","type":"text"}]}],"type":"step"}]},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values.","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"media":"Data.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as the required sequence type."}]}],"caption":[],"runtimePreview":"Data.png","type":"step","media":null,"code":"Data-01.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"SequenceCoder","type":"codeVoice"},{"type":"text","text":" and provide "},{"code":"elementHelper","type":"codeVoice"},{"type":"text","text":" "},{"type":"codeVoice","code":"HelperCoder"},{"type":"text","text":" to customize decoding\/encoding of each element."}],"type":"paragraph"}],"caption":[],"runtimePreview":"Data.png","media":null,"code":"Data-02.swift","type":"step"},{"runtimePreview":"Data.png","type":"step","code":"Data-03.swift","content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"type":"codeVoice","code":"lossy"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to ignore invalid element data instead of failing.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[]},{"media":null,"code":"Data-04.swift","runtimePreview":"Data.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}],"type":"paragraph"}],"type":"step"}],"anchor":"DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values"},{"stepsSection":[{"caption":[],"media":"User.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with different key in decoding and encoding."}]}],"runtimePreview":null,"type":"step"},{"code":"User-01.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields according to the data.","type":"text"}]}],"runtimePreview":"User.png","type":"step","media":null},{"code":"User-02.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" type that accepts decoding and encoding key values."}]}],"caption":[],"runtimePreview":"User.png","media":null,"type":"step"},{"media":null,"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" type to be used for decoding\/encoding from provided string values."}]}],"runtimePreview":"User.png","code":"User-03.swift"},{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Provide "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":" implementations for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","isActive":true},{"text":" for decoding and encoding with provided key values.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":"User.png","code":"User-04.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the created custom "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"type":"text","text":" macro to use the decoding\/encoding customization."}]}],"media":null,"code":"User-05.swift","runtimePreview":"User.png","caption":[]},{"code":"User-06.swift","runtimePreview":"User.png","caption":[],"type":"step","content":[{"inlineContent":[{"text":"Apply ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" macro without any arguments, to the property to pass the type’s "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" "},{"type":"codeVoice","code":"decoder"},{"text":" argument to the custom ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":"."}],"type":"paragraph"}],"media":null}],"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Create custom advanced customizations","anchor":"Create-custom-advanced-customizations"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"title":"Represent dynamic data variations with protocol","kind":"callToAction","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","overridingTitle":"Get started","type":"reference","isActive":true}}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"metadata":{"role":"project","category":"Discover MetaCodable","categoryPathComponent":"Usage","title":"Add common decoding\/encoding customizations"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}]}]},"kind":"project","references":{"User-02.swift":{"syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"identifier":"User-02.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"User.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"doc://MetaCodable/tutorials/Usage":{"url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","type":"topic","kind":"overview","role":"overview","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","type":"topic","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"User-04.swift":{"fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","identifier":"User-04.swift","fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift"},"Product-01.swift":{"syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"identifier":"Product-01.swift","highlights":[],"fileName":"Product.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","kind":"section","type":"section","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"defaultImplementations":2,"required":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"encode"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Coded","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Encoder","kind":"typeIdentifier","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","kind":"symbol","abstract":[{"text":"Encodes given value of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type to the provided ","type":"text"},{"type":"codeVoice","code":"encoder"},{"type":"text","text":"."}],"title":"encode(_:to:)"},"Date-04.swift":{"fileName":"Date.swift","content":["import Foundation","import HelperCoders","import MetaCodable","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"type":"file","identifier":"Date-04.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"syntax":"swift"},"User-06.swift":{"syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-06.swift","highlights":[{"line":11}],"fileName":"User.swift","fileType":"swift"},"Data-02.swift":{"fileName":"Data.swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"type":"file","identifier":"Data-02.swift","fileType":"swift","highlights":[{"line":2},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","role":"pseudoSymbol","kind":"section","type":"section","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"Data-01.swift":{"syntax":"swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"identifier":"Data-01.swift","highlights":[],"fileName":"Data.swift","fileType":"swift"},"Product-02.swift":{"fileName":"Product.swift","content":["import HelperCoders","import MetaCodable","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"type":"file","identifier":"Product-02.swift","fileType":"swift","highlights":[{"line":1},{"line":6},{"line":8}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding"},"Data-04.swift":{"content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([]),","            ]","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":10},{"line":11},{"line":12}],"fileName":"Data.swift","syntax":"swift","fileType":"swift","identifier":"Data-04.swift","type":"file"},"Xcode 15 or later":{"url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later","type":"xcodeRequirement","identifier":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","kind":"article","url":"\/tutorials\/usage\/metacodable-essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","title":"MetaCodable essentials","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","kind":"section","type":"section","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HelperCoder"}],"kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"User-01.swift":{"syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"identifier":"User-01.swift","highlights":[],"fileName":"User.swift","fileType":"swift"},"Data-03.swift":{"fileName":"Data.swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"type":"file","identifier":"Data-03.swift","fileType":"swift","highlights":[{"line":9},{"line":10}],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"title":"decode(from:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","abstract":[{"type":"text","text":"Decodes a value of the "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type from the given ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":"."}],"required":true,"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"kind":"text","text":": any "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP","text":"Decoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","text":"Coded"}],"kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"url":"\/tutorials\/metacodable\/enum","type":"topic","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","role":"project","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"title":"Advanced MetaCodable","kind":"article","type":"topic"},"Product.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Product.png"},{"url":"\/images\/MetaCodable\/Product~dark.png","traits":["1x","dark"]}],"alt":"List of products with inconsistent property types","type":"image","identifier":"Product.png"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"type":"topic","role":"project","title":"Represent dynamic data variations with protocol","kind":"project","estimatedTime":"20min","url":"\/tutorials\/metacodable\/dynamic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","estimatedTime":"20min","url":"\/tutorials\/metacodable\/helper","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project","type":"topic","title":"Add common decoding\/encoding customizations"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","url":"\/documentation\/metacodable\/codedby(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"User-03.swift":{"fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","identifier":"User-03.swift","fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift"},"Date-03.swift":{"syntax":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"identifier":"Date-03.swift","highlights":[{"line":9}],"fileName":"Date.swift","fileType":"swift"},"User-05.swift":{"fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","identifier":"User-05.swift","fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift"},"Date-01.swift":{"syntax":"swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"identifier":"Date-01.swift","highlights":[],"fileName":"Date.swift","fileType":"swift"},"User.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/User.png"},{"url":"\/images\/MetaCodable\/User~dark.png","traits":["1x","dark"]}],"alt":"User data with different key in decoding and encoding","type":"image","identifier":"User.png"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"kind":"symbol","title":"Coded","required":true,"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"Date.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Date.png"},{"url":"\/images\/MetaCodable\/Date~dark.png","traits":["1x","dark"]}],"alt":"Data with date formats varying for each property","type":"image","identifier":"Date.png"},"Data.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Data.png"},{"url":"\/images\/MetaCodable\/Data~dark.png","traits":["1x","dark"]}],"alt":"Base64 data sequence data","type":"image","identifier":"Data.png"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"section","kind":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"type":"topic","role":"project","title":"Use with general-purpose Swift types","kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}]},"Date-02.swift":{"syntax":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"identifier":"Date-02.swift","highlights":[{"line":2},{"line":7}],"fileName":"Date.swift","fileType":"swift"}}}