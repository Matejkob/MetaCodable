{"primaryContentSections":[{"declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"literal","kind":"externalParam"},{"kind":"text","text":": "},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExpressibleByLiteralSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","kind":"typeIdentifier"},{"text":")","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"codeListing","syntax":null,"code":["let arrayExpr = Expr(literal: [\"a\", \"b\", \"c\"])","\/\/ `arrayExpr` is a syntax tree like `[\"a\", \"b\", \"c\"]`"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This initializer is compatible with types that conform to"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","isActive":true},{"type":"text","text":". These include:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"code":"Substring","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"Int","type":"codeVoice"},{"type":"text","text":" and other integer types"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"},{"text":" and other floating-point types","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Bool"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Array"},{"text":" and ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" of conforming elements","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" and "},{"code":"KeyValuePairs","type":"codeVoice"},{"text":" of conforming keys and values","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Optional"},{"text":" of conforming wrapped value","type":"text"}]}]}]},{"inlineContent":[{"text":"Conformances will generally handle edge cases sensibly: ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" will","type":"text"},{"type":"text","text":" "},{"type":"text","text":"use raw literals and escapes as needed, "},{"type":"codeVoice","code":"Optional"},{"text":" will wrap a nested","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"text":" in ","type":"text"},{"type":"codeVoice","code":".some"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" will represent special values like infinities"},{"type":"text","text":" "},{"type":"text","text":"as code sequences like "},{"type":"codeVoice","code":".infinity"},{"type":"text","text":", etc. "},{"code":"Set","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" sort","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"their elements to improve stability."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because of that intelligent behavior, this initializer is not guaranteed"},{"type":"text","text":" "},{"text":"to produce a literal as the outermost syntax node, or even to have a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"literal anywhere in its syntax tree. Use a convenience initializer on a"},{"text":" ","type":"text"},{"text":"specific type if you need that exact type in the syntax tree.","type":"text"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax\/init(literal:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Returns a syntax tree for an expression that represents the value of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"type":"codeVoice","code":"Array<String>"},{"type":"text","text":" will result in"},{"type":"text","text":" "},{"text":"an array literal containing string literals:","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax"]]},"metadata":{"title":"init(literal:)","roleHeading":"Initializer","symbolKind":"init","extendedModule":"SwiftSyntax","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"literal","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"ExpressibleByLiteralSyntax","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P"},{"kind":"text","text":")"}],"role":"symbol","modules":[{"relatedModules":["SwiftSyntax"],"name":"SwiftSyntaxBuilder"}],"externalID":"s:11SwiftSyntax04ExprB0V0aB7BuilderE7literalACx_tcAD020ExpressibleByLiteralB0Rzlufc"},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)"},"sections":[],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/ExpressibleByLiteralSyntax":{"title":"ExpressibleByLiteralSyntax","navigatorTitle":[{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","role":"symbol","abstract":[{"type":"text","text":"A Swift type whose value can be represented directly in source code by a"},{"type":"text","text":" "},{"text":"Swift literal.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"type":"topic","url":"\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder":{"title":"SwiftSyntaxBuilder","type":"topic","url":"\/documentation\/swiftsyntaxbuilder","abstract":[],"role":"collection","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax/ExprSyntax":{"kind":"symbol","title":"ExprSyntax","type":"topic","abstract":[],"navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax","role":"symbol","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V","text":"ExprSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax":{"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax","kind":"symbol","title":"SwiftSyntax","role":"collection","abstract":[],"url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax/ExprSyntax/init(literal:)":{"url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax\/init(literal:)","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"literal"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","text":"ExpressibleByLiteralSyntax"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"text":"Returns a syntax tree for an expression that represents the value of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"type":"codeVoice","code":"Array<String>"},{"text":" will result in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an array literal containing string literals:"}],"kind":"symbol","role":"symbol","title":"init(literal:)"}}}