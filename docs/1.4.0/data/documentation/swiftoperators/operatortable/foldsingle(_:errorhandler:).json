{"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftoperators\/operatortable\/foldsingle(_:errorhandler:)"]}],"abstract":[{"type":"text","text":"“Fold” a sequence expression into a structured syntax tree."}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorTable"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorTable\/foldSingle(_:errorHandler:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"foldSingle","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"sequence","kind":"internalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SequenceExprSyntax","preciseIdentifier":"s:11SwiftSyntax012SequenceExprB0V","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SequenceExprSyntax"},{"kind":"text","text":", "},{"kind":"externalParam","text":"errorHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"OperatorErrorHandler","preciseIdentifier":"s:14SwiftOperators20OperatorErrorHandlera","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorErrorHandler"},{"text":" = { throw $0 }) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"ExprSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExprSyntax","preciseIdentifier":"s:11SwiftSyntax04ExprB0V","kind":"typeIdentifier"}],"platforms":["macOS"]}]},{"content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequence expression results from parsing an expression involving"},{"text":" ","type":"text"},{"type":"text","text":"infix operators, such as "},{"code":"x + y * z","type":"codeVoice"},{"type":"text","text":". Swift’s grammar does not"},{"text":" ","type":"text"},{"type":"text","text":"involve operator precedence, so a sequence expression is a flat list"},{"type":"text","text":" "},{"text":"of all of the terms ","type":"text"},{"type":"codeVoice","code":"x"},{"type":"text","text":", "},{"code":"+","type":"codeVoice"},{"text":", ","type":"text"},{"code":"y","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"*"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"z"},{"type":"text","text":". This operation folds"},{"text":" ","type":"text"},{"type":"text","text":"a single sequence expression into a structured syntax tree that"},{"type":"text","text":" "},{"type":"text","text":"represents the same source code, but describes the order of operations"},{"text":" ","type":"text"},{"text":"as if the expression has been parenthesized ","type":"text"},{"code":"x + (y * z)","type":"codeVoice"},{"type":"text","text":"."}]}],"kind":"content"}],"metadata":{"modules":[{"name":"SwiftOperators"}],"title":"foldSingle(_:errorHandler:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"foldSingle"},{"text":"(","kind":"text"},{"text":"SequenceExprSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax012SequenceExprB0V"},{"text":", ","kind":"text"},{"text":"errorHandler","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14SwiftOperators20OperatorErrorHandlera","text":"OperatorErrorHandler"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"ExprSyntax","preciseIdentifier":"s:11SwiftSyntax04ExprB0V"}],"externalID":"s:14SwiftOperators13OperatorTableV10foldSingle_12errorHandler0A6Syntax04ExprI0VAF08SequencejI0V_yAA0C5ErrorOKXEtKF","roleHeading":"Instance Method","role":"symbol","extendedModule":"SwiftOperators"},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftOperators/OperatorTable/foldSingle(_:errorHandler:)":{"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorTable\/foldSingle(_:errorHandler:)","type":"topic","url":"\/documentation\/swiftoperators\/operatortable\/foldsingle(_:errorhandler:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"foldSingle"},{"kind":"text","text":"("},{"preciseIdentifier":"s:11SwiftSyntax012SequenceExprB0V","text":"SequenceExprSyntax","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"errorHandler"},{"text":": ","kind":"text"},{"text":"OperatorErrorHandler","preciseIdentifier":"s:14SwiftOperators20OperatorErrorHandlera","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:11SwiftSyntax04ExprB0V","kind":"typeIdentifier","text":"ExprSyntax"}],"abstract":[{"text":"“Fold” a sequence expression into a structured syntax tree.","type":"text"}],"title":"foldSingle(_:errorHandler:)"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftOperators/OperatorTable":{"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorTable","navigatorTitle":[{"kind":"identifier","text":"OperatorTable"}],"kind":"symbol","url":"\/documentation\/swiftoperators\/operatortable","abstract":[{"text":"Maintains and validates information about all operators in a Swift program.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"OperatorTable"}],"title":"OperatorTable"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftOperators":{"role":"collection","title":"SwiftOperators","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators","url":"\/documentation\/swiftoperators","abstract":[],"type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SequenceExprSyntax":{"url":"\/documentation\/swiftsyntax\/sequenceexprsyntax","type":"topic","abstract":[{"type":"text","text":"A flat list of expressions before operator folding using the "},{"type":"codeVoice","code":"SwiftOperators"},{"type":"text","text":" library."}],"title":"SequenceExprSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SequenceExprSyntax","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SequenceExprSyntax","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"SequenceExprSyntax","kind":"identifier"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftOperators/OperatorErrorHandler":{"abstract":[{"text":"A function that receives an operator precedence error and may do with it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whatever it likes."}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftOperators\/OperatorErrorHandler","title":"OperatorErrorHandler","navigatorTitle":[{"text":"OperatorErrorHandler","kind":"identifier"}],"kind":"symbol","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OperatorErrorHandler"}],"url":"\/documentation\/swiftoperators\/operatorerrorhandler"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/ExprSyntax":{"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExprSyntax","title":"ExprSyntax","url":"\/documentation\/swiftsyntax\/exprsyntax","type":"topic","navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExprSyntax","kind":"identifier"}],"abstract":[],"role":"symbol"}}}