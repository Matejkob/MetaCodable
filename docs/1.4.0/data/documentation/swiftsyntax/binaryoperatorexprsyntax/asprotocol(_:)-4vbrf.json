{"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax"},{"kind":"text","text":".Protocol) -> "},{"text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"kind":"text","text":"?"}],"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","title":"asProtocol(_:)","modules":[{"name":"SwiftSyntax"}],"extendedModule":"SwiftSyntax","externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA026FreestandingMacroExpansionB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax018BinaryOperatorExprB0V"},"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax\/SyntaxProtocol-Implementations"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":": ","kind":"text"},{"text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax"},{"text":".Protocol) -> ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax"},{"kind":"text","text":"?"}],"languages":["swift"]}],"kind":"declarations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntax\/binaryoperatorexprsyntax\/asprotocol(_:)-4vbrf"]}],"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"Note that this will incur an existential conversion.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax\/asProtocol(_:)-4vbrf"},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/BinaryOperatorExprSyntax/SyntaxProtocol-Implementations":{"abstract":[],"role":"collectionGroup","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax\/SyntaxProtocol-Implementations","kind":"article","title":"SyntaxProtocol Implementations","url":"\/documentation\/swiftsyntax\/binaryoperatorexprsyntax\/syntaxprotocol-implementations","type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/FreestandingMacroExpansionSyntax":{"navigatorTitle":[{"kind":"identifier","text":"FreestandingMacroExpansionSyntax"}],"abstract":[],"kind":"symbol","url":"\/documentation\/swiftsyntax\/freestandingmacroexpansionsyntax","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FreestandingMacroExpansionSyntax","kind":"identifier"}],"type":"topic","title":"FreestandingMacroExpansionSyntax","role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/BinaryOperatorExprSyntax/asProtocol(_:)-4vbrf":{"title":"asProtocol(_:)","abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax\/asProtocol(_:)-4vbrf","url":"\/documentation\/swiftsyntax\/binaryoperatorexprsyntax\/asprotocol(_:)-4vbrf","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"text":".Protocol) -> ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"role":"symbol","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","url":"\/documentation\/swiftsyntax","kind":"symbol","type":"topic","abstract":[],"title":"SwiftSyntax","role":"collection"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/BinaryOperatorExprSyntax":{"abstract":[{"type":"text","text":"An operator like "},{"code":"+","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BinaryOperatorExprSyntax"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BinaryOperatorExprSyntax","navigatorTitle":[{"text":"BinaryOperatorExprSyntax","kind":"identifier"}],"kind":"symbol","title":"BinaryOperatorExprSyntax","url":"\/documentation\/swiftsyntax\/binaryoperatorexprsyntax","type":"topic"}}}