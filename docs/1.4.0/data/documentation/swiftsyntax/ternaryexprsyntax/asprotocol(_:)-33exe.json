{"metadata":{"modules":[{"name":"SwiftSyntax"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax06BracedB0P","text":"BracedSyntax","kind":"typeIdentifier"},{"kind":"text","text":".Protocol) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax06BracedB0P","text":"BracedSyntax"},{"kind":"text","text":"?"}],"extendedModule":"SwiftSyntax","externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA06BracedB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax011TernaryExprB0V","roleHeading":"Instance Method","symbolKind":"method","title":"asProtocol(_:)"},"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax\/SyntaxProtocol-Implementations"]]},"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"asProtocol"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"BracedSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax06BracedB0P","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BracedSyntax"},{"text":".Protocol) -> ","kind":"text"},{"text":"BracedSyntax","preciseIdentifier":"s:11SwiftSyntax06BracedB0P","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BracedSyntax","kind":"typeIdentifier"},{"kind":"text","text":"?"}]}]}],"kind":"symbol","abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"BracedSyntax"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax\/asProtocol(_:)-33exe"},"variants":[{"paths":["\/documentation\/swiftsyntax\/ternaryexprsyntax\/asprotocol(_:)-33exe"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/TernaryExprSyntax":{"title":"TernaryExprSyntax","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TernaryExprSyntax","kind":"identifier"}],"url":"\/documentation\/swiftsyntax\/ternaryexprsyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax","role":"symbol","navigatorTitle":[{"text":"TernaryExprSyntax","kind":"identifier"}],"abstract":[{"type":"text","text":"The ternary operator with operator precedences resolved."}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/BracedSyntax":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/BracedSyntax","type":"topic","title":"BracedSyntax","abstract":[{"text":"\/ Automatically generated by generate-swift-syntax","type":"text"},{"text":" ","type":"text"},{"text":"\/ Do not edit directly!","type":"text"}],"url":"\/documentation\/swiftsyntax\/bracedsyntax","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BracedSyntax"}],"navigatorTitle":[{"kind":"identifier","text":"BracedSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/TernaryExprSyntax/SyntaxProtocol-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/swiftsyntax\/ternaryexprsyntax\/syntaxprotocol-implementations","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax\/SyntaxProtocol-Implementations","type":"topic","abstract":[],"title":"SyntaxProtocol Implementations"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/TernaryExprSyntax/asProtocol(_:)-33exe":{"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"type":"text","text":" "},{"type":"codeVoice","code":"BracedSyntax"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/TernaryExprSyntax\/asProtocol(_:)-33exe","title":"asProtocol(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"("},{"text":"BracedSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax06BracedB0P"},{"kind":"text","text":".Protocol) -> "},{"text":"BracedSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax06BracedB0P"},{"kind":"text","text":"?"}],"url":"\/documentation\/swiftsyntax\/ternaryexprsyntax\/asprotocol(_:)-33exe","role":"symbol","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","url":"\/documentation\/swiftsyntax","kind":"symbol","type":"topic","abstract":[],"title":"SwiftSyntax","role":"collection"}}}