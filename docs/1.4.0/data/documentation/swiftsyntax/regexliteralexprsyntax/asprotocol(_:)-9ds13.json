{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax\/asProtocol(_:)-9ds13"},"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"type":"text","text":". Otherwise return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Note that this will incur an existential conversion."}],"variants":[{"paths":["\/documentation\/swiftsyntax\/regexliteralexprsyntax\/asprotocol(_:)-9ds13"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"title":"asProtocol(_:)","role":"symbol","extendedModule":"SwiftSyntax","externalID":"s:11SwiftSyntax0B8ProtocolPAAE02asC0yAA026FreestandingMacroExpansionB0_pSgAaE_pmF::SYNTHESIZED::s:11SwiftSyntax016RegexLiteralExprB0V","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax"},{"kind":"text","text":".Protocol) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax"},{"text":"?","kind":"text"}],"modules":[{"name":"SwiftSyntax"}]},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier"},{"kind":"text","text":".Protocol) -> "},{"kind":"typeIdentifier","text":"FreestandingMacroExpansionSyntax","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax"},{"kind":"text","text":"?"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax\/SyntaxProtocol-Implementations"]]},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/RegexLiteralExprSyntax":{"url":"\/documentation\/swiftsyntax\/regexliteralexprsyntax","type":"topic","abstract":[],"title":"RegexLiteralExprSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RegexLiteralExprSyntax","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"RegexLiteralExprSyntax","kind":"identifier"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","url":"\/documentation\/swiftsyntax","kind":"symbol","type":"topic","abstract":[],"title":"SwiftSyntax","role":"collection"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/RegexLiteralExprSyntax/asProtocol(_:)-9ds13":{"abstract":[{"type":"text","text":"Return the non-type erased version of this syntax node if it conforms to"},{"text":" ","type":"text"},{"type":"codeVoice","code":"FreestandingMacroExpansionSyntax"},{"text":". Otherwise return ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Note that this will incur an existential conversion.","type":"text"}],"url":"\/documentation\/swiftsyntax\/regexliteralexprsyntax\/asprotocol(_:)-9ds13","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"asProtocol","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P","text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier"},{"kind":"text","text":".Protocol) -> "},{"text":"FreestandingMacroExpansionSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax026FreestandingMacroExpansionB0P"},{"text":"?","kind":"text"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax\/asProtocol(_:)-9ds13","title":"asProtocol(_:)","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/RegexLiteralExprSyntax/SyntaxProtocol-Implementations":{"title":"SyntaxProtocol Implementations","kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/swiftsyntax\/regexliteralexprsyntax\/syntaxprotocol-implementations","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/RegexLiteralExprSyntax\/SyntaxProtocol-Implementations","type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/FreestandingMacroExpansionSyntax":{"navigatorTitle":[{"kind":"identifier","text":"FreestandingMacroExpansionSyntax"}],"abstract":[],"kind":"symbol","url":"\/documentation\/swiftsyntax\/freestandingmacroexpansionsyntax","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FreestandingMacroExpansionSyntax","kind":"identifier"}],"type":"topic","title":"FreestandingMacroExpansionSyntax","role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/FreestandingMacroExpansionSyntax"}}}