{"abstract":[{"text":"Before parsing arguments, capture all inputs that follow the ","type":"text"},{"code":"--","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"terminator in this argument array."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"postTerminator","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"}],"symbolKind":"property","title":"postTerminator","externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV14postTerminatorACvpZ","modules":[{"name":"ArgumentParser"}],"roleHeading":"Type Property"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"postTerminator","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"Example"},{"text":" command defined below has a ","type":"text"},{"type":"codeVoice","code":"words"},{"type":"text","text":" array that"},{"text":" ","type":"text"},{"text":"uses the ","type":"text"},{"type":"codeVoice","code":"postTerminator"},{"text":" parsing strategy:","type":"text"}]},{"type":"codeListing","code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","    @Argument var name = \"\"","","    @Argument(parsing: .postTerminator)","    var words: [String]","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Before looking for the "},{"code":"--verbose","type":"codeVoice"},{"type":"text","text":" flag and "},{"code":"<name>","type":"codeVoice"},{"type":"text","text":" argument, any inputs"},{"type":"text","text":" "},{"type":"text","text":"after the "},{"code":"--","type":"codeVoice"},{"text":" terminator are captured into the ","type":"text"},{"code":"words","type":"codeVoice"},{"text":" array.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["$ example --verbose Asa -- one two --other","one","two","--other","$ example Asa Extra -- one two --other","Error: Unexpected argument 'Extra'"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because options are parsed before arguments, an option that consumes or"},{"text":" ","type":"text"},{"type":"text","text":"suppresses the "},{"code":"--","type":"codeVoice"},{"text":" terminator can prevent a ","type":"text"},{"code":"postTerminator","type":"codeVoice"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"text":"array from capturing any input. In particular, the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","isActive":true},{"text":", and","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","type":"reference"},{"text":" parsing strategies can all consume","type":"text"},{"text":" ","type":"text"},{"text":"the terminator as part of their values.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This parsing strategy can be surprising for users, since it"},{"type":"text","text":" "},{"text":"changes the behavior of the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" terminator. Prefer "},{"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"whenever possible."}]}],"name":"Note","style":"note"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","interfaceLanguage":"swift"},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"abstract":[{"text":"Parse only unprefixed values from the command-line input, ignoring","type":"text"},{"type":"text","text":" "},{"text":"any inputs that have a dash prefix. This is the default strategy.","type":"text"}],"kind":"symbol","role":"symbol","title":"remaining","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArrayParsingStrategy/unconditionalSingleValue":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"unconditionalSingleValue","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","text":"ArrayParsingStrategy","kind":"typeIdentifier"}],"url":"\/documentation\/argumentparser\/arrayparsingstrategy\/unconditionalsinglevalue","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","title":"unconditionalSingleValue","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"Parse the value immediately after the option while allowing repeating options, joining multiple into an array.","type":"text"}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"type":"topic","kind":"symbol","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","navigatorTitle":[{"kind":"identifier","text":"ArgumentArrayParsingStrategy"}],"title":"ArgumentArrayParsingStrategy","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}],"abstract":[{"text":"The strategy to use when parsing multiple values from positional arguments","type":"text"},{"type":"text","text":" "},{"text":"into an array.","type":"text"}],"role":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser":{"title":"ArgumentParser","kind":"symbol","type":"topic","url":"\/documentation\/argumentparser","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","abstract":[],"role":"collection"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArrayParsingStrategy/remaining":{"title":"remaining","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"remaining","kind":"identifier"},{"kind":"text","text":": "},{"text":"ArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/remaining","kind":"symbol","abstract":[{"text":"Parse all remaining arguments into an array.","type":"text"}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/SingleValueParsingStrategy/unconditional":{"abstract":[{"type":"text","text":"Parse the next input, even if it could be interpreted as an option or"},{"type":"text","text":" "},{"type":"text","text":"flag."}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unconditional"},{"text":": ","kind":"text"},{"text":"SingleValueParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV"}],"type":"topic","title":"unconditional"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","title":"postTerminator","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"postTerminator"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"}],"url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Before parsing arguments, capture all inputs that follow the "},{"code":"--","type":"codeVoice"},{"text":" ","type":"text"},{"text":"terminator in this argument array.","type":"text"}]}}}