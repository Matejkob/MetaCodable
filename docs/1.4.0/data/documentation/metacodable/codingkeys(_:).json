{"kind":"symbol","metadata":{"roleHeading":"Macro","externalID":"s:11MetaCodable10CodingKeysyyAA0C15KeyNameStrategyOcfm","title":"CodingKeys(_:)","modules":[{"name":"MetaCodable"}],"role":"symbol","platforms":[{"deprecated":false,"name":"Swift","unavailable":false,"introducedAt":"5.9","beta":false}],"symbolKind":"macro","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:forErrors:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/UnTagged()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)"],"anchor":"Strategies","title":"Strategies","generated":true}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodingKeys"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"strategy","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","text":"CodingKeyNameStrategy","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]}],"name":"strategy"}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"reference"},{"text":" recommend using camel-case names.","type":"text"},{"text":" ","type":"text"},{"text":"This macro can be used for types to work with ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s of different"},{"type":"text","text":" "},{"text":"case format while keeping variable names camel-cased.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For a JSON where keys follow snake-case style:"}],"type":"paragraph"},{"code":["{","  \"product_name\": \"Banana\",","  \"product_cost\": 200,","  \"description\": \"A banana grown in Ecuador.\"","}"],"syntax":"json","type":"codeListing"},{"inlineContent":[{"text":"equivalent ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type can be created that uses keys in camel-case"},{"text":" ","type":"text"},{"text":"style:","type":"text"}],"type":"paragraph"},{"code":["@Codable","@CodingKeys(.snake_case)","struct CodableType {","    let productName: String","    let productCost: String","    let description: String","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" macro generated code will transform field names","type":"text"},{"text":" ","type":"text"},{"text":"to snake-case in the ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, for enums associated value label can be kept camel-cased while"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":"s of different case style can be generated.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For a JSON where keys follow snake-case style:","type":"text"}]},{"code":["{","  \"banana\": {","    \"product_cost\": 200","  },","  \"apple\": {","    \"product_cost\": 200","  }","}"],"type":"codeListing","syntax":"json"},{"type":"paragraph","inlineContent":[{"text":"equivalent ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type can be created that uses keys in camel-case"},{"type":"text","text":" "},{"type":"text","text":"style:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","@CodingKeys(.snake_case)","enum CodableType {","    case banana(_ productCost: String)","    case apple(_ productCost: String)","}"]},{"inlineContent":[{"text":"Also, for enums ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s of different case styles can be generated","type":"text"},{"type":"text","text":" "},{"text":"per case while keeping all associated values label camel-cased.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For a JSON where keys follow mixed snake-case and kebab-case style:","type":"text"}],"type":"paragraph"},{"syntax":"json","code":["{","  \"banana\": {","    \"product_cost\": 200","  },","  \"apple\": {","    \"product-cost\": 200","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"equivalent "},{"code":"Codable","type":"codeVoice"},{"text":" type can be created that uses keys in camel-case","type":"text"},{"type":"text","text":" "},{"type":"text","text":"style:"}]},{"syntax":"swift","code":["@Codable","enum CodableType {","    @CodingKeys(.snake_case)","    case banana(_ productCost: String)","    @CodingKeys(.kebabÔºçcase)","    case apple(_ productCost: String)","}"],"type":"codeListing"},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy is only used to transform field names to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"text":"s. ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s provided with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" will remain unchanged.","type":"text"}]}],"style":"note"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"text":" ","type":"text"},{"type":"text","text":"is a variable declaration. "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" macro uses this macro","type":"text"},{"text":" ","type":"text"},{"text":"when generating final implementations.","type":"text"}]}],"style":"note","type":"aside"},{"name":"Important","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute must be used combined with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"text":".","type":"text"}]}],"type":"aside"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/metacodable\/codingkeys(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(ifMissing:forErrors:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"ifMissing","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"forErrors","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:forErrors:)","abstract":[{"type":"text","text":"Provides different "},{"type":"codeVoice","code":"default"},{"text":" values to be used for missing value","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and decoding errors."}],"type":"topic","role":"symbol","title":"Default(ifMissing:forErrors:)","url":"\/documentation\/metacodable\/default(ifmissing:forerrors:)","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"title":"IgnoreEncoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable":{"url":"\/documentation\/metacodable","kind":"symbol","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"‚Äôs ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","type":"topic","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"type":"topic","role":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"ContentAt(_:_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Inherits(decodable:encodable:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Inherits","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"decodable"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"encodable","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)","abstract":[{"text":"Indicates whether super class conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" or not.","type":"text"}],"type":"topic","role":"symbol","title":"Inherits(decodable:encodable:)","url":"\/documentation\/metacodable\/inherits(decodable:encodable:)","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","url":"\/documentation\/metacodable\/codedby(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and protocols."}],"type":"topic","role":"symbol","title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/UnTagged()":{"type":"topic","url":"\/documentation\/metacodable\/untagged()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the cases of enum lack distinct identifier."}],"title":"UnTagged()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnTagged"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/UnTagged()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","abstract":[{"type":"text","text":"The values that determine the equivalent"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" value for a property name."}],"type":"topic","role":"symbol","title":"CodingKeyNameStrategy","url":"\/documentation\/metacodable\/codingkeynamestrategy","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(ifMissing:)":{"type":"topic","url":"\/documentation\/metacodable\/default(ifmissing:)","role":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value to be used when value is missing","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and when not initialized explicitly in memberwise initializer(s)."}],"kind":"symbol","title":"Default(ifMissing:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Default"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"ifMissing","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"type":"text","text":" "},{"text":"of the provided case format.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","role":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"text":" ","type":"text"},{"text":"is not satisfied.","type":"text"}],"title":"IgnoreEncoding(if:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<each ","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": (repeat each "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"text":"is not satisfied.","type":"text"}],"type":"topic","role":"symbol","title":"IgnoreEncoding(if:)","url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","type":"topic","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","url":"\/documentation\/metacodable\/codable()","role":"symbol","kind":"symbol","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"text":" ","type":"text"},{"type":"text","text":"declarations."}],"title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s."}],"type":"topic","role":"symbol","title":"CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"type":"topic","url":"\/documentation\/metacodable\/default(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"title":"Default(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"link","title":"Swift API Design Guidelines","titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"}}}