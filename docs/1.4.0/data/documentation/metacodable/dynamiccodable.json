{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/IdentifierValue","preciseIdentifier":"s:11MetaCodable07DynamicB0P15IdentifierValueQa","text":"IdentifierValue"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type declared "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","isActive":true},{"type":"text","text":" is used to decode conformed type"},{"type":"text","text":" "},{"text":"if matches, and encode to represent data for the conformed type.","type":"text"}]},{"inlineContent":[{"text":"Conforming to this ","type":"text"},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" allows type to be decoded\/encoded dynamically"},{"text":" ","type":"text"},{"text":"if it conforms to any additional ","type":"text"},{"type":"codeVoice","code":"protocol"},{"type":"text","text":"(s) that declare dynamic"},{"type":"text","text":" "},{"type":"text","text":"decoding\/encoding with attached "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" macro, while the conformed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types can be declared in several different targets."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To use dynamic decoding, first declare a protocol with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"type":"text","text":" macro"},{"text":" ","type":"text"},{"text":"attached that represents common data. i.e. for dynamic ","type":"text"},{"code":"Post","type":"codeVoice"},{"type":"text","text":" data:"}]},{"syntax":"json","code":["[","  {","    \"id\": \"00005678-abcd-efab-0123-456789abcdef\",","    \"type\": \"text\",","    \"author\": \"12345678-abcd-efab-0123-456789abcdef\",","    \"likes\": 145,","    \"createdAt\": \"2021-07-23T07:36:43Z\",","    \"text\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"43215678-abcd-efab-0123-456789abcdef\",","    \"type\": \"picture\",","    \"author\": \"abcd5678-abcd-efab-0123-456789abcdef\",","    \"likes\": 370,","    \"createdAt\": \"2021-07-23T09:32:13Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/picture.png\",","    \"caption\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"43215678-abcd-efab-0123-456789abcdef\",","    \"type\": \"photo\",","    \"author\": \"abcd5678-abcd-efab-0123-456789abcdef\",","    \"likes\": 370,","    \"createdAt\": \"2021-07-23T09:32:13Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/picture.png\",","    \"caption\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"64475bcb-caff-48c1-bb53-8376628b350b\",","    \"type\": \"audio\",","    \"author\": \"4c17c269-1c56-45ab-8863-d8924ece1d0b\",","    \"likes\": 25,","    \"createdAt\": \"2021-07-23T09:33:48Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/audio.aac\",","    \"duration\": 60","  },","  {","    \"id\": \"98765432-abcd-efab-0123-456789abcdef\",","    \"type\": \"video\",","    \"author\": \"04355678-abcd-efab-0123-456789abcdef\",","    \"likes\": 2345,","    \"createdAt\": \"2021-07-23T09:36:38Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/video.mp4\",","    \"duration\": 460,","    \"thumbnail\": \"https:\/\/a.url.com\/to\/a\/thumbnail.png\"","  }","]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"new protocol "},{"code":"Post","type":"codeVoice"},{"text":" can be created, with the type of identifier tagging","type":"text"},{"text":" ","type":"text"},{"text":"(external, internal or adjacent) indicated, here tagging is ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Data type of identifier can also be specified with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()"},{"type":"text","text":" if"},{"text":" ","type":"text"},{"type":"text","text":"varies from "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"code":["@Codable","@CodedAt(\"type\")","protocol Post {","    var id: UUID { get }","    var author: UUID { get }","    var likes: Int { get }","    var createdAt: String { get }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Individual ","type":"text"},{"type":"codeVoice","code":"Post"},{"type":"text","text":" data type can be created conforming to "},{"type":"codeVoice","code":"Post"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"DynamicCodable"},{"type":"text","text":", specifying one or multiple identifier:"}]},{"type":"codeListing","code":["@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"text\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"audio\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"video\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Include "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" build tool plugin to generate protocol"},{"text":" ","type":"text"},{"type":"text","text":"decoding\/encoding "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" named "},{"code":"\\(protocolName)Coder","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"where "},{"code":"\\(protocolName)","type":"codeVoice"},{"type":"text","text":" is replaced with the protocol name."}],"type":"paragraph"}]}],"metadata":{"symbolKind":"protocol","externalID":"s:11MetaCodable07DynamicB0P","title":"DynamicCodable","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"roleHeading":"Protocol","modules":[{"name":"MetaCodable"}],"navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}]},"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"topicSections":[{"anchor":"Associated-Types","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/IdentifierValue"],"title":"Associated Types","generated":true},{"generated":true,"title":"Type Properties","anchor":"Type-Properties","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"]}],"variants":[{"paths":["\/documentation\/metacodable\/dynamiccodable"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"],"generated":true,"title":"Dynamic Coding","anchor":"Dynamic-Coding"}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"title":"CodedAs()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">()","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedas()","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HelperCoder"}],"kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"abstract":[{"text":"The identifier value(s) for this type.","type":"text"}],"url":"\/documentation\/metacodable\/dynamiccodable\/identifier","title":"identifier","required":true,"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"identifier","kind":"identifier"},{"kind":"text","text":": "},{"text":"DynamicCodableIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"IdentifierValue","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB0P15IdentifierValueQa"},{"kind":"text","text":">"}]},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"fragments":[{"text":"configuration","kind":"keyword"},{"kind":"text","text":" "},{"text":"file","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaCodableConfig"}],"url":"\/documentation\/metacodable\/metacodableconfig","role":"symbol","title":"MetaCodableConfig","kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","abstract":[{"type":"text","text":"The configuration file providing additional customization options for "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" build tool plugin."}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","url":"\/documentation\/metacodable\/codable()","role":"symbol","kind":"symbol","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"text":" ","type":"text"},{"type":"text","text":"declarations."}],"title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/IdentifierValue":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/IdentifierValue","type":"topic","title":"IdentifierValue","url":"\/documentation\/metacodable\/dynamiccodable\/identifiervalue","role":"symbol","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdentifierValue"},{"text":" : ","kind":"text"},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"},{"kind":"text","text":", "},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}],"kind":"symbol","abstract":[{"type":"text","text":"The type of identifier value."}]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"DynamicCodableIdentifier","kind":"identifier"}],"kind":"symbol","title":"DynamicCodableIdentifier","navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"abstract":[{"type":"text","text":"The identifier option for "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference","isActive":true},{"text":" types.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","url":"\/documentation\/metacodable\/dynamiccodableidentifier"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"kind":"symbol","title":"Coded","required":true,"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","abstract":[{"text":"A type that can be decoded\/encoded dynamically based on unique identifier.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"type":"topic","title":"DynamicCodable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"url":"\/documentation\/metacodable\/dynamiccodable"},"doc://MetaCodable/documentation/MetaCodable":{"url":"\/documentation\/metacodable","kind":"symbol","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","type":"topic","role":"collection"}}}