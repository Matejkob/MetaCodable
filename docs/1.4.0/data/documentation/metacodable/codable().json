{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","interfaceLanguage":"swift"},"metadata":{"title":"Codable()","symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"externalID":"s:11MetaCodable0B0yycfm","modules":[{"name":"MetaCodable"}],"roleHeading":"Macro","platforms":[{"deprecated":false,"introducedAt":"5.9","name":"Swift","beta":false,"unavailable":false}],"role":"symbol"},"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"generated":true,"anchor":"Macros","title":"Macros"}],"sections":[],"abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:SE","text":"Encodable","kind":"typeIdentifier"},{"text":", names: named(CodingKeys), named(DecodingKeys), named(init(from:)), named(encode(to:))) ","kind":"text"},{"kind":"attribute","text":"@attached"},{"text":"(member, conformances: ","kind":"text"},{"text":"Decodable","preciseIdentifier":"s:Se","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"text":", names: named(CodingKeys), named(init(from:)), named(encode(to:))) ","kind":"text"},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Usage","level":1,"anchor":"Usage","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the field name is used as "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field value during"},{"text":" ","type":"text"},{"text":"encoding and decoding. Following customization can be done on fields to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"provide custom decode and encode behavior:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" providing single string value as custom coding key."}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" providing multiple string value as nested coding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"key path."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"text":" with one or more string value as nested container","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coding key path, with variable name as coding key."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" with no path arguments, when type is composition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of multiple "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"text":" to provide additional coding key values where","type":"text"},{"type":"text","text":" "},{"text":"field value can appear.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":" to provide custom decoding\/encoding behavior for"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types or implement decoding\/encoding for non-"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" to provide default value when decoding fails.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"type":"text","text":" to provide custom values for enum cases."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" to provide enum-case\/protocol identifier tag path."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference","isActive":true},{"text":" to provide enum-case\/protocol identifier tag type.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference","isActive":true},{"type":"text","text":" to provided enum-case\/protocol content path."}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"type":"text","text":" to ignore specific properties\/cases\/types from"},{"type":"text","text":" "},{"type":"text","text":"decoding\/encoding or both."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka"},{"type":"text","text":" "},{"text":"to ignore encoding based on custom conditions.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"text":" to work with different case style ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"type":"text","text":" to ignore decoding and encoding"},{"text":" ","type":"text"},{"text":"all initialized properties\/case associated variables.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Generate protocol decoding\/encoding ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":"s with build tool","type":"text"},{"text":" ","type":"text"},{"text":"plugin ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" from "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable"},{"type":"text","text":" types."}],"type":"paragraph"}]}],"type":"unorderedList"},{"text":"Effect","anchor":"Effect","level":1,"type":"heading"},{"inlineContent":[{"text":"This macro composes extension macro expansion depending on ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" "},{"text":"conformance of type:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Extension macro expansion, to confirm to ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"protocols depending on whether type doesnâ€™t already conform to "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" "},{"text":"or ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Extension macro expansion, to generate custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" type for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the attached declaration named "},{"code":"CodingKeys","type":"codeVoice"},{"type":"text","text":" and use this type for"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"text":" implementation of both ","type":"text"},{"type":"codeVoice","code":"init(from:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" "},{"type":"text","text":"methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If attached declaration already conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" this macro expansion","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is skipped."}]}]}],"type":"unorderedList"},{"style":"important","content":[{"inlineContent":[{"type":"text","text":"The attached declaration must be of a "},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" type. "},{"overridingTitleInlineContent":[{"text":"See the limitations for this macro","type":"text"}],"overridingTitle":"See the limitations for this macro","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","name":"Important"}]}],"variants":[{"paths":["\/documentation\/metacodable\/codable()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"kind":"symbol","type":"topic","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"HelperCoder"}],"kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"type":"topic","url":"\/documentation\/metacodable\/default(_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"title":"Default(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"title":"CodedAs()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">()","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedas()","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"kind":"symbol","title":"Coded","required":true,"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","abstract":[{"text":"A type that can be decoded\/encoded dynamically based on unique identifier.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"type":"topic","title":"DynamicCodable","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"url":"\/documentation\/metacodable\/dynamiccodable"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"title":"CodedIn(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","url":"\/documentation\/metacodable\/codedby(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/memberinit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","title":"MemberInit()","type":"topic","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" and "},{"code":"actor","type":"codeVoice"},{"type":"text","text":" types"},{"text":" ","type":"text"},{"type":"text","text":"by leveraging custom attributes provided on variable declarations."}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","url":"\/documentation\/metacodable\/codable()","role":"symbol","kind":"symbol","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"text":" ","type":"text"},{"type":"text","text":"declarations."}],"title":"Codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"type":"text","text":" "},{"text":"of the provided case format.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"kind":"symbol","type":"topic","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","role":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"text":" ","type":"text"},{"text":"is not satisfied.","type":"text"}],"title":"IgnoreEncoding(if:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<each ","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": (repeat each "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv"},"doc://MetaCodable/documentation/MetaCodable":{"url":"\/documentation\/metacodable","kind":"symbol","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","type":"topic","role":"collection"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"ContentAt(_:_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"if","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"text":"is not satisfied.","type":"text"}],"type":"topic","role":"symbol","title":"IgnoreEncoding(if:)","url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"type":"topic","role":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"url":"\/documentation\/metacodable\/limitations","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","title":"Limitations","type":"topic","kind":"article","role":"article","abstract":[{"text":"All the usage limitations for ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true},{"type":"text","text":"."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"title":"IgnoreEncoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","type":"topic","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"}}}