{"metadata":{"symbolKind":"module","modules":[{"name":"MetaCodable"}],"platforms":[{"introducedAt":"5.9","name":"Swift"}],"externalID":"MetaCodable","role":"collection","title":"MetaCodable","roleHeading":"Framework"},"hierarchy":{"paths":[[]]},"abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"topicSections":[{"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"],"title":"Essentials"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Strategies"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"],"title":"Helpers"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"],"title":"Dynamic Coding"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"],"title":"Enumerations"}],"sections":[],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" framework exposes custom macros which can be used to generate dynamic "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations. The core of the framework is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro which generates the implementation aided by data provided with using other macros."}]},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" aims to supercharge your ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations by providing these inbox features:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value declaration per variable, instead of requiring you to write all the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" passing single argument."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create flattened model for nested ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" passing no arguments."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to read data from additional fallback ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s provided with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to provide default value in case of decoding failures with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create custom decoding\/encoding strategies with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":" and using them with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":". i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","type":"reference","isActive":true},{"text":" etc.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows specifying different case values with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"type":"text","text":" and case value\/protocol type identifier type different from "},{"type":"codeVoice","code":"String"},{"type":"text","text":" with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows specifying enum-case\/protocol type identifier path with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" and case content path with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore specific properties\/cases from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Allows to use camel-case names for variables according to ","type":"text"},{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"reference","isActive":true},{"text":", while enabling a type\/case to work with different case style keys with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to ignore all initialized properties of a type\/case from decoding\/encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"text":" etc.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to generate protocol decoding\/encoding ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":"s with ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin from ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference","isActive":true},{"text":" types.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","overridingTitle":"See the limitations for this macro","overridingTitleInlineContent":[{"inlineContent":[{"text":"See the limitations for this macro","type":"text"}],"type":"strong"}],"isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"level":2,"text":"Installation","type":"heading","anchor":"Installation"},{"type":"tabNavigator","tabs":[{"title":"Swift Package Manager","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"type":"codeVoice","code":"swift"},{"type":"text","text":" compiler."}]},{"type":"paragraph","inlineContent":[{"text":"Once you have your Swift package set up, adding ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" as a dependency is as easy as adding it to the ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"text":" value of your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":".","type":"text"}]},{"type":"codeListing","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can add the "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" module product as dependency to the "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s of your choosing, by adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s."}]},{"type":"codeListing","code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift"}]},{"title":"CocoaPods","content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/cocoapods.org"},{"type":"text","text":" is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" into your Xcode project using CocoaPods, specify it in your "},{"type":"codeVoice","code":"Podfile"},{"type":"text","text":":"}]},{"syntax":"ruby","code":["pod 'MetaCodable'"],"type":"codeListing"}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/metacodable"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"deprecated":true,"navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LossySequenceCoder","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"title":"LossySequenceCoder","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/lossysequencecoder"},"https://cocoapods.org":{"identifier":"https:\/\/cocoapods.org","url":"https:\/\/cocoapods.org","titleInlineContent":[{"type":"text","text":"CocoaPods"}],"title":"CocoaPods","type":"link"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"type":"text","text":" "},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodableIdentifier"}],"title":"DynamicCodableIdentifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","url":"\/documentation\/metacodable\/dynamiccodableidentifier","abstract":[{"text":"The identifier option for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"text":" types.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"title":"IgnoreDecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"title":"CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"url":"\/documentation\/metacodable\/dynamiccodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"title":"DynamicCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"title":"Default(_:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"topic","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformances faster than ever before.","type":"text"}],"kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","title":"HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"abstract":[{"type":"text","text":"All the usage limitations for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"kind":"article","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","role":"article","url":"\/documentation\/metacodable\/limitations","title":"Limitations","type":"topic"},"https://swift.org/package-manager/":{"identifier":"https:\/\/swift.org\/package-manager\/","url":"https:\/\/swift.org\/package-manager\/","titleInlineContent":[{"type":"text","text":"Swift Package Manager"}],"title":"Swift Package Manager","type":"link"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"title":"MetaCodable","kind":"symbol","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value for a property name.","type":"text"}],"title":"CodingKeyNameStrategy","kind":"symbol","url":"\/documentation\/metacodable\/codingkeynamestrategy","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"title":"ContentAt(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","type":"topic","fragments":[{"text":"configuration","kind":"keyword"},{"text":" ","kind":"text"},{"text":"file","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MetaCodableConfig","kind":"identifier"}],"abstract":[{"text":"The configuration file providing additional customization options for ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","title":"MetaCodableConfig","url":"\/documentation\/metacodable\/metacodableconfig"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"required":true,"title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/metacodable\/codedin(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"type":"topic","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" and "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" types"},{"type":"text","text":" "},{"type":"text","text":"by leveraging custom attributes provided on variable declarations."}],"url":"\/documentation\/metacodable\/memberinit()","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}],"title":"MemberInit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"title":"Swift API Design Guidelines","type":"link"}}}