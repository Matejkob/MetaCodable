{"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. The core of the framework is ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" macro which generates the implementation aided by data provided with using other macros.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" aims to supercharge your "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Allows custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value declaration per variable, instead of requiring you to write all the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" passing single argument.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create flattened model for nested ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Allows to create composition of multiple ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" passing no arguments.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to read data from additional fallback "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s provided with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to provide default value in case of decoding failures with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create custom decoding\/encoding strategies with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" and using them with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"type":"text","text":". i.e. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true},{"type":"text","text":" etc."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows specifying different case values with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" and case value\/protocol type identifier type different from "},{"type":"codeVoice","code":"String"},{"type":"text","text":" with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows specifying enum-case\/protocol type identifier path with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" and case content path with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to ignore specific properties\/cases from decoding\/encoding with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"type":"reference","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true},{"type":"text","text":", while enabling a type\/case to work with different case style keys with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to ignore all initialized properties of a type\/case from decoding\/encoding with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" etc."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to generate protocol decoding\/encoding ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":"s with ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin from ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference"},{"text":" types.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"overridingTitleInlineContent":[{"inlineContent":[{"text":"See the limitations for this macro","type":"text"}],"type":"strong"}],"overridingTitle":"See the limitations for this macro","type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Installation","text":"Installation"},{"tabs":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"type":"codeVoice","code":"swift"},{"type":"text","text":" compiler."}],"type":"paragraph"},{"inlineContent":[{"text":"Once you have your Swift package set up, adding ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" as a dependency is as easy as adding it to the ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"text":" value of your ","type":"text"},{"type":"codeVoice","code":"Package.swift"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you can add the "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" module product as dependency to the "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s of your choosing, by adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"target"},{"type":"text","text":"s."}],"type":"paragraph"},{"syntax":"swift","code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"type":"codeListing"}],"title":"Swift Package Manager"},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/cocoapods.org","isActive":true,"type":"reference"},{"text":" is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" into your Xcode project using CocoaPods, specify it in your ","type":"text"},{"code":"Podfile","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"ruby","code":["pod 'MetaCodable'"]}],"title":"CocoaPods"}],"type":"tabNavigator"}]}],"variants":[{"paths":["\/documentation\/metacodable"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"topicSections":[{"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"],"title":"Essentials"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Strategies"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"],"title":"Helpers"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"],"title":"Dynamic Coding"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"],"title":"Enumerations"}],"metadata":{"roleHeading":"Framework","externalID":"MetaCodable","modules":[{"name":"MetaCodable"}],"role":"collection","title":"MetaCodable","platforms":[{"introducedAt":"5.9","name":"Swift"}],"symbolKind":"module"},"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros."}],"sections":[],"kind":"symbol","hierarchy":{"paths":[[]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable","interfaceLanguage":"swift"},"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"type":"topic","title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"text":"and protocols.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"kind":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"type":"topic","title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"title":"DynamicCodable","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"url":"\/documentation\/metacodable\/dynamiccodable"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"role":"symbol","type":"topic","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","title":"MetaCodable","type":"topic","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"title":"IgnoreCodingInitialized()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","title":"ContentAt(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"url":"\/documentation\/metacodable\/contentat(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","title":"Coded","type":"topic","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","kind":"symbol","title":"DynamicCodableIdentifier","navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodableIdentifier"}],"abstract":[{"type":"text","text":"The identifier option for "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true},{"type":"text","text":" types."}],"url":"\/documentation\/metacodable\/dynamiccodableidentifier"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","kind":"symbol","title":"MetaCodableConfig","type":"topic","fragments":[{"kind":"keyword","text":"configuration"},{"kind":"text","text":" "},{"kind":"keyword","text":"file"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaCodableConfig"}],"abstract":[{"text":"The configuration file providing additional customization options for ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" build tool plugin."}],"url":"\/documentation\/metacodable\/metacodableconfig"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"role":"symbol","type":"topic","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" types","type":"text"},{"text":" ","type":"text"},{"text":"by leveraging custom attributes provided on variable declarations.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","url":"\/documentation\/metacodable\/memberinit()","title":"MemberInit()"},"https://swift.org/package-manager/":{"titleInlineContent":[{"type":"text","text":"Swift Package Manager"}],"url":"https:\/\/swift.org\/package-manager\/","type":"link","title":"Swift Package Manager","identifier":"https:\/\/swift.org\/package-manager\/"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"...)","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"role":"article","type":"topic","abstract":[{"text":"All the usage limitations for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","type":"reference"},{"text":".","type":"text"}],"kind":"article","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","url":"\/documentation\/metacodable\/limitations","title":"Limitations"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"link","title":"Swift API Design Guidelines","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"title":"CodingKeyNameStrategy","navigatorTitle":[{"kind":"identifier","text":"CodingKeyNameStrategy"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" value for a property name.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeyNameStrategy"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codingkeynamestrategy"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"url":"\/documentation\/metacodable\/codable()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","kind":"overview","title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","url":"\/tutorials\/usage"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"url":"\/documentation\/metacodable\/codingkeys(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"title":"CodingKeys(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}]},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"title":"LossySequenceCoder","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","abstract":[{"text":"An ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":" that helps decoding\/encoding lossy sequence.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LossySequenceCoder"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"LossySequenceCoder"}],"deprecated":true,"url":"\/documentation\/metacodable\/lossysequencecoder"},"https://cocoapods.org":{"titleInlineContent":[{"type":"text","text":"CocoaPods"}],"url":"https:\/\/cocoapods.org","type":"link","title":"CocoaPods","identifier":"https:\/\/cocoapods.org"}}}