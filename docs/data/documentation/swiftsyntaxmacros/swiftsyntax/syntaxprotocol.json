{"topicSections":[{"generated":true,"identifiers":["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol\/allMacroLexicalContexts(enclosingSyntax:)","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol\/asMacroLexicalContext()"],"title":"Instance Methods","anchor":"Instance-Methods"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntaxmacros\/swiftsyntax\/syntaxprotocol"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol"},"metadata":{"extendedModule":"SwiftSyntax","roleHeading":"Extended Protocol","externalID":"s:e:s:11SwiftSyntax0B8ProtocolP0aB6MacrosE21asMacroLexicalContextAA0B0VSgyF","modules":[{"name":"SwiftSyntaxMacros","relatedModules":["SwiftSyntax"]}],"navigatorTitle":[{"text":"SyntaxProtocol","kind":"identifier"}],"symbolKind":"extension","role":"symbol","fragments":[{"text":"extension","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","text":"SyntaxProtocol","kind":"identifier"}],"title":"SyntaxProtocol"},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxMacros":{"role":"collection","title":"SwiftSyntaxMacros","kind":"symbol","abstract":[],"type":"topic","url":"\/documentation\/swiftsyntaxmacros","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxMacros/SwiftSyntax/SyntaxProtocol":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol","url":"\/documentation\/swiftsyntaxmacros\/swiftsyntax\/syntaxprotocol","title":"SyntaxProtocol","fragments":[{"kind":"keyword","text":"extension"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"}],"kind":"symbol","abstract":[],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}],"role":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","abstract":[{"type":"text","text":"Provide common functionality for specialized syntax nodes. Extend this"},{"type":"text","text":" "},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SyntaxProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxMacros/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax","type":"topic","title":"SwiftSyntax","kind":"symbol","role":"collection","abstract":[],"url":"\/documentation\/swiftsyntaxmacros\/swiftsyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxMacros/SwiftSyntax/SyntaxProtocol/allMacroLexicalContexts(enclosingSyntax:)":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol\/allMacroLexicalContexts(enclosingSyntax:)","type":"topic","kind":"symbol","url":"\/documentation\/swiftsyntaxmacros\/swiftsyntax\/syntaxprotocol\/allmacrolexicalcontexts(enclosingsyntax:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"allMacroLexicalContexts","kind":"identifier"},{"text":"(","kind":"text"},{"text":"enclosingSyntax","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Syntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B0V","text":"Syntax"},{"text":"?) -> [","kind":"text"},{"kind":"typeIdentifier","text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":"]","kind":"text"}],"abstract":[{"text":"Return an array of enclosing lexical contexts for the purpose of macros,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"from the innermost enclosing lexical context (first in the array) to the"},{"type":"text","text":" "},{"text":"outermost. If this syntax node itself is a lexical context, it will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the innermost lexical context."}],"role":"symbol","title":"allMacroLexicalContexts(enclosingSyntax:)"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxMacros/SwiftSyntax/SyntaxProtocol/asMacroLexicalContext()":{"type":"topic","title":"asMacroLexicalContext()","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxMacros\/SwiftSyntax\/SyntaxProtocol\/asMacroLexicalContext()","kind":"symbol","url":"\/documentation\/swiftsyntaxmacros\/swiftsyntax\/syntaxprotocol\/asmacrolexicalcontext()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"asMacroLexicalContext","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"Syntax","preciseIdentifier":"s:11SwiftSyntax0B0V"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"If this syntax node acts as a lexical context from the perspective"},{"text":" ","type":"text"},{"type":"text","text":"of a macro, return a new syntax node based on this node that strips all"},{"type":"text","text":" "},{"text":"information that isnâ€™t supposed to be exposed as a lexical context, such","type":"text"},{"text":" ","type":"text"},{"text":"as function bodies or the members of types\/extensions.","type":"text"}]}}}