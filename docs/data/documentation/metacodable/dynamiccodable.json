{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/dynamiccodable"]}],"topicSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/IdentifierValue"],"title":"Associated Types"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"],"title":"Type Properties"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"IdentifierValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The type declared ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"},{"text":" is used to decode conformed type","type":"text"},{"text":" ","type":"text"},{"text":"if matches, and encode to represent data for the conformed type.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conforming to this "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" allows type to be decoded\/encoded dynamically"},{"type":"text","text":" "},{"type":"text","text":"if it conforms to any additional "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":"(s) that declare dynamic"},{"type":"text","text":" "},{"type":"text","text":"decoding\/encoding with attached "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro, while the conformed"},{"type":"text","text":" "},{"type":"text","text":"types can be declared in several different targets."}]},{"type":"paragraph","inlineContent":[{"text":"To use dynamic decoding, first declare a protocol with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"attached that represents common data. i.e. for dynamic ","type":"text"},{"type":"codeVoice","code":"Post"},{"text":" data:","type":"text"}]},{"type":"codeListing","syntax":"json","code":["[","  {","    \"id\": \"00005678-abcd-efab-0123-456789abcdef\",","    \"type\": \"text\",","    \"author\": \"12345678-abcd-efab-0123-456789abcdef\",","    \"likes\": 145,","    \"createdAt\": \"2021-07-23T07:36:43Z\",","    \"text\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"43215678-abcd-efab-0123-456789abcdef\",","    \"type\": \"picture\",","    \"author\": \"abcd5678-abcd-efab-0123-456789abcdef\",","    \"likes\": 370,","    \"createdAt\": \"2021-07-23T09:32:13Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/picture.png\",","    \"caption\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"43215678-abcd-efab-0123-456789abcdef\",","    \"type\": \"photo\",","    \"author\": \"abcd5678-abcd-efab-0123-456789abcdef\",","    \"likes\": 370,","    \"createdAt\": \"2021-07-23T09:32:13Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/picture.png\",","    \"caption\": \"Lorem Ipsium\"","  },","  {","    \"id\": \"64475bcb-caff-48c1-bb53-8376628b350b\",","    \"type\": \"audio\",","    \"author\": \"4c17c269-1c56-45ab-8863-d8924ece1d0b\",","    \"likes\": 25,","    \"createdAt\": \"2021-07-23T09:33:48Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/audio.aac\",","    \"duration\": 60","  },","  {","    \"id\": \"98765432-abcd-efab-0123-456789abcdef\",","    \"type\": \"video\",","    \"author\": \"04355678-abcd-efab-0123-456789abcdef\",","    \"likes\": 2345,","    \"createdAt\": \"2021-07-23T09:36:38Z\",","    \"url\": \"https:\/\/a.url.com\/to\/a\/video.mp4\",","    \"duration\": 460,","    \"thumbnail\": \"https:\/\/a.url.com\/to\/a\/thumbnail.png\"","  }","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"new protocol "},{"type":"codeVoice","code":"Post"},{"type":"text","text":" can be created, with the type of identifier tagging"},{"type":"text","text":" "},{"type":"text","text":"(external, internal or adjacent) indicated, here tagging is "},{"type":"codeVoice","code":"internal"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Data type of identifier can also be specified with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true},{"type":"text","text":" if"},{"type":"text","text":" "},{"type":"text","text":"varies from "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["@Codable","@CodedAt(\"type\")","protocol Post {","    var id: UUID { get }","    var author: UUID { get }","    var likes: Int { get }","    var createdAt: String { get }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Individual "},{"type":"codeVoice","code":"Post"},{"type":"text","text":" data type can be created conforming to "},{"type":"codeVoice","code":"Post"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"DynamicCodable"},{"type":"text","text":", specifying one or multiple identifier:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"text\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"audio\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"video\" }","","    let id: UUID","    let author: UUID","    let likes: Int","    let createdAt: String","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},{"type":"paragraph","inlineContent":[{"text":"Include ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin to generate protocol","type":"text"},{"text":" ","type":"text"},{"text":"decoding\/encoding ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" named ","type":"text"},{"type":"codeVoice","code":"\\(protocolName)Coder"},{"text":" ","type":"text"},{"text":"where ","type":"text"},{"type":"codeVoice","code":"\\(protocolName)"},{"text":" is replaced with the protocol name.","type":"text"}]}],"kind":"content"}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"],"title":"Dynamic Coding","generated":true}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"name":"MetaCodable"}],"roleHeading":"Protocol","role":"symbol","navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"symbolKind":"protocol","title":"DynamicCodable","externalID":"s:11MetaCodable07DynamicB0P","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","interfaceLanguage":"swift"},"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"type":"text","text":" "},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/IdentifierValue":{"abstract":[{"type":"text","text":"The type of identifier value."}],"role":"symbol","title":"IdentifierValue","url":"\/documentation\/metacodable\/dynamiccodable\/identifiervalue","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/IdentifierValue","type":"topic","required":true,"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifierValue","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"Equatable","kind":"typeIdentifier","preciseIdentifier":"s:SQ"}]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"role":"symbol","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"identifier","kind":"identifier"},{"text":": ","kind":"text"},{"text":"DynamicCodableIdentifier","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"IdentifierValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"The identifier value(s) for this type.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","title":"identifier","url":"\/documentation\/metacodable\/dynamiccodable\/identifier","required":true},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","title":"HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"required":true,"title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"title":"MetaCodable","kind":"symbol","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodableIdentifier"}],"title":"DynamicCodableIdentifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","url":"\/documentation\/metacodable\/dynamiccodableidentifier","abstract":[{"text":"The identifier option for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"text":" types.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"url":"\/documentation\/metacodable\/dynamiccodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"title":"DynamicCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","type":"topic","fragments":[{"text":"configuration","kind":"keyword"},{"text":" ","kind":"text"},{"text":"file","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MetaCodableConfig","kind":"identifier"}],"abstract":[{"text":"The configuration file providing additional customization options for ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","title":"MetaCodableConfig","url":"\/documentation\/metacodable\/metacodableconfig"}}}