{"sections":[],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/limitations"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","anchor":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Currently all the limitations of this library and possible workarounds and future plans are listed below. Most of these limitations depend on the data ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" provides to ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"text":" to perform macro expansion.","type":"text"}]},{"text":"Why strict typing is necessary?","anchor":"Why-strict-typing-is-necessary","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"code":"Swift","type":"codeVoice"},{"type":"text","text":" compiler doesn’t provide any type inference data to macros, so to know type of variables "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"type":"text","text":" needs types to be explicitly specified in the code. i.e. following code will not work and will cause error while macro expansion:"}]},{"code":["@Codable","struct Model {","    let value = 1","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is due to "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" unable to determine the type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":", by specifying the type explicitly expansion is performed successfully:"}]},{"code":["@Codable","struct Model {","    let value: Int = 1","}"],"type":"codeListing","syntax":"swift"},{"text":"Why super class Codable conformance not detected?","anchor":"Why-super-class-Codable-conformance-not-detected","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The ability to pass conformance data to macro for classes when performing member attribute expansion was introduced in "},{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","isActive":true,"type":"reference"},{"type":"text","text":". Please make sure to upgrade to this version to have this working."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even with this it is unable for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" to get clear indication where conformance to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" is implemented by current class or the super class. "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" checks current class for the conformance implementation by checking implementation functions and the check will not work if some "},{"type":"codeVoice","code":"typealias"},{"type":"text","text":" used for "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":" in implementation function definition."}]},{"text":"Why enum-case associated values decoding\/encoding are not customizable?","anchor":"Why-enum-case-associated-values-decodingencoding-are-not-customizable","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"The goal of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":" is to allow same level of customization for enum-case associated values as it is allowed for "},{"code":"struct","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"class","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" member properties. Unfortunately, as of now, "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" doesn’t allow macro attributes (or any attributes) to be attached per enum-case arguments."}]},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","isActive":true,"type":"reference"},{"type":"text","text":", you can support this pitch on "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" forum if this feature will benefit you."}]},{"type":"paragraph","inlineContent":[{"text":"The current workaround is to extract enum-case arguments to separate ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" and have the customization options in the ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" itself. i.e. since following isn’t possible:","type":"text"}]},{"code":["@Codable","enum SomeEnum {","    case string(@CodedAt(\"data\") String)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"you can convert it to:","type":"text"}]},{"code":["@Codable","enum SomeEnum {","    case string(StringData)","","    @Codable","    struct StringData {","        let data: String","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Why enums with raw value aren’t supported?","anchor":"Why-enums-with-raw-value-arent-supported","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Swift"},{"type":"text","text":" compiler by default generates "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformance for "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s with raw value and "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" has nothing extra to add for these type of "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s. Hence, in this case the default compiler generated implementation can be used."}]},{"text":"Why actor conformance to Encodable not generated?","anchor":"Why-actor-conformance-to-Encodable-not-generated","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"For ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":"s ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" generates ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" conformance, while ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" conformance isn’t generated, only ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method implementation is generated which is isolated to ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To generate "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance, the "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method must be "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" to "},{"type":"codeVoice","code":"actor"},{"type":"text","text":", and since "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method must be synchronous making it "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" will prevent accessing mutable properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to these limitations, "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance isn’t generated, users has to implement the conformance manually."}]},{"text":"Why MetaProtocolCodable plugin can’t scan Xcode target dependencies?","anchor":"Why-MetaProtocolCodable-plugin-cant-scan-Xcode-target-dependencies","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently Swift Package Manager always returns empty list for Xcode target dependencies as noted in "},{"identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","type":"reference","isActive":true},{"type":"text","text":". Hence "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" can currently only scan the files from the target or from the project including the target."}]}]}],"seeAlsoSections":[{"title":"Essentials","generated":true,"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage"]}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"MetaCodable"}],"title":"Limitations","roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"abstract":[{"text":"All the usage limitations for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","type":"reference"},{"text":".","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://MetaCodable/documentation/MetaCodable":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","url":"\/documentation\/metacodable","title":"MetaCodable","role":"collection","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/Usage":{"url":"\/tutorials\/usage","kind":"overview","role":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","title":"Discover MetaCodable"},"https://forums.swift.org/t/attached-macro-support-for-enum-case-arguments/67952":{"titleInlineContent":[{"text":"A pitch has been created to allow this support in ","type":"text"},{"type":"codeVoice","code":"Swift"}],"title":"A pitch has been created to allow this support in Swift","url":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"link"},"https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md":{"titleInlineContent":[{"type":"codeVoice","code":"Swift 5.9.2"}],"title":"Swift 5.9.2","url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"link"},"https://github.com/apple/swift-package-manager/issues/6003":{"titleInlineContent":[{"text":"this bug","type":"text"}],"title":"this bug","url":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","type":"link"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","kind":"symbol","url":"\/documentation\/metacodable\/codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"title":"Codable()","role":"symbol","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"type":"topic"}}}