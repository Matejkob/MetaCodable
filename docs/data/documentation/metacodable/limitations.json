{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"},"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage"],"title":"Essentials","generated":true}],"variants":[{"paths":["\/documentation\/metacodable\/limitations"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"All the usage limitations for "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true},{"type":"text","text":"."}],"metadata":{"roleHeading":"Article","modules":[{"name":"MetaCodable"}],"role":"article","title":"Limitations"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Currently all the limitations of this library and possible workarounds and future plans are listed below. Most of these limitations depend on the data "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" provides to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":" to perform macro expansion."}],"type":"paragraph"},{"level":3,"anchor":"Why-strict-typing-is-necessary","text":"Why strict typing is necessary?","type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"Swift"},{"type":"text","text":" compiler doesn’t provide any type inference data to macros, so to know type of variables "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" needs types to be explicitly specified in the code. i.e. following code will not work and will cause error while macro expansion:"}],"type":"paragraph"},{"code":["@Codable","struct Model {","    let value = 1","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This is due to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" unable to determine the type of ","type":"text"},{"type":"codeVoice","code":"value"},{"text":", by specifying the type explicitly expansion is performed successfully:","type":"text"}],"type":"paragraph"},{"code":["@Codable","struct Model {","    let value: Int = 1","}"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"Why-super-class-Codable-conformance-not-detected","text":"Why super class Codable conformance not detected?","type":"heading"},{"inlineContent":[{"type":"text","text":"The ability to pass conformance data to macro for classes when performing member attribute expansion was introduced in "},{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"reference","isActive":true},{"type":"text","text":". Please make sure to upgrade to this version to have this working."}],"type":"paragraph"},{"inlineContent":[{"text":"Even with this it is unable for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" to get clear indication where conformance to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" is implemented by current class or the super class. ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" checks current class for the conformance implementation by checking implementation functions and the check will not work if some ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" used for ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":" in implementation function definition.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Why-enum-case-associated-values-decodingencoding-are-not-customizable","text":"Why enum-case associated values decoding\/encoding are not customizable?","type":"heading"},{"inlineContent":[{"type":"text","text":"The goal of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":" is to allow same level of customization for enum-case associated values as it is allowed for "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"class"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" member properties. Unfortunately, as of now, "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" doesn’t allow macro attributes (or any attributes) to be attached per enum-case arguments."}],"type":"paragraph"},{"inlineContent":[{"type":"reference","isActive":true,"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952"},{"type":"text","text":", you can support this pitch on "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" forum if this feature will benefit you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The current workaround is to extract enum-case arguments to separate "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" and have the customization options in the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" itself. i.e. since following isn’t possible:"}],"type":"paragraph"},{"code":["@Codable","enum SomeEnum {","    case string(@CodedAt(\"data\") String)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"you can convert it to:"}],"type":"paragraph"},{"code":["@Codable","enum SomeEnum {","    case string(StringData)","","    @Codable","    struct StringData {","        let data: String","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"anchor":"Why-enums-with-raw-value-arent-supported","text":"Why enums with raw value aren’t supported?","type":"heading"},{"inlineContent":[{"code":"Swift","type":"codeVoice"},{"text":" compiler by default generates ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformance for ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s with raw value and ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" has nothing extra to add for these type of ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s. Hence, in this case the default compiler generated implementation can be used.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Why-actor-conformance-to-Encodable-not-generated","text":"Why actor conformance to Encodable not generated?","type":"heading"},{"inlineContent":[{"text":"For ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":"s ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" generates ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" conformance, while ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" conformance isn’t generated, only ","type":"text"},{"type":"codeVoice","code":"encode(to:)"},{"text":" method implementation is generated which is isolated to ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To generate ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" conformance, the ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method must be ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":", and since ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method must be synchronous making it ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":" will prevent accessing mutable properties.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Due to these limitations, ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"text":" conformance isn’t generated, users has to implement the conformance manually.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Why-MetaProtocolCodable-plugin-cant-scan-Xcode-target-dependencies","text":"Why MetaProtocolCodable plugin can’t scan Xcode target dependencies?","type":"heading"},{"inlineContent":[{"type":"text","text":"Currently Swift Package Manager always returns empty list for Xcode target dependencies as noted in "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003"},{"type":"text","text":". Hence "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" can currently only scan the files from the target or from the project including the target."}],"type":"paragraph"}],"kind":"content"}],"references":{"https://github.com/apple/swift-package-manager/issues/6003":{"identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","url":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","titleInlineContent":[{"type":"text","text":"this bug"}],"title":"this bug","type":"link"},"https://forums.swift.org/t/attached-macro-support-for-enum-case-arguments/67952":{"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","url":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","titleInlineContent":[{"type":"text","text":"A pitch has been created to allow this support in "},{"type":"codeVoice","code":"Swift"}],"title":"A pitch has been created to allow this support in Swift","type":"link"},"https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md":{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","titleInlineContent":[{"type":"codeVoice","code":"Swift 5.9.2"}],"title":"Swift 5.9.2","type":"link"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"title":"MetaCodable","kind":"symbol","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformances faster than ever before.","type":"text"}],"kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage"}}}