{"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","generated":true,"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"title":"Limitations","role":"article","modules":[{"name":"MetaCodable"}],"roleHeading":"Article"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","interfaceLanguage":"swift"},"primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Currently all the limitations of this library and possible workarounds and future plans are listed below. Most of these limitations depend on the data "},{"type":"codeVoice","code":"Swift"},{"text":" provides to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","type":"reference"},{"text":" to perform macro expansion.","type":"text"}]},{"type":"heading","text":"Why strict typing is necessary?","anchor":"Why-strict-typing-is-necessary","level":3},{"inlineContent":[{"type":"codeVoice","code":"Swift"},{"text":" compiler doesn’t provide any type inference data to macros, so to know type of variables ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" needs types to be explicitly specified in the code. i.e. following code will not work and will cause error while macro expansion:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","struct Model {","    let value = 1","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This is due to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"type":"text","text":" unable to determine the type of "},{"code":"value","type":"codeVoice"},{"type":"text","text":", by specifying the type explicitly expansion is performed successfully:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","struct Model {","    let value: Int = 1","}"]},{"level":3,"text":"Why super class Codable conformance not detected?","type":"heading","anchor":"Why-super-class-Codable-conformance-not-detected"},{"inlineContent":[{"type":"text","text":"The ability to pass conformance data to macro for classes when performing member attribute expansion was introduced in "},{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"reference","isActive":true},{"text":". Please make sure to upgrade to this version to have this working.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Even with this it is unable for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" to get clear indication where conformance to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" is implemented by current class or the super class. "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" checks current class for the conformance implementation by checking implementation functions and the check will not work if some "},{"type":"codeVoice","code":"typealias"},{"text":" used for ","type":"text"},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":"\/"},{"code":"Encoder","type":"codeVoice"},{"text":" in implementation function definition.","type":"text"}],"type":"paragraph"},{"anchor":"Why-enum-case-associated-values-decodingencoding-are-not-customizable","type":"heading","text":"Why enum-case associated values decoding\/encoding are not customizable?","level":3},{"inlineContent":[{"text":"The goal of ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true},{"text":" is to allow same level of customization for enum-case associated values as it is allowed for ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" member properties. Unfortunately, as of now, "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" doesn’t allow macro attributes (or any attributes) to be attached per enum-case arguments."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"reference","isActive":true},{"text":", you can support this pitch on ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" forum if this feature will benefit you."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The current workaround is to extract enum-case arguments to separate "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" and have the customization options in the "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" itself. i.e. since following isn’t possible:"}]},{"syntax":"swift","code":["@Codable","enum SomeEnum {","    case string(@CodedAt(\"data\") String)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"you can convert it to:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","enum SomeEnum {","    case string(StringData)","","    @Codable","    struct StringData {","        let data: String","    }","}"],"type":"codeListing"},{"anchor":"Why-enums-with-raw-value-arent-supported","level":3,"type":"heading","text":"Why enums with raw value aren’t supported?"},{"inlineContent":[{"type":"codeVoice","code":"Swift"},{"type":"text","text":" compiler by default generates "},{"code":"Codable","type":"codeVoice"},{"text":" conformance for ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s with raw value and ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" has nothing extra to add for these type of "},{"code":"enum","type":"codeVoice"},{"text":"s. Hence, in this case the default compiler generated implementation can be used.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"text":"Why actor conformance to Encodable not generated?","anchor":"Why-actor-conformance-to-Encodable-not-generated"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For "},{"code":"actor","type":"codeVoice"},{"type":"text","text":"s "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"text":" generates ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"text":" conformance, while ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" conformance isn’t generated, only "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method implementation is generated which is isolated to "},{"type":"codeVoice","code":"actor"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"To generate ","type":"text"},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance, the "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method must be "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" to "},{"code":"actor","type":"codeVoice"},{"type":"text","text":", and since "},{"type":"codeVoice","code":"encode(to:)"},{"text":" method must be synchronous making it ","type":"text"},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" will prevent accessing mutable properties."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Due to these limitations, "},{"code":"Encodable","type":"codeVoice"},{"text":" conformance isn’t generated, users has to implement the conformance manually.","type":"text"}]},{"type":"heading","text":"Why MetaProtocolCodable plugin can’t scan Xcode target dependencies?","level":3,"anchor":"Why-MetaProtocolCodable-plugin-cant-scan-Xcode-target-dependencies"},{"inlineContent":[{"type":"text","text":"Currently Swift Package Manager always returns empty list for Xcode target dependencies as noted in "},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003"},{"text":". Hence ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" can currently only scan the files from the target or from the project including the target.","type":"text"}],"type":"paragraph"},{"text":"Why macro is breaking with SwiftData class?","anchor":"Why-macro-is-breaking-with-SwiftData-class","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Currently during certain customization in SwiftUI, compiler is sending no protocol data to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":". Due to this, ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" tries to find ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" protocol implementation for the class. If no implementation found, ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" assumes class inherits conformance from super class, and generates implementation accordingly causing issues like ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/SwiftyLab\/MetaCodable\/issues\/56"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Until this is fixes from Swift compiler, "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)","isActive":true,"type":"reference"},{"text":" macro can be used to indicate explicitly that class doesn’t inherit ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformance.","type":"text"}]},{"text":"Why IgnoreEncoding(if:) not supported for types and MetaProtocolCodable plugin?","level":3,"type":"heading","anchor":"Why-IgnoreEncodingif-not-supported-for-types-and-MetaProtocolCodable-plugin"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of writing, Swift has an "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift\/issues\/68158","isActive":true},{"text":" which causes error when ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","isActive":true},{"text":" is attached to a type declaration. ","type":"text"},{"identifier":"https:\/\/forums.swift.org\/t\/circular-reference-error-when-using-keypaths-to-properties-with-macros-bug-or-expected-behaviour\/69162","type":"reference","isActive":true},{"type":"text","text":", and once fixed this feature will be supported by "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" plugin as well.","type":"text"}]}],"kind":"content"}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/limitations"]}],"sections":[],"abstract":[{"text":"All the usage limitations for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"references":{"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","kind":"symbol","role":"symbol"},"https://github.com/apple/swift-package-manager/issues/6003":{"title":"this bug","url":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","type":"link","identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","titleInlineContent":[{"type":"text","text":"this bug"}]},"https://github.com/apple/swift/issues/68158":{"title":"existing bug","url":"https:\/\/github.com\/apple\/swift\/issues\/68158","type":"link","identifier":"https:\/\/github.com\/apple\/swift\/issues\/68158","titleInlineContent":[{"type":"text","text":"existing bug"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"text":" ","type":"text"},{"text":"is not satisfied.","type":"text"}],"title":"IgnoreEncoding(if:)","role":"symbol","kind":"symbol"},"https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md":{"title":"Swift 5.9.2","url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"link","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","titleInlineContent":[{"type":"codeVoice","code":"Swift 5.9.2"}]},"https://forums.swift.org/t/attached-macro-support-for-enum-case-arguments/67952":{"title":"A pitch has been created to allow this support in Swift","url":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"link","identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","titleInlineContent":[{"type":"text","text":"A pitch has been created to allow this support in "},{"code":"Swift","type":"codeVoice"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<each ","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"if"},{"kind":"text","text":": (repeat each "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","abstract":[{"type":"text","text":"Indicates the field\/case needs to be encoded only if provided condition"},{"text":" ","type":"text"},{"type":"text","text":"is not satisfied."}],"title":"IgnoreEncoding(if:)","role":"symbol","kind":"symbol"},"https://forums.swift.org/t/circular-reference-error-when-using-keypaths-to-properties-with-macros-bug-or-expected-behaviour/69162":{"title":"This bug is also being discussed","url":"https:\/\/forums.swift.org\/t\/circular-reference-error-when-using-keypaths-to-properties-with-macros-bug-or-expected-behaviour\/69162","type":"link","identifier":"https:\/\/forums.swift.org\/t\/circular-reference-error-when-using-keypaths-to-properties-with-macros-bug-or-expected-behaviour\/69162","titleInlineContent":[{"type":"text","text":"This bug is also being discussed"}]},"https://github.com/SwiftyLab/MetaCodable/issues/56":{"title":"#56","url":"https:\/\/github.com\/SwiftyLab\/MetaCodable\/issues\/56","type":"link","identifier":"https:\/\/github.com\/SwiftyLab\/MetaCodable\/issues\/56","titleInlineContent":[{"text":"#56","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","url":"\/documentation\/metacodable","abstract":[{"type":"text","text":"Supercharge "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","type":"topic","kind":"symbol","title":"MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/Inherits(decodable:encodable:)":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Inherits"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"decodable"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":", ","kind":"text"},{"text":"encodable","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)","url":"\/documentation\/metacodable\/inherits(decodable:encodable:)","abstract":[{"type":"text","text":"Indicates whether super class conforms to "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" or not."}],"title":"Inherits(decodable:encodable:)","kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]}}}