{"sections":[],"seeAlsoSections":[{"generated":true,"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"kind":"text","text":", names: named(CodingKeys), named(DecodingKeys), named(init(from:)), named(encode(to:))) "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, conformances: "},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"kind":"text","text":", names: named(CodingKeys), named(init(from:)), named(encode(to:))) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"Usage","level":1,"text":"Usage","type":"heading"},{"inlineContent":[{"type":"text","text":"By default the field name is used as "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field value during"},{"type":"text","text":" "},{"type":"text","text":"encoding and decoding. Following customization can be done on fields to"},{"type":"text","text":" "},{"type":"text","text":"provide custom decode and encode behavior:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" providing single string value as custom coding key."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" providing multiple string value as nested coding","type":"text"},{"text":" ","type":"text"},{"text":"key path.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":" with one or more string value as nested container"},{"type":"text","text":" "},{"type":"text","text":"coding key path, with variable name as coding key."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" with no path arguments, when type is composition"},{"type":"text","text":" "},{"type":"text","text":"of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" to provide additional coding key values where","type":"text"},{"text":" ","type":"text"},{"text":"field value can appear.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":" to provide custom decoding\/encoding behavior for","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types or implement decoding\/encoding for non-","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"text":" to provide default value when decoding fails.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" to provide custom values for enum cases.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" to provide enum-case\/protocol identifier tag path."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()"},{"type":"text","text":" to provide enum-case\/protocol identifier tag type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true},{"type":"text","text":" to provided enum-case\/protocol content path."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" to ignore specific properties\/cases\/types from","type":"text"},{"text":" ","type":"text"},{"text":"decoding\/encoding or both.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference"},{"text":" to work with different case style ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference","isActive":true},{"text":" to ignore decoding and encoding","type":"text"},{"text":" ","type":"text"},{"text":"all initialized properties\/case associated variables.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Generate protocol decoding\/encoding "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":"s with build tool"},{"type":"text","text":" "},{"type":"text","text":"plugin "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" from "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true},{"type":"text","text":" types."}]}]}],"type":"unorderedList"},{"anchor":"Effect","level":1,"text":"Effect","type":"heading"},{"inlineContent":[{"type":"text","text":"This macro composes extension macro expansion depending on "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"text","text":"conformance of type:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Extension macro expansion, to confirm to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocols depending on whether type doesnâ€™t already conform to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extension macro expansion, to generate custom "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" type for"},{"type":"text","text":" "},{"type":"text","text":"the attached declaration named "},{"code":"CodingKeys","type":"codeVoice"},{"type":"text","text":" and use this type for"},{"type":"text","text":" "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of both "},{"code":"init(from:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encode(to:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If attached declaration already conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" this macro expansion"},{"type":"text","text":" "},{"type":"text","text":"is skipped."}]}]}],"type":"unorderedList"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The attached declaration must be of a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" type. "},{"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"See the limitations for this macro"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","isActive":true,"overridingTitle":"See the limitations for this macro"},{"type":"text","text":"."}]}],"name":"Important","style":"important","type":"aside"}]}],"abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"metadata":{"title":"Codable()","platforms":[{"deprecated":false,"introducedAt":"5.9","name":"Swift","beta":false,"unavailable":false}],"externalID":"s:11MetaCodable0B0yycfm","symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"modules":[{"name":"MetaCodable"}],"role":"symbol","roleHeading":"Macro"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"variants":[{"paths":["\/documentation\/metacodable\/codable()"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"url":"\/documentation\/metacodable\/codedas(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","kind":"symbol","title":"CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"title":"IgnoreEncoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"title":"DynamicCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","role":"symbol","url":"\/documentation\/metacodable\/dynamiccodable","navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodable"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"title":"CodingKeys(_:)","role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"url":"\/documentation\/metacodable\/helpercoder","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"topic","title":"HelperCoder"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"title":"IgnoreCodingInitialized()","role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","kind":"symbol","url":"\/documentation\/metacodable\/codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"title":"Codable()","role":"symbol","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","url":"\/documentation\/metacodable\/codedas()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"title":"CodedAs()","role":"symbol","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"text":"and protocols.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"title":"IgnoreCoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"ContentAt(_:_:)","role":"symbol","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"type":"topic","title":"Coded","role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","required":true,"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","role":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"CodedIn(_:)","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" and "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" types"},{"type":"text","text":" "},{"type":"text","text":"by leveraging custom attributes provided on variable declarations."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"title":"MemberInit()","role":"symbol","url":"\/documentation\/metacodable\/memberinit()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","type":"topic"},"doc://MetaCodable/documentation/MetaCodable":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","url":"\/documentation\/metacodable","title":"MetaCodable","role":"collection","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"Default(_:)","role":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"title":"IgnoreDecoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"title":"Limitations","url":"\/documentation\/metacodable\/limitations","kind":"article","role":"article","abstract":[{"type":"text","text":"All the usage limitations for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"}}}