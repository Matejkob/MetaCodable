{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"seeAlsoSections":[{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/ignorecoding()"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}]}]},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"inlineContent":[{"type":"text","text":"This macro can be applied to initialized variables to ignore them"},{"type":"text","text":" "},{"type":"text","text":"from both decoding and encoding."}],"type":"paragraph"},{"code":["@IgnoreCoding","var field: String = \"some\""],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The decoding will succeed even if decoding data doesn’t have","type":"text"},{"text":" ","type":"text"},{"text":"any ","type":"text"},{"code":"field","type":"codeVoice"},{"text":" key. Even if ","type":"text"},{"code":"field","type":"codeVoice"},{"text":" key is provided in decoding","type":"text"},{"text":" ","type":"text"},{"text":"data, value of property ","type":"text"},{"code":"field","type":"codeVoice"},{"text":" will not be impacted. The encoded","type":"text"},{"text":" ","type":"text"},{"text":"data will also not have any ","type":"text"},{"code":"field","type":"codeVoice"},{"text":" key.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Similarly, for enums and protocols this macro can be applied to cases"},{"type":"text","text":" "},{"type":"text","text":"or conforming types respectively to ignore them from both decoding and"},{"type":"text","text":" "},{"type":"text","text":"encoding."}],"type":"paragraph"},{"code":["@IgnoreCoding","case field(String)"],"syntax":"swift","type":"codeListing"},{"code":["@IgnoreCoding","struct Load: Command {","    let key: String","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This case\/type will never be decoded or encoded even if decoding data has","type":"text"},{"text":" ","type":"text"},{"text":"the data for ","type":"text"},{"code":"field","type":"codeVoice"},{"text":" case or ","type":"text"},{"code":"Load","type":"codeVoice"},{"text":" type respectively.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"type":"text","text":" "},{"type":"text","text":"is a variable declaration. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro uses this macro"},{"type":"text","text":" "},{"type":"text","text":"when generating final implementations."}]}],"style":"note","type":"aside"}],"kind":"content"}],"metadata":{"symbolKind":"macro","modules":[{"name":"MetaCodable"}],"title":"IgnoreCoding()","platforms":[{"introducedAt":"5.9","deprecated":false,"beta":false,"unavailable":false,"name":"Swift"}],"roleHeading":"Macro","externalID":"s:11MetaCodable12IgnoreCodingyycfm","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}]},"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"title":"IgnoreDecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"title":"CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable":{"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"title":"MetaCodable","kind":"symbol","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"type":"text","text":" "},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"title":"ContentAt(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"title":"Default(_:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"topic","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/metacodable\/codedin(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"kind":"symbol"}}}