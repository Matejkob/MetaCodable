{"identifier":{"url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3a03s","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","modules":[{"name":"SwiftSyntaxBuilder"}],"title":"makeLiteralSyntax()","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"FloatingPoint"},{"type":"text","text":" and "},{"type":"codeVoice","code":"LosslessStringConvertible"},{"text":".","type":"text"}]},"roleHeading":"Instance Method","externalID":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0PAASFRzs25LosslessStringConvertibleRzrlE04makefB00aB004ExprB0VyF","extendedModule":"SwiftSyntaxBuilder","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"makeLiteralSyntax"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V","text":"ExprSyntax"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3qmsa"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeLiteralSyntax"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V","text":"ExprSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExprSyntax"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method is usually not called directly. Instead, conforming types can"},{"text":" ","type":"text"},{"type":"text","text":"be turned into syntax trees using "},{"isActive":true,"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)","type":"reference"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let expr2 = Expr(literal: [0+1, 1+1, 2+1])","\/\/ `expr2` is a syntax tree for `[1, 2, 3]`."]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or interpolated into a Swift source code literal with the syntax"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\\(literal: <value>)"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let greeting = \"Hello, world!\"","let expr1 = ExprSyntax(\"print(\\(literal: greeting))\")","\/\/ `expr1` is a syntax tree for `print(\"Hello, world!\")`"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3a03s"]}],"sections":[],"abstract":[{"type":"text","text":"Returns a syntax tree that represents the value of this instance."}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder":{"title":"SwiftSyntaxBuilder","type":"topic","url":"\/documentation\/swiftsyntaxbuilder","abstract":[],"role":"collection","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/ExprSyntax":{"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExprSyntax","title":"ExprSyntax","url":"\/documentation\/swiftsyntax\/exprsyntax","type":"topic","navigatorTitle":[{"text":"ExprSyntax","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExprSyntax","kind":"identifier"}],"abstract":[],"role":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax/ExprSyntax/init(literal:)":{"url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax\/init(literal:)","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"literal"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","text":"ExpressibleByLiteralSyntax"},{"text":")","kind":"text"}],"type":"topic","abstract":[{"text":"Returns a syntax tree for an expression that represents the value of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"type":"codeVoice","code":"Array<String>"},{"text":" will result in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an array literal containing string literals:"}],"kind":"symbol","role":"symbol","title":"init(literal:)"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/ExpressibleByLiteralSyntax/makeLiteralSyntax()-3a03s":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeLiteralSyntax"},{"text":"() -> ","kind":"text"},{"text":"ExprSyntax","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"FloatingPoint"},{"text":" and ","type":"text"},{"code":"LosslessStringConvertible","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","url":"\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3a03s","title":"makeLiteralSyntax()","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3a03s","abstract":[{"type":"text","text":"Returns a syntax tree that represents the value of this instance."}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/ExpressibleByLiteralSyntax":{"title":"ExpressibleByLiteralSyntax","navigatorTitle":[{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","role":"symbol","abstract":[{"type":"text","text":"A Swift type whose value can be represented directly in source code by a"},{"type":"text","text":" "},{"text":"Swift literal.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"identifier"}],"type":"topic","url":"\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/ExpressibleByLiteralSyntax/makeLiteralSyntax()-3qmsa":{"defaultImplementations":2,"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeLiteralSyntax"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P0F4TypeQa","kind":"typeIdentifier","text":"LiteralType"}],"required":true,"role":"symbol","url":"\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax\/makeliteralsyntax()-3qmsa","title":"makeLiteralSyntax()","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax\/makeLiteralSyntax()-3qmsa","abstract":[{"text":"Returns a syntax tree that represents the value of this instance.","type":"text"}]}}}