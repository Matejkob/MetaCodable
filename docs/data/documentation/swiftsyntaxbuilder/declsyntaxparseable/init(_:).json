{"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol\/init(_:)-6ahx4"]]},"abstract":[{"text":"Create a syntax node from the given string interpolation.","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/swiftsyntaxbuilder\/declsyntaxparseable\/init(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"symbolKind":"init","externalID":"s:18SwiftSyntaxBuilder04DeclB9ParseablePAAEyxAA0B10NodeStringVKcfc","roleHeading":"Initializer","title":"init(_:)","role":"symbol","extendedModule":"SwiftSyntaxBuilder","modules":[{"name":"SwiftSyntaxBuilder"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"SyntaxNodeString","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/DeclSyntaxParseable\/init(_:)"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"stringInterpolation"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"SyntaxNodeString","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SyntaxNodeString"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"platforms":["macOS"],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This initializer throws if the syntax node was not able to be parsed as","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this type, e.g. when calling "},{"type":"codeVoice","code":"ClassDeclSyntax(\"actor Foo {})"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"If there are syntax errors in the string, the initializer will return a"},{"text":" ","type":"text"},{"text":"node that contains errors without throwing.","type":"text"}],"type":"paragraph"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol/init(_:)-6ahx4":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol\/init(_:)-6ahx4","abstract":[{"type":"text","text":"Converts the given specialized node to this type. Returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the"},{"text":" ","type":"text"},{"type":"text","text":"conversion is not possible."}],"kind":"symbol","defaultImplementations":4,"required":true,"url":"\/documentation\/swiftsyntax\/syntaxprotocol\/init(_:)-6ahx4","title":"init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"?(","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SyntaxNodeString":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SyntaxNodeString","kind":"identifier"}],"navigatorTitle":[{"text":"SyntaxNodeString","kind":"identifier"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SyntaxNodeString","type":"topic","kind":"symbol","abstract":[{"text":"A type that is expressible by string interpolation the same way that syntax","type":"text"},{"text":" ","type":"text"},{"text":"nodes are, but instead of producing a node, it stores the string interpolation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"text."}],"role":"symbol","title":"SyntaxNodeString","url":"\/documentation\/swiftsyntaxbuilder\/syntaxnodestring"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/DeclSyntaxParseable/init(_:)":{"title":"init(_:)","url":"\/documentation\/swiftsyntaxbuilder\/declsyntaxparseable\/init(_:)","abstract":[{"type":"text","text":"Create a syntax node from the given string interpolation."}],"kind":"symbol","type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/DeclSyntaxParseable\/init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"SyntaxNodeString","preciseIdentifier":"s:18SwiftSyntaxBuilder0B10NodeStringV"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","abstract":[{"type":"text","text":"Provide common functionality for specialized syntax nodes. Extend this"},{"type":"text","text":" "},{"type":"text","text":"protocol to provide common functionality for all syntax nodes."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SyntaxProtocol","kind":"identifier"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","url":"\/documentation\/swiftsyntax","kind":"symbol","type":"topic","abstract":[],"title":"SwiftSyntax","role":"collection"}}}