{"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","interfaceLanguage":"swift"},"sections":[{"title":"Use with general-purpose Swift types","xcodeRequirement":"Xcode 15 or later","chapter":"MetaCodable essentials","content":[{"inlineContent":[{"text":"This tutorial guides you through","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"creating equivalent types for decoding\/encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"customizing fieldâ€™s ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ignoring fields from decoding\/encoding."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"share common data across ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types.","type":"text"}],"type":"paragraph"}]}]}],"kind":"hero","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"stepsSection":[{"code":null,"caption":[],"media":"Post-01.png","content":[{"inlineContent":[{"type":"text","text":"Analyze fields and their data types from data."}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"code":"Post-01.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"class"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}]}],"runtimePreview":"Post-01.png","type":"step"},{"code":"Post-02.swift","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" macro to type definition."}],"type":"paragraph"}],"runtimePreview":"Post-01.png","type":"step"},{"code":"Post-03.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Provide custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" value to use to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro attached to said field.","type":"text"}]}],"runtimePreview":"Post-01.png","type":"step"},{"code":"Post-04.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Provide each ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path components in order, to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" macro for decoding nested field at path.","type":"text"}]}],"runtimePreview":"Post-04.png","type":"step"},{"code":"Post-05.swift","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Last ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path component can be omitted if it is same as field name by using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-04.png","type":"step"},{"code":"Post-06.swift","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" macro to specify multiple possible ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s for a single field.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-06.png","type":"step"},{"code":"Post-07.swift","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style while using different case style for field name."}],"type":"paragraph"}],"runtimePreview":"Post-07.png","type":"step"}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The simplest way to generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation is to attach ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" macro to type definition, provided all its properties using types that are already ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CodingKey"},{"text":" of each field can be customized individually using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":" macros. Optionally, global field case style can be declared using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"text":" macro.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Create Codable type and customize CodingKey of fields"},{"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}]}],"caption":[],"runtimePreview":"Post-06.png","code":"Post-07.swift","media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Ignore fields from decoding or encoding or both with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" respectively."}],"type":"paragraph"}],"caption":[],"runtimePreview":"Post-06.png","code":"Post-08.swift","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" macro to type definition."}]}],"caption":[],"runtimePreview":"Post-06.png","code":"Post-09.swift","media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow specific initialized field decoding and encoding by attaching any of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" macros."}]}],"caption":[],"runtimePreview":null,"code":"Post-10.swift","media":null},{"type":"step","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" macro to initialized field for only suppressing decoding or encoding respectively.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":"Post-11.png","code":"Post-11.swift","media":null}],"anchor":"Customize-field-decodingencoding","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Following level of customizations are possible:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"type":"text","text":" macro."}]}]},{"content":[{"inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"text":" macro per fields and ignore only decoding or encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" macros per fields respectively.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}]}]}]}],"title":"Customize field decoding\/encoding"},{"stepsSection":[{"content":[{"inlineContent":[{"text":"Identify fields that are common across multiple data.","type":"text"}],"type":"paragraph"}],"caption":[],"media":"Post-12.png","code":null,"runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with fields representing common data.","type":"text"}]}],"caption":[],"media":null,"code":"Post-12.swift","runtimePreview":"Post-12.png","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type for each specific post category only with fields representing category specific data."}],"type":"paragraph"}],"caption":[],"media":null,"code":"Post-13.swift","runtimePreview":"Post-12.png","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}],"type":"paragraph"}],"caption":[],"media":null,"code":"Post-14.swift","runtimePreview":"Post-12.png","type":"step"},{"content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"Post-15.swift","runtimePreview":"Post-12.png","type":"step"}],"anchor":"Share-common-Codable-fields","contentSection":[{"content":[{"inlineContent":[{"text":"Common ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" fields can be extracted to a separate type to be shared across other ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Share common Codable fields"}]},{"abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"title":"Represent variations in data","featuredEyebrow":"Tutorial","action":{"isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","type":"reference"},"kind":"callToAction"}],"metadata":{"role":"project","title":"Use with general-purpose Swift types","categoryPathComponent":"Usage","category":"Discover MetaCodable"},"variants":[{"paths":["\/tutorials\/metacodable\/essential"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"references":{"Post-10.swift":{"highlights":[{"line":5}],"syntax":"swift","identifier":"Post-10.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"],"type":"file","fileType":"swift","fileName":"Post.swift"},"Post-07.swift":{"type":"file","highlights":[],"identifier":"Post-07.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","title":"Create Codable enums with internal tag"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"title":"IgnoreCodingInitialized()","role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","type":"topic","title":"Advanced MetaCodable"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"url":"\/tutorials\/metacodable\/dynamic","kind":"project","role":"project","estimatedTime":"20min","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","type":"topic","title":"Represent dynamic data variations with protocol"},"Post-06.swift":{"identifier":"Post-06.swift","type":"file","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"fileName":"Post.swift","highlights":[{"line":7}]},"Post-09.swift":{"type":"file","identifier":"Post-09.swift","fileName":"Post.swift","fileType":"swift","highlights":[{"line":14},{"line":15}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"]},"Post-08.swift":{"type":"file","identifier":"Post-08.swift","fileName":"Post.swift","fileType":"swift","highlights":[{"line":9}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"]},"Xcode 15 or later":{"type":"xcodeRequirement","identifier":"Xcode 15 or later","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"Post-11.png":{"alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","identifier":"Post-11.png","type":"image","variants":[{"url":"\/images\/Post-11.png","traits":["1x","light"]},{"url":"\/images\/Post-11~dark.png","traits":["1x","dark"]}]},"Post-12.png":{"alt":"Multi-category post JSON representation","identifier":"Post-12.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-12.png"},{"url":"\/images\/Post-12~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"CodedIn(_:)","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","role":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"url":"\/documentation\/metacodable\/codedas(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","kind":"symbol","title":"CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"type":"topic"},"Post-01.png":{"alt":"Basic post JSON representation","identifier":"Post-01.png","type":"image","variants":[{"url":"\/images\/Post-01.png","traits":["1x","light"]},{"url":"\/images\/Post-01~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"title":"IgnoreDecoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","type":"section","title":"Decode\/Encode sequence of values"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","type":"section","title":"Share common Codable fields"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","title":"Customize dynamic data variations detection"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"type":"topic"},"Post-07.png":{"alt":"Basic post JSON representation with author and creation time","identifier":"Post-07.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-07.png"},{"url":"\/images\/Post-07~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"title":"IgnoreCoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"type":"topic"},"Post-14.swift":{"identifier":"Post-14.swift","type":"file","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"fileName":"Post.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"Post-06.png":{"alt":"Basic post JSON representation with author and creation time","identifier":"Post-06.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-06.png"},{"url":"\/images\/Post-06~dark.png","traits":["1x","dark"]}]},"Post-01.swift":{"identifier":"Post-01.swift","type":"file","fileType":"swift","syntax":"swift","content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"fileName":"Post.swift","highlights":[]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","type":"topic","title":"MetaCodable essentials"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section","title":"Decode\/Encode date representations"},"Post-04.swift":{"highlights":[{"line":9},{"line":10}],"syntax":"swift","identifier":"Post-04.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"type":"file","fileType":"swift","fileName":"Post.swift"},"Post-13.swift":{"highlights":[],"syntax":"swift","identifier":"Post-13.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"type":"file","fileType":"swift","fileName":"Post.swift"},"Post-03.swift":{"type":"file","highlights":[{"line":6},{"line":7}],"identifier":"Post-03.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"syntax":"swift","fileName":"Post.swift","fileType":"swift"},"Post-04.png":{"type":"image","identifier":"Post-04.png","variants":[{"url":"\/images\/Post-04.png","traits":["1x","light"]},{"url":"\/images\/Post-04~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author"},"Post-15.swift":{"type":"file","highlights":[{"line":15},{"line":21},{"line":28}],"identifier":"Post-15.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"syntax":"swift","fileName":"Post.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"section","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","type":"section","title":"Decode\/Encode basic value types without type check"},"Post-02.swift":{"type":"file","highlights":[{"line":1},{"line":2},{"line":3}],"identifier":"Post-02.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"syntax":"swift","fileName":"Post.swift","fileType":"swift"},"Post-12.swift":{"highlights":[],"syntax":"swift","identifier":"Post-12.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"type":"file","fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","kind":"project","role":"project","estimatedTime":"10min","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","type":"topic","title":"Use with general-purpose Swift types"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","title":"Create Codable enums with adjacent tag","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"url":"\/tutorials\/metacodable\/helper","kind":"project","role":"project","estimatedTime":"20min","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","title":"Add common decoding\/encoding customizations"},"doc://MetaCodable/tutorials/Usage":{"url":"\/tutorials\/usage","kind":"overview","role":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","title":"Discover MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","kind":"symbol","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"Default(_:)","role":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","kind":"symbol","url":"\/documentation\/metacodable\/codable()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"title":"Codable()","role":"symbol","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","type":"section","title":"Create Codable type and customize CodingKey of fields"},"Post-05.swift":{"type":"file","identifier":"Post-05.swift","fileName":"Post.swift","fileType":"swift","highlights":[{"line":9}],"syntax":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"]},"Post-11.swift":{"type":"file","identifier":"Post-11.swift","fileName":"Post.swift","fileType":"swift","highlights":[{"line":16},{"line":17}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"title":"IgnoreEncoding()","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"type":"section","title":"Customize field decoding\/encoding","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"title":"CodingKeys(_:)","role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"title":"Represent variations in data","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","estimatedTime":"10min","kind":"project","type":"topic"}}}