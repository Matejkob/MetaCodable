{"metadata":{"title":"Use with general-purpose Swift types","categoryPathComponent":"Usage","category":"Discover MetaCodable","role":"project"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/essential"]}],"sections":[{"xcodeRequirement":"Xcode 15 or later","content":[{"inlineContent":[{"text":"This tutorial guides you through","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"creating equivalent types for decoding\/encoding.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"customizing fieldâ€™s "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ignoring fields from decoding\/encoding.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"share common data across ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types.","type":"text"}],"type":"paragraph"}]}]}],"kind":"hero","estimatedTimeInMinutes":10,"chapter":"MetaCodable essentials","title":"Use with general-purpose Swift types"},{"kind":"tasks","tasks":[{"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest way to generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation is to attach "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition, provided all its properties using types that are already "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CodingKey"},{"text":" of each field can be customized individually using ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true,"type":"reference"},{"text":" macros. Optionally, global field case style can be declared using ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]}]}],"stepsSection":[{"runtimePreview":null,"caption":[],"code":null,"content":[{"inlineContent":[{"type":"text","text":"Analyze fields and their data types from data."}],"type":"paragraph"}],"media":"Post-01.png","type":"step"},{"runtimePreview":"Post-01.png","caption":[],"code":"Post-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"struct","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"class","type":"codeVoice"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}]}],"media":null,"type":"step"},{"runtimePreview":"Post-01.png","caption":[],"code":"Post-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition."}]}],"media":null,"type":"step"},{"runtimePreview":"Post-01.png","caption":[],"code":"Post-03.swift","content":[{"inlineContent":[{"type":"text","text":"Provide custom "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" value to use to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" macro attached to said field."}],"type":"paragraph"}],"media":null,"type":"step"},{"runtimePreview":"Post-04.png","caption":[],"code":"Post-04.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Provide each ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path components in order, to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro for decoding nested field at path.","type":"text"}]}],"media":null,"type":"step"},{"runtimePreview":"Post-04.png","caption":[],"code":"Post-05.swift","content":[{"inlineContent":[{"type":"text","text":"Last "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"type":"text","text":" macro."}],"type":"paragraph"}],"media":null,"type":"step"},{"runtimePreview":"Post-06.png","caption":[],"code":"Post-06.swift","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" macro to specify multiple possible ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s for a single field.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step"},{"runtimePreview":"Post-07.png","caption":[],"code":"Post-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style while using different case style for field name."}]}],"media":null,"type":"step"}],"title":"Create Codable type and customize CodingKey of fields"},{"anchor":"Customize-field-decodingencoding","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"Following level of customizations are possible:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" macro."}]}]},{"content":[{"inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"text":" macro per fields and ignore only decoding or encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" macros per fields respectively.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}]}],"runtimePreview":"Post-06.png","caption":[],"type":"step","code":"Post-07.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"text":" respectively.","type":"text"}]}],"runtimePreview":"Post-06.png","caption":[],"type":"step","code":"Post-08.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore all initialized fields from decoding and encoding by attaching ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro to type definition.","type":"text"}]}],"runtimePreview":"Post-06.png","caption":[],"type":"step","code":"Post-09.swift","media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allow specific initialized field decoding and encoding by attaching any of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":"\/","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":"\/","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"text":"\/","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"text":" macros.","type":"text"}]}],"runtimePreview":null,"caption":[],"type":"step","code":"Post-10.swift","media":null},{"content":[{"inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true},{"type":"text","text":" macro to initialized field for only suppressing decoding or encoding respectively."}],"type":"paragraph"}],"runtimePreview":"Post-11.png","caption":[],"type":"step","code":"Post-11.swift","media":null}],"title":"Customize field decoding\/encoding"},{"anchor":"Share-common-Codable-fields","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Common "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" fields can be extracted to a separate type to be shared across other "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}]}]}],"stepsSection":[{"caption":[],"runtimePreview":null,"type":"step","media":"Post-12.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Identify fields that are common across multiple data.","type":"text"}]}]},{"caption":[],"runtimePreview":"Post-12.png","type":"step","media":null,"code":"Post-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with fields representing common data."}]}]},{"caption":[],"runtimePreview":"Post-12.png","type":"step","media":null,"code":"Post-13.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create equivalent ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type for each specific post category only with fields representing category specific data.","type":"text"}]}]},{"caption":[],"runtimePreview":"Post-12.png","type":"step","media":null,"code":"Post-14.swift","content":[{"inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}],"type":"paragraph"}]},{"caption":[],"runtimePreview":"Post-12.png","type":"step","media":null,"code":"Post-15.swift","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category.","type":"text"}],"type":"paragraph"}]}],"title":"Share common Codable fields"}]},{"kind":"callToAction","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"featuredEyebrow":"Tutorial","title":"Represent variations in data","action":{"isActive":true,"overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","type":"reference","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]}}],"kind":"project","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}]}]},"references":{"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"section","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol"},"Post-04.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Post-04.png"},{"traits":["1x","dark"],"url":"\/images\/Post-04~dark.png"}],"type":"image","alt":"Basic post JSON representation with author","identifier":"Post-04.png"},"Post-15.swift":{"fileType":"swift","highlights":[{"line":15},{"line":21},{"line":28}],"type":"file","fileName":"Post.swift","syntax":"swift","identifier":"Post-15.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"]},"Post-01.swift":{"content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"identifier":"Post-01.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[],"fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"kind":"project","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"estimatedTime":"20min","type":"topic","title":"Represent dynamic data variations with protocol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic","role":"project"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","kind":"overview","title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","url":"\/tutorials\/usage"},"Post-08.swift":{"highlights":[{"line":9}],"type":"file","fileName":"Post.swift","fileType":"swift","syntax":"swift","identifier":"Post-08.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},"Post-07.swift":{"syntax":"swift","highlights":[],"identifier":"Post-07.swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"fileName":"Post.swift"},"Post-13.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"identifier":"Post-13.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[],"fileName":"Post.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"Post-02.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"identifier":"Post-02.swift","type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":1},{"line":2},{"line":3}],"fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","title":"Customize dynamic data variations detection","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"title":"Use with general-purpose Swift types","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"url":"\/documentation\/metacodable\/codingkeys(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"title":"CodingKeys(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}]},"Post-01.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Post-01.png"},{"traits":["1x","dark"],"url":"\/images\/Post-01~dark.png"}],"type":"image","identifier":"Post-01.png","alt":"Basic post JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"Post-04.swift":{"highlights":[{"line":9},{"line":10}],"type":"file","fileName":"Post.swift","fileType":"swift","syntax":"swift","identifier":"Post-04.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"url":"\/documentation\/metacodable\/codable()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"role":"symbol","type":"topic","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"Post-14.swift":{"syntax":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"identifier":"Post-14.swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"fileName":"Post.swift"},"Post-09.swift":{"highlights":[{"line":14},{"line":15}],"type":"file","fileName":"Post.swift","fileType":"swift","syntax":"swift","identifier":"Post-09.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","url":"\/tutorials\/usage\/metacodable-essentials","title":"MetaCodable essentials"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/enum"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"title":"IgnoreCodingInitialized()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}]},"Post-11.png":{"alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","type":"image","identifier":"Post-11.png","variants":[{"traits":["1x","light"],"url":"\/images\/Post-11.png"},{"traits":["1x","dark"],"url":"\/images\/Post-11~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/helper"},"Post-07.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Post-07.png"},{"traits":["1x","dark"],"url":"\/images\/Post-07~dark.png"}],"type":"image","alt":"Basic post JSON representation with author and creation time","identifier":"Post-07.png"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"kind":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"type":"topic","title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"...)","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Share common Codable fields","role":"pseudoSymbol"},"Xcode 15 or later":{"type":"xcodeRequirement","title":"Xcode 15 or later","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"section","title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"Post-12.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Post-12.png"},{"traits":["1x","dark"],"url":"\/images\/Post-12~dark.png"}],"type":"image","alt":"Multi-category post JSON representation","identifier":"Post-12.png"},"Post-06.png":{"identifier":"Post-06.png","type":"image","alt":"Basic post JSON representation with author and creation time","variants":[{"traits":["1x","light"],"url":"\/images\/Post-06.png"},{"traits":["1x","dark"],"url":"\/images\/Post-06~dark.png"}]},"Post-11.swift":{"fileType":"swift","highlights":[{"line":16},{"line":17}],"type":"file","fileName":"Post.swift","syntax":"swift","identifier":"Post-11.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"Post-12.swift":{"fileType":"swift","highlights":[],"type":"file","fileName":"Post.swift","syntax":"swift","identifier":"Post-12.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}]},"Post-03.swift":{"fileType":"swift","highlights":[{"line":6},{"line":7}],"type":"file","fileName":"Post.swift","syntax":"swift","identifier":"Post-03.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"Post-05.swift":{"highlights":[{"line":9}],"type":"file","fileName":"Post.swift","fileType":"swift","syntax":"swift","identifier":"Post-05.swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"Post-06.swift":{"syntax":"swift","highlights":[{"line":7}],"identifier":"Post-06.swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section","role":"pseudoSymbol"},"Post-10.swift":{"highlights":[{"line":5}],"type":"file","fileName":"Post.swift","fileType":"swift","syntax":"swift","identifier":"Post-10.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"]}}}