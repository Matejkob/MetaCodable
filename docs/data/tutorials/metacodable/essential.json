{"variants":[{"paths":["\/tutorials\/metacodable\/essential"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"project","category":"Discover MetaCodable","categoryPathComponent":"Usage","title":"Use with general-purpose Swift types"},"sections":[{"estimatedTimeInMinutes":10,"chapter":"MetaCodable essentials","kind":"hero","title":"Use with general-purpose Swift types","xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"creating equivalent types for decoding\/encoding."}]}]},{"content":[{"inlineContent":[{"text":"customizing fieldâ€™s ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ignoring fields from decoding\/encoding."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"share common data across ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}],"type":"paragraph"}]}]}]},{"kind":"tasks","tasks":[{"title":"Create Codable type and customize CodingKey of fields","contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"The simplest way to generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation is to attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"type":"text","text":" macro to type definition, provided all its properties using types that are already "},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"code":"Foundation","type":"codeVoice"},{"text":" types like ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":", ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"URL"},{"text":". Any type whose properties are ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" automatically conforms to ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" just by attaching this macro.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" of each field can be customized individually using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"text":" macros. Optionally, global field case style can be declared using ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference","isActive":true},{"type":"text","text":" macro."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Analyze fields and their data types from data."}]}],"media":"Post-01.png","code":null,"runtimePreview":null,"type":"step"},{"code":"Post-01.swift","caption":[],"type":"step","media":null,"runtimePreview":"Post-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"struct"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}]}]},{"runtimePreview":"Post-01.png","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"text":" macro to type definition.","type":"text"}],"type":"paragraph"}],"code":"Post-02.swift","type":"step"},{"code":"Post-03.swift","media":null,"type":"step","caption":[],"content":[{"inlineContent":[{"text":"Provide custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value to use to "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" macro attached to said field.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-01.png"},{"runtimePreview":"Post-04.png","code":"Post-04.swift","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide each "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path components in order, to "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro for decoding nested field at path."}]}],"caption":[]},{"type":"step","content":[{"inlineContent":[{"text":"Last ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path component can be omitted if it is same as field name by using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":"Post-04.png","code":"Post-05.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" macro to specify multiple possible ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s for a single field."}]}],"caption":[],"type":"step","media":null,"code":"Post-06.swift","runtimePreview":"Post-06.png"},{"type":"step","caption":[],"media":null,"code":"Post-07.swift","runtimePreview":"Post-07.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to specify "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" case style while using different case style for field name."}]}]}]},{"anchor":"Customize-field-decodingencoding","title":"Customize field decoding\/encoding","stepsSection":[{"runtimePreview":"Post-06.png","content":[{"inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[],"code":"Post-08.swift"},{"media":null,"runtimePreview":"Post-06.png","code":"Post-09.swift","content":[{"inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"type":"text","text":" respectively."}],"type":"paragraph"}],"caption":[],"type":"step"},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields from decoding and encoding by attaching ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" macro to type definition."}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":"Post-06.png","code":"Post-10.swift","caption":[]},{"runtimePreview":"Post-11.png","content":[{"type":"paragraph","inlineContent":[{"text":"Allow specific initialized field decoding and encoding by attaching any of ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":"\/"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":"\/","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"text":"\/","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"type":"text","text":" macros."}]}],"type":"step","caption":[],"media":null,"code":"Post-11.swift"},{"caption":[],"code":"Post-12.swift","type":"step","runtimePreview":"Post-11.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" macro to initialized field for only suppressing decoding or encoding respectively."}]}],"media":null}],"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"type":"text","text":" macro per fields and ignore only decoding or encoding with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" macros per fields respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" macro."}]}]}],"type":"unorderedList"}],"kind":"contentAndMedia"}]},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Common "},{"type":"codeVoice","code":"Codable"},{"text":" fields can be extracted to a separate type to be shared across other ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}]}],"kind":"contentAndMedia"}],"title":"Share common Codable fields","stepsSection":[{"type":"step","code":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Identify fields that are common across multiple data."}],"type":"paragraph"}],"media":"Post-13.png","caption":[]},{"content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with fields representing common data."}],"type":"paragraph"}],"runtimePreview":"Post-13.png","code":"Post-13.swift","type":"step","media":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type for each specific post category only with fields representing category specific data."}]}],"type":"step","code":"Post-14.swift","caption":[],"media":null,"runtimePreview":"Post-13.png"},{"caption":[],"media":null,"code":"Post-15.swift","type":"step","runtimePreview":"Post-13.png","content":[{"type":"paragraph","inlineContent":[{"text":"Add common post data field to each specific post category, field name doesnâ€™t matter here.","type":"text"}]}]},{"type":"step","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}],"type":"paragraph"}],"media":null,"caption":[],"code":"Post-16.swift","runtimePreview":"Post-13.png"}],"anchor":"Share-common-Codable-fields"}]},{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"kind":"callToAction","title":"Represent variations in data","action":{"overridingTitle":"Get started","isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"featuredEyebrow":"Tutorial"}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"kind":"project","references":{"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"title":"Share common Codable fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Post-11.swift":{"identifier":"Post-11.swift","fileType":"swift","fileName":"Post.swift","syntax":"swift","type":"file","highlights":[{"line":16},{"line":17}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"url":"\/documentation\/metacodable\/codedby(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"type":"text","text":" instance."}],"title":"CodedBy(_:)"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"type":"topic","title":"MetaCodable essentials","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"Post-08.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-08.swift","fileName":"Post.swift","highlights":[],"syntax":"swift"},"Post-01.swift":{"content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"highlights":[],"syntax":"swift","identifier":"Post-01.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"Post-10.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"],"identifier":"Post-10.swift","fileName":"Post.swift","highlights":[{"line":5}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"estimatedTime":"20min","title":"Represent dynamic data variations with protocol","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","role":"project","url":"\/tutorials\/metacodable\/dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"Post-01.png":{"identifier":"Post-01.png","variants":[{"url":"\/images\/MetaCodable\/Post-01.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-01~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation","type":"image"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later","type":"xcodeRequirement"},"Post-12.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"highlights":[{"line":17}],"syntax":"swift","identifier":"Post-12.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"title":"Decode\/Encode sequence of values","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Post-13.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"identifier":"Post-13.swift","fileName":"Post.swift","highlights":[],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreDecoding()"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"title":"Decode\/Encode basic value types without type check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"kind":"text","text":"("},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"text":"of the provided case format.","type":"text"}],"title":"CodingKeys(_:)","role":"symbol","kind":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"title":"Create dynamic variation Codable types","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"Post-04.png":{"identifier":"Post-04.png","variants":[{"url":"\/images\/MetaCodable\/Post-04.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-04~dark.png"}],"alt":"Basic post JSON representation with author","type":"image"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","title":"Represent variations in data","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}]},"Post-07.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-07.swift","fileName":"Post.swift","highlights":[{"line":4},{"line":11}],"syntax":"swift"},"Post-15.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"highlights":[{"line":15},{"line":21},{"line":28}],"syntax":"swift","identifier":"Post-15.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"Post-07.png":{"identifier":"Post-07.png","variants":[{"url":"\/images\/MetaCodable\/Post-07.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-07~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author and creation time","type":"image"},"Post-06.png":{"identifier":"Post-06.png","variants":[{"url":"\/images\/MetaCodable\/Post-06.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-06~dark.png"}],"alt":"Basic post JSON representation with author and creation time","type":"image"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"title":"CodedAs(_:_:)","role":"symbol","kind":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"Post-14.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"identifier":"Post-14.swift","fileName":"Post.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"syntax":"swift"},"Post-06.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"highlights":[{"line":7}],"syntax":"swift","identifier":"Post-06.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"title":"IgnoreCodingInitialized()","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"CodedAt(_:)","role":"symbol","kind":"symbol"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"title":"Advanced MetaCodable","type":"topic","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","role":"article","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[]},"Post-04.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"identifier":"Post-04.swift","fileName":"Post.swift","highlights":[{"line":9},{"line":10}],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"title":"IgnoreCoding()","kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","url":"\/documentation\/metacodable\/codedin(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"container "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"title":"CodedIn(_:)","kind":"symbol","role":"symbol"},"Post-16.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    @CodedAt","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    @CodedAt","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    @CodedAt","    let base: Post","    let url: String","    let duration: Float","}"],"highlights":[{"line":15},{"line":22},{"line":30}],"syntax":"swift","identifier":"Post-16.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"Post-11.png":{"identifier":"Post-11.png","variants":[{"url":"\/images\/MetaCodable\/Post-11.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-11~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","type":"image"},"Post-03.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"highlights":[{"line":6},{"line":7}],"syntax":"swift","identifier":"Post-03.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","kind":"project","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"estimatedTime":"10min","type":"topic"},"Post-05.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-05.swift","fileName":"Post.swift","highlights":[{"line":9}],"syntax":"swift"},"Post-13.png":{"identifier":"Post-13.png","variants":[{"url":"\/images\/MetaCodable\/Post-13.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-13~dark.png"}],"alt":"Multi-category post JSON representation","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"section"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"topic","url":"\/documentation\/metacodable\/default(_:)","abstract":[{"type":"text","text":"Provides a "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"title":"Default(_:)","role":"symbol","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","kind":"symbol","role":"symbol"},"Post-09.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"],"identifier":"Post-09.swift","fileName":"Post.swift","highlights":[{"line":14},{"line":15}],"syntax":"swift"},"Post-02.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"highlights":[{"line":1},{"line":2},{"line":3}],"syntax":"swift","identifier":"Post-02.swift","fileName":"Post.swift","type":"file","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"}}}