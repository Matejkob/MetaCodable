{"metadata":{"categoryPathComponent":"Usage","category":"Discover MetaCodable","role":"project","title":"Use with general-purpose Swift types"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/essential"]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"sections":[{"xcodeRequirement":"Xcode 15 or later","estimatedTimeInMinutes":10,"title":"Use with general-purpose Swift types","kind":"hero","chapter":"MetaCodable essentials","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"creating equivalent types for decoding\/encoding.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"customizing fieldâ€™s "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"ignoring fields from decoding\/encoding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"share common data across ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types.","type":"text"}]}]}]}]},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest way to generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation is to attach "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"type":"text","text":" macro to type definition, provided all its properties using types that are already "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"code":"CodingKey","type":"codeVoice"},{"text":" of each field can be customized individually using ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true,"type":"reference"},{"text":" macros. Optionally, global field case style can be declared using ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Create Codable type and customize CodingKey of fields","anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Analyze fields and their data types from data."}]}],"type":"step","runtimePreview":null,"media":"Post-01.png","code":null,"caption":[]},{"content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"class"},{"text":" with field name same as in data and type equivalent to encoded data type.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":"Post-01.png","media":null,"code":"Post-01.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition."}]}],"type":"step","runtimePreview":"Post-01.png","media":null,"code":"Post-02.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Provide custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value to use to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro attached to said field.","type":"text"}]}],"type":"step","runtimePreview":"Post-01.png","media":null,"code":"Post-03.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide each "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path components in order, to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" macro for decoding nested field at path."}]}],"type":"step","runtimePreview":"Post-04.png","media":null,"code":"Post-04.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Last "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macro."}]}],"type":"step","runtimePreview":"Post-04.png","media":null,"code":"Post-05.swift","caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to specify multiple possible "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s for a single field."}],"type":"paragraph"}],"type":"step","runtimePreview":"Post-06.png","media":null,"code":"Post-06.swift","caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" case style while using different case style for field name."}]}],"type":"step","runtimePreview":"Post-07.png","media":null,"code":"Post-07.swift","caption":[]}]},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Provide default value for fields to be used when decoding fails with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference"},{"text":" macro.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"text":" macro per fields and ignore only decoding or encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference","isActive":true},{"text":" macros per fields respectively.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro.","type":"text"}],"type":"paragraph"}]}]}],"kind":"contentAndMedia"}],"title":"Customize field decoding\/encoding","anchor":"Customize-field-decodingencoding","stepsSection":[{"caption":[],"runtimePreview":"Post-06.png","content":[{"inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"Post-07.swift"},{"caption":[],"runtimePreview":"Post-06.png","content":[{"type":"paragraph","inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":" respectively.","type":"text"}]}],"type":"step","media":null,"code":"Post-08.swift"},{"caption":[],"runtimePreview":"Post-06.png","content":[{"type":"paragraph","inlineContent":[{"text":"Ignore all initialized fields from decoding and encoding by attaching ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"text":" macro to type definition.","type":"text"}]}],"type":"step","media":null,"code":"Post-09.swift"},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Allow specific initialized field decoding and encoding by attaching any of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":"\/","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":"\/","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"text":"\/","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"text":" macros.","type":"text"}]}],"type":"step","media":null,"code":"Post-10.swift"},{"caption":[],"runtimePreview":"Post-11.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"type":"text","text":" macro to initialized field for only suppressing decoding or encoding respectively."}]}],"type":"step","media":null,"code":"Post-11.swift"}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Common "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" fields can be extracted to a separate type to be shared across other "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Share common Codable fields","anchor":"Share-common-Codable-fields","stepsSection":[{"media":"Post-12.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify fields that are common across multiple data."}]}],"caption":[],"code":null,"runtimePreview":null},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with fields representing common data.","type":"text"}]}],"caption":[],"code":"Post-12.swift","runtimePreview":"Post-12.png"},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type for each specific post category only with fields representing category specific data.","type":"text"}]}],"caption":[],"code":"Post-13.swift","runtimePreview":"Post-12.png"},{"media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}],"type":"paragraph"}],"caption":[],"code":"Post-14.swift","runtimePreview":"Post-12.png"},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category.","type":"text"}]}],"caption":[],"code":"Post-15.swift","runtimePreview":"Post-12.png"}]}]},{"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","type":"reference","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","isActive":true},"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"featuredEyebrow":"Tutorial","title":"Represent variations in data","kind":"callToAction"}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","references":{"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformances faster than ever before.","type":"text"}],"kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol"},"Post-06.swift":{"fileName":"Post.swift","highlights":[{"line":7}],"identifier":"Post-06.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file"},"Post-11.swift":{"fileName":"Post.swift","highlights":[{"line":16},{"line":17}],"identifier":"Post-11.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/metacodable\/codedin(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"kind":"symbol"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","kind":"article","type":"topic","abstract":[],"role":"article"},"Post-04.swift":{"fileName":"Post.swift","highlights":[{"line":9},{"line":10}],"identifier":"Post-04.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"title":"Customize field decoding\/encoding","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"title":"Create Codable type and customize CodingKey of fields","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()"},"Post-03.swift":{"fileName":"Post.swift","highlights":[{"line":6},{"line":7}],"identifier":"Post-03.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"syntax":"swift","type":"file"},"Post-02.swift":{"fileName":"Post.swift","highlights":[{"line":1},{"line":2},{"line":3}],"identifier":"Post-02.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"title":"MetaCodable essentials","kind":"article","role":"article","type":"topic","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"Post-06.png":{"identifier":"Post-06.png","variants":[{"url":"\/images\/Post-06.png","traits":["1x","light"]},{"url":"\/images\/Post-06~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author and creation time","type":"image"},"Post-10.swift":{"fileName":"Post.swift","highlights":[{"line":5}],"identifier":"Post-10.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","url":"\/tutorials\/metacodable\/dynamic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"kind":"symbol"},"Post-01.swift":{"fileName":"Post.swift","highlights":[],"identifier":"Post-01.swift","fileType":"swift","content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"syntax":"swift","type":"file"},"Post-09.swift":{"fileName":"Post.swift","highlights":[{"line":14},{"line":15}],"identifier":"Post-09.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"Post-07.swift":{"fileName":"Post.swift","highlights":[],"identifier":"Post-07.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file"},"Post-07.png":{"identifier":"Post-07.png","variants":[{"url":"\/images\/Post-07.png","traits":["1x","light"]},{"url":"\/images\/Post-07~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author and creation time","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"Post-01.png":{"identifier":"Post-01.png","variants":[{"traits":["1x","light"],"url":"\/images\/Post-01.png"},{"traits":["1x","dark"],"url":"\/images\/Post-01~dark.png"}],"alt":"Basic post JSON representation","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"Post-12.png":{"identifier":"Post-12.png","variants":[{"url":"\/images\/Post-12.png","traits":["1x","light"]},{"url":"\/images\/Post-12~dark.png","traits":["1x","dark"]}],"alt":"Multi-category post JSON representation","type":"image"},"Post-15.swift":{"fileName":"Post.swift","highlights":[{"line":15},{"line":21},{"line":28}],"identifier":"Post-15.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"url":"\/tutorials\/metacodable\/enum","title":"Represent variations in data","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project"},"Post-12.swift":{"fileName":"Post.swift","highlights":[],"identifier":"Post-12.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"syntax":"swift","type":"file"},"Post-11.png":{"identifier":"Post-11.png","variants":[{"url":"\/images\/Post-11.png","traits":["1x","light"]},{"url":"\/images\/Post-11~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","type":"image"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"title":"IgnoreDecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","title":"Use with general-purpose Swift types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"title":"CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()"},"Post-05.swift":{"fileName":"Post.swift","highlights":[{"line":9}],"identifier":"Post-05.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file"},"Xcode 15 or later":{"title":"Xcode 15 or later","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"},"Post-14.swift":{"fileName":"Post.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"identifier":"Post-14.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper"},"Post-04.png":{"identifier":"Post-04.png","variants":[{"url":"\/images\/Post-04.png","traits":["1x","light"]},{"url":"\/images\/Post-04~dark.png","traits":["1x","dark"]}],"alt":"Basic post JSON representation with author","type":"image"},"Post-08.swift":{"fileName":"Post.swift","highlights":[{"line":9}],"identifier":"Post-08.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","type":"file"},"Post-13.swift":{"fileName":"Post.swift","highlights":[],"identifier":"Post-13.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"syntax":"swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"title":"Default(_:)","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"topic","url":"\/documentation\/metacodable\/default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol"}}}