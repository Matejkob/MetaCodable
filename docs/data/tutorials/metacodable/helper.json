{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/helper"]}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"sections":[{"kind":"hero","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]}],"estimatedTimeInMinutes":20,"xcodeRequirement":"Xcode 15 or later","title":"Add common decoding\/encoding customizations","chapter":"Advanced MetaCodable"},{"kind":"tasks","tasks":[{"stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with unpredictable type and can be mapped to an expected type."}]}],"code":null,"media":"Product.png","runtimePreview":null,"type":"step"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"code":"Product-01.swift","media":null,"runtimePreview":"Product.png","type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"ValueCoder","type":"codeVoice"},{"text":" on properties to indicate the type mapping transformation.","type":"text"}]}],"code":"Product-02.swift","media":null,"runtimePreview":"Product.png","type":"step"}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data."}],"type":"paragraph"},{"inlineContent":[{"text":"i.e. if expected ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" type data is coming as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", the data can be converted to expected type.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},{"stepsSection":[{"code":null,"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Identify date formats represented in data.","type":"text"}]}],"media":"Date.png","runtimePreview":null},{"code":"Date-01.swift","caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type."}],"type":"paragraph"}],"media":null,"runtimePreview":"Date.png"},{"code":"Date-02.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Since1970DateCoder"},{"text":" to decode\/encode UNIX timestamp.","type":"text"}]}],"media":null,"runtimePreview":"Date.png"},{"code":"Date-03.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"ISO8601DateCoder","type":"codeVoice"},{"text":" to decode\/encode date represented in ","type":"text"},{"code":"ISO8601","type":"codeVoice"},{"text":" standard.","type":"text"}]}],"media":null,"runtimePreview":"Date.png"},{"code":"Date-04.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"DateCoder"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}]}],"media":null,"runtimePreview":"Date.png"}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through decoding\/encoding "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in "},{"code":"ISO8601","type":"codeVoice"},{"type":"text","text":" like text formats."}]}],"kind":"contentAndMedia"}],"anchor":"DecodeEncode-date-representations","title":"Decode\/Encode date representations"},{"stepsSection":[{"code":null,"type":"step","runtimePreview":null,"caption":[],"media":"Data.png","content":[{"inlineContent":[{"text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data.","type":"text"}],"type":"paragraph"}]},{"code":"Data-01.swift","type":"step","runtimePreview":"Data.png","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with the fields as the required sequence type.","type":"text"}],"type":"paragraph"}]},{"code":"Data-02.swift","type":"step","runtimePreview":"Data.png","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"SequenceCoder"},{"type":"text","text":" and provide "},{"type":"codeVoice","code":"elementHelper"},{"type":"text","text":" "},{"type":"codeVoice","code":"HelperCoder"},{"type":"text","text":" to customize decoding\/encoding of each element."}]}]},{"code":"Data-03.swift","type":"step","runtimePreview":"Data.png","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"code":"lossy","type":"codeVoice"},{"type":"text","text":" in "},{"code":"configuration","type":"codeVoice"},{"type":"text","text":" to ignore invalid element data instead of failing."}]}]},{"code":"Data-04.swift","type":"step","runtimePreview":"Data.png","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Provide "},{"code":"default","type":"codeVoice"},{"type":"text","text":" value in "},{"code":"configuration","type":"codeVoice"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}],"type":"paragraph"}]}],"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values.","type":"text"}]}]}],"anchor":"DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values"},{"stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}]}],"runtimePreview":null,"code":null,"media":"User.png","type":"step"},{"caption":[],"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with the fields according to the data.","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png","code":"User-01.swift","media":null,"type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" type that accepts decoding and encoding key values.","type":"text"}]}],"runtimePreview":"User.png","code":"User-02.swift","media":null,"type":"step"},{"caption":[],"content":[{"inlineContent":[{"text":"Create custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png","code":"User-03.swift","media":null,"type":"step"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Provide "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" implementations for "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","isActive":true},{"type":"text","text":" for decoding and encoding with provided key values."}],"type":"paragraph"}],"runtimePreview":"User.png","code":"User-04.swift","media":null,"type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the created custom "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":" macro to use the decoding\/encoding customization."}]}],"runtimePreview":"User.png","code":"User-05.swift","media":null,"type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" macro without any arguments, to the property to pass the type’s "},{"code":"init(from:)","type":"codeVoice"},{"type":"text","text":" "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" argument to the custom "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"type":"text","text":"."}]}],"runtimePreview":"User.png","code":"User-06.swift","media":null,"type":"step"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"anchor":"Create-custom-advanced-customizations","title":"Create custom advanced customizations"}]},{"kind":"callToAction","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","isActive":true},"title":"Represent dynamic data variations with protocol","featuredEyebrow":"Tutorial"}],"hierarchy":{"modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}]}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"role":"project","categoryPathComponent":"Usage","category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations"},"kind":"project","references":{"doc://MetaCodable/tutorials/MetaCodable/Essential":{"title":"Use with general-purpose Swift types","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Share common Codable fields","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"section","title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol"},"Data-04.swift":{"type":"file","fileName":"Data.swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"identifier":"Data-04.swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift"},"Date-04.swift":{"content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"fileType":"swift","fileName":"Date.swift","identifier":"Date-04.swift","type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"syntax":"swift"},"Product-01.swift":{"type":"file","fileName":"Product.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"identifier":"Product-01.swift","highlights":[],"fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields"},"User-03.swift":{"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","fileName":"User.swift","identifier":"User-03.swift","type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable"},"Xcode 15 or later":{"type":"xcodeRequirement","title":"Xcode 15 or later","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"kind":"project","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"estimatedTime":"20min","type":"topic","title":"Represent dynamic data variations with protocol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic","role":"project"},"Data-03.swift":{"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"fileType":"swift","fileName":"Data.swift","identifier":"Data-03.swift","type":"file","highlights":[{"line":9},{"line":10}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/helper"},"Data-02.swift":{"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"fileType":"swift","fileName":"Data.swift","identifier":"Data-02.swift","type":"file","highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"syntax":"swift"},"Date.png":{"alt":"Data with date formats varying for each property","variants":[{"traits":["1x","light"],"url":"\/images\/Date.png"},{"traits":["1x","dark"],"url":"\/images\/Date~dark.png"}],"identifier":"Date.png","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/enum"},"User-06.swift":{"content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","fileName":"User.swift","identifier":"User-06.swift","type":"file","highlights":[{"line":11}],"syntax":"swift"},"Date-02.swift":{"type":"file","fileName":"Date.swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"identifier":"Date-02.swift","highlights":[{"line":3},{"line":7}],"fileType":"swift"},"Product.png":{"type":"image","variants":[{"url":"\/images\/Product.png","traits":["1x","light"]},{"url":"\/images\/Product~dark.png","traits":["1x","dark"]}],"alt":"List of products with inconsistent property types","identifier":"Product.png"},"User-02.swift":{"type":"file","fileName":"User.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"identifier":"User-02.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileType":"swift"},"Product-02.swift":{"type":"file","fileName":"Product.swift","syntax":"swift","content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"identifier":"Product-02.swift","highlights":[{"line":2},{"line":6},{"line":8}],"fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","title":"Coded","type":"topic","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"url":"\/documentation\/metacodable\/helpercoder"},"Date-03.swift":{"type":"file","fileName":"Date.swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"identifier":"Date-03.swift","highlights":[{"line":9}],"fileType":"swift"},"User.png":{"type":"image","variants":[{"url":"\/images\/User.png","traits":["1x","light"]},{"url":"\/images\/User~dark.png","traits":["1x","dark"]}],"alt":"User data with different key in decoding and encoding","identifier":"User.png"},"Data.png":{"type":"image","variants":[{"url":"\/images\/Data.png","traits":["1x","light"]},{"url":"\/images\/Data~dark.png","traits":["1x","dark"]}],"alt":"Base64 data sequence data","identifier":"Data.png"},"User-04.swift":{"type":"file","fileName":"User.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-04.swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileType":"swift"},"Date-01.swift":{"content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"fileType":"swift","fileName":"Date.swift","identifier":"Date-01.swift","type":"file","highlights":[],"syntax":"swift"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","kind":"overview","title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","url":"\/tutorials\/usage"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","kind":"symbol","title":"decode(from:)","type":"topic","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Decoder","preciseIdentifier":"s:s7DecoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Decodes a value of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type from the given ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"...)","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","url":"\/tutorials\/usage\/metacodable-essentials","title":"MetaCodable essentials"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"role":"symbol","required":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","abstract":[{"text":"Encodes given value of the ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"text":" type to the provided ","type":"text"},{"type":"codeVoice","code":"encoder"},{"text":".","type":"text"}],"defaultImplementations":2,"title":"encode(_:to:)","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","title":"Customize dynamic data variations detection","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"section","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"User-01.swift":{"type":"file","fileName":"User.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"identifier":"User-01.swift","highlights":[],"fileType":"swift"},"Data-01.swift":{"type":"file","fileName":"Data.swift","syntax":"swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"identifier":"Data-01.swift","highlights":[],"fileType":"swift"},"User-05.swift":{"type":"file","fileName":"User.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-05.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"}}}