{"variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations","role":"project","categoryPathComponent":"Usage"},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[{"chapter":"Advanced MetaCodable","title":"Add common decoding\/encoding customizations","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]}],"xcodeRequirement":"Xcode 15 or later","kind":"hero","estimatedTimeInMinutes":20},{"tasks":[{"stepsSection":[{"content":[{"inlineContent":[{"text":"Identify data with unpredictable type and can be mapped to an expected type.","type":"text"}],"type":"paragraph"}],"media":"Product.png","code":null,"type":"step","caption":[],"runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with the fields as expected type.","type":"text"}]}],"media":null,"code":"Product-01.swift","type":"step","caption":[],"runtimePreview":"Product.png"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"text":" on properties to indicate the type mapping transformation.","type":"text"}]}],"media":null,"code":"Product-02.swift","type":"step","caption":[],"runtimePreview":"Product.png"}],"anchor":"DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data."}]},{"type":"paragraph","inlineContent":[{"text":"i.e. if expected ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" type data is coming as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", the data can be converted to expected type.","type":"text"}]}]}]},{"stepsSection":[{"caption":[],"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Identify date formats represented in data."}],"type":"paragraph"}],"type":"step","code":null,"media":"Date.png"},{"caption":[],"runtimePreview":"Date.png","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":" type.","type":"text"}],"type":"paragraph"}],"type":"step","code":"Date-01.swift","media":null},{"caption":[],"runtimePreview":"Date.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Since1970DateCoder"},{"text":" to decode\/encode UNIX timestamp.","type":"text"}]}],"type":"step","code":"Date-02.swift","media":null},{"caption":[],"runtimePreview":"Date.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ISO8601DateCoder"},{"type":"text","text":" to decode\/encode date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}],"type":"paragraph"}],"type":"step","code":"Date-03.swift","media":null},{"caption":[],"runtimePreview":"Date.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"DateCoder"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}],"type":"paragraph"}],"type":"step","code":"Date-04.swift","media":null}],"anchor":"DecodeEncode-date-representations","title":"Decode\/Encode date representations","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through decoding\/encoding "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" like text formats."}],"type":"paragraph"}]}]},{"stepsSection":[{"media":"Data.png","code":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}]}],"type":"step","runtimePreview":null},{"media":null,"code":"Data-01.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as the required sequence type.","type":"text"}]}],"type":"step","runtimePreview":"Data.png"},{"media":null,"code":"Data-02.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"SequenceCoder","type":"codeVoice"},{"text":" and provide ","type":"text"},{"code":"elementHelper","type":"codeVoice"},{"text":" ","type":"text"},{"code":"HelperCoder","type":"codeVoice"},{"text":" to customize decoding\/encoding of each element.","type":"text"}]}],"type":"step","runtimePreview":"Data.png"},{"media":null,"code":"Data-03.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"type":"codeVoice","code":"lossy"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to ignore invalid element data instead of failing.","type":"text"}]}],"type":"step","runtimePreview":"Data.png"},{"media":null,"code":"Data-04.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value in "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}]}],"type":"step","runtimePreview":"Data.png"}],"anchor":"DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}],"type":"paragraph"}],"mediaPosition":"trailing"}]},{"stepsSection":[{"media":"User.png","type":"step","caption":[],"code":null,"content":[{"inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"type":"step","caption":[],"code":"User-01.swift","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields according to the data."}],"type":"paragraph"}],"runtimePreview":"User.png"},{"media":null,"type":"step","caption":[],"code":"User-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" type that accepts decoding and encoding key values."}]}],"runtimePreview":"User.png"},{"media":null,"type":"step","caption":[],"code":"User-03.swift","content":[{"inlineContent":[{"type":"text","text":"Create custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" type to be used for decoding\/encoding from provided string values."}],"type":"paragraph"}],"runtimePreview":"User.png"},{"media":null,"type":"step","caption":[],"code":"User-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"type":"text","text":" implementations for "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","type":"reference"},{"type":"text","text":" for decoding and encoding with provided key values."}]}],"runtimePreview":"User.png"},{"media":null,"type":"step","caption":[],"code":"User-05.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Use the created custom ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":" with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"text":" macro to use the decoding\/encoding customization.","type":"text"}]}],"runtimePreview":"User.png"},{"media":null,"type":"step","caption":[],"code":"User-06.swift","content":[{"inlineContent":[{"text":"Apply ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro without any arguments, to the property to pass the typeâ€™s ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" argument to the custom ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png"}],"anchor":"Create-custom-advanced-customizations","title":"Create custom advanced customizations","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that arenâ€™t provided by this library."}]},{"type":"paragraph","inlineContent":[{"text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding.","type":"text"}]}],"mediaPosition":"trailing"}]}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","action":{"overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"title":"Represent dynamic data variations with protocol","kind":"callToAction","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]}],"kind":"project","hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}]}]},"references":{"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"abstract":[{"text":"Decodes a value of the ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"text":" type from the given ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":".","type":"text"}],"title":"decode(from:)","kind":"symbol","role":"symbol","required":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s7DecoderP","text":"Decoder","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","kind":"typeIdentifier"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","type":"topic"},"Date-01.swift":{"syntax":"swift","identifier":"Date-01.swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"fileType":"swift","highlights":[],"fileName":"Date.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","title":"Create Codable enums with adjacent tag","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","type":"section","title":"Decode\/Encode basic value types without type check"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"url":"\/documentation\/metacodable\/helpercoder","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference"},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"topic","title":"HelperCoder"},"Data-02.swift":{"syntax":"swift","identifier":"Data-02.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"fileType":"swift","highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"fileName":"Data.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section"},"User-02.swift":{"syntax":"swift","identifier":"User-02.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileName":"User.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedby(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","role":"symbol","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol"},"Data-01.swift":{"syntax":"swift","identifier":"Data-01.swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"fileType":"swift","highlights":[],"fileName":"Data.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","title":"Create Codable enums with internal tag"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"url":"\/tutorials\/metacodable\/dynamic","kind":"project","role":"project","estimatedTime":"20min","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","type":"topic","title":"Represent dynamic data variations with protocol"},"Data.png":{"alt":"Base64 data sequence data","variants":[{"traits":["1x","light"],"url":"\/images\/Data.png"},{"traits":["1x","dark"],"url":"\/images\/Data~dark.png"}],"identifier":"Data.png","type":"image"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","type":"section","title":"Create Codable type and customize CodingKey of fields"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"section","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol"},"User-05.swift":{"syntax":"swift","identifier":"User-05.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileName":"User.swift"},"User.png":{"alt":"User data with different key in decoding and encoding","variants":[{"url":"\/images\/User.png","traits":["1x","light"]},{"url":"\/images\/User~dark.png","traits":["1x","dark"]}],"identifier":"User.png","type":"image"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","type":"topic","title":"Advanced MetaCodable"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","title":"Customize dynamic data variations detection"},"User-06.swift":{"syntax":"swift","identifier":"User-06.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","highlights":[{"line":11}],"fileName":"User.swift"},"Date.png":{"alt":"Data with date formats varying for each property","variants":[{"url":"\/images\/Date.png","traits":["1x","light"]},{"url":"\/images\/Date~dark.png","traits":["1x","dark"]}],"identifier":"Date.png","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section","title":"Decode\/Encode date representations"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"title":"Represent variations in data","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","estimatedTime":"10min","kind":"project","type":"topic"},"Product-02.swift":{"syntax":"swift","identifier":"Product-02.swift","type":"file","content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"fileType":"swift","highlights":[{"line":2},{"line":6},{"line":8}],"fileName":"Product.swift"},"Date-02.swift":{"syntax":"swift","identifier":"Date-02.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"fileType":"swift","highlights":[{"line":3},{"line":7}],"fileName":"Date.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"url":"\/tutorials\/metacodable\/helper","kind":"project","role":"project","estimatedTime":"20min","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","title":"Add common decoding\/encoding customizations"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"type":"topic"},"Date-04.swift":{"syntax":"swift","identifier":"Date-04.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"fileName":"Date.swift"},"Product.png":{"alt":"List of products with inconsistent property types","variants":[{"url":"\/images\/Product.png","traits":["1x","light"]},{"url":"\/images\/Product~dark.png","traits":["1x","dark"]}],"identifier":"Product.png","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","type":"section","title":"Decode\/Encode sequence of values"},"Product-01.swift":{"syntax":"swift","identifier":"Product-01.swift","type":"file","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"fileType":"swift","highlights":[],"fileName":"Product.swift"},"User-01.swift":{"syntax":"swift","identifier":"User-01.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"fileType":"swift","highlights":[],"fileName":"User.swift"},"doc://MetaCodable/tutorials/Usage":{"url":"\/tutorials\/usage","kind":"overview","role":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","title":"Discover MetaCodable"},"Date-03.swift":{"syntax":"swift","identifier":"Date-03.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"fileType":"swift","highlights":[{"line":9}],"fileName":"Date.swift"},"User-03.swift":{"syntax":"swift","identifier":"User-03.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","type":"section","title":"Share common Codable fields"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"type":"section","title":"Customize field decoding\/encoding","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","role":"article","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","type":"topic","title":"MetaCodable essentials"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","abstract":[{"text":"Encodes given value of the ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type to the provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Encoder","kind":"typeIdentifier","preciseIdentifier":"s:s7EncoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"defaultImplementations":2,"kind":"symbol","required":true,"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","title":"encode(_:to:)","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","kind":"project","role":"project","estimatedTime":"10min","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","type":"topic","title":"Use with general-purpose Swift types"},"User-04.swift":{"syntax":"swift","identifier":"User-04.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"User.swift"},"Data-04.swift":{"syntax":"swift","identifier":"Data-04.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"fileType":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileName":"Data.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"type":"topic","title":"Coded","role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","required":true,"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}]},"Data-03.swift":{"syntax":"swift","identifier":"Data-03.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"fileType":"swift","highlights":[{"line":9},{"line":10}],"fileName":"Data.swift"}}}