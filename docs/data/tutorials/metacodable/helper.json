{"variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"project","schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"metadata":{"categoryPathComponent":"Usage","role":"project","category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations"},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"sections":[{"estimatedTimeInMinutes":20,"chapter":"Advanced MetaCodable","content":[{"inlineContent":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"paragraph"}],"xcodeRequirement":"Xcode 15 or later","title":"Add common decoding\/encoding customizations","kind":"hero"},{"tasks":[{"anchor":"DecodeEncode-basic-value-types-without-type-check","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Identify data with unpredictable type and can be mapped to an expected type.","type":"text"}],"type":"paragraph"}],"code":null,"caption":[],"type":"step","media":"Product.png"},{"runtimePreview":"Product.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}]}],"code":"Product-01.swift","caption":[],"type":"step","media":null},{"runtimePreview":"Product.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}],"type":"paragraph"}],"code":"Product-02.swift","caption":[],"type":"step","media":null}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. if expected "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" type data is coming as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", the data can be converted to expected type."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Decode\/Encode basic value types without type check"},{"anchor":"DecodeEncode-date-representations","stepsSection":[{"runtimePreview":null,"media":"Date.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify date formats represented in data."}]}],"caption":[],"code":null},{"runtimePreview":"Date.png","media":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type."}],"type":"paragraph"}],"caption":[],"code":"Date-01.swift"},{"runtimePreview":"Date.png","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Since1970DateCoder"},{"type":"text","text":" to decode\/encode UNIX timestamp."}]}],"caption":[],"code":"Date-02.swift"},{"runtimePreview":"Date.png","media":null,"type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"ISO8601DateCoder","type":"codeVoice"},{"text":" to decode\/encode date represented in ","type":"text"},{"code":"ISO8601","type":"codeVoice"},{"text":" standard.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"Date-03.swift"},{"runtimePreview":"Date.png","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"DateCoder","type":"codeVoice"},{"text":" to decode\/encode date represented in custom formats by providing the formatter.","type":"text"}]}],"caption":[],"code":"Date-04.swift"}],"contentSection":[{"content":[{"inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"type":"codeVoice","code":"ISO8601"},{"text":" like text formats.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Decode\/Encode date representations"},{"anchor":"DecodeEncode-sequence-of-values","stepsSection":[{"media":"Data.png","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data.","type":"text"}]}],"type":"step","code":null},{"media":null,"caption":[],"runtimePreview":"Data.png","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as the required sequence type."}],"type":"paragraph"}],"type":"step","code":"Data-01.swift"},{"media":null,"caption":[],"runtimePreview":"Data.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"SequenceCoder","type":"codeVoice"},{"text":" and provide ","type":"text"},{"code":"elementHelper","type":"codeVoice"},{"text":" ","type":"text"},{"code":"HelperCoder","type":"codeVoice"},{"text":" to customize decoding\/encoding of each element.","type":"text"}]}],"type":"step","code":"Data-02.swift"},{"media":null,"caption":[],"runtimePreview":"Data.png","content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"code":"lossy","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"configuration","type":"codeVoice"},{"text":" to ignore invalid element data instead of failing.","type":"text"}],"type":"paragraph"}],"type":"step","code":"Data-03.swift"},{"media":null,"caption":[],"runtimePreview":"Data.png","content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to be used in case provided data is not of sequence type or empty sequence data provided.","type":"text"}],"type":"paragraph"}],"type":"step","code":"Data-04.swift"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Decode\/Encode sequence of values"},{"anchor":"Create-custom-advanced-customizations","stepsSection":[{"runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}]}],"media":"User.png","type":"step","code":null},{"runtimePreview":"User.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields according to the data."}]}],"media":null,"type":"step","code":"User-01.swift"},{"runtimePreview":"User.png","caption":[],"content":[{"inlineContent":[{"text":"Create custom ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" type that accepts decoding and encoding key values.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"User-02.swift"},{"runtimePreview":"User.png","caption":[],"content":[{"inlineContent":[{"text":"Create custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"User-03.swift"},{"runtimePreview":"User.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":" implementations for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","type":"reference","isActive":true},{"text":" for decoding and encoding with provided key values.","type":"text"}]}],"media":null,"type":"step","code":"User-04.swift"},{"runtimePreview":"User.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the created custom "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"type":"text","text":" with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"type":"text","text":" macro to use the decoding\/encoding customization."}]}],"media":null,"type":"step","code":"User-05.swift"},{"runtimePreview":"User.png","caption":[],"content":[{"inlineContent":[{"text":"Apply ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro without any arguments, to the property to pass the type’s ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" argument to the custom ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"User-06.swift"}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}]}],"kind":"contentAndMedia"}],"title":"Create custom advanced customizations"}],"kind":"tasks"},{"featuredEyebrow":"Tutorial","action":{"isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","type":"reference"},"abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"title":"Represent dynamic data variations with protocol","kind":"callToAction"}],"references":{"User-06.swift":{"syntax":"swift","highlights":[{"line":11}],"content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","identifier":"User-06.swift","fileType":"swift","fileName":"User.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","title":"encode(_:to:)","url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7EncoderP","text":"Encoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"required":true,"abstract":[{"text":"Encodes given value of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type to the provided ","type":"text"},{"type":"codeVoice","code":"encoder"},{"type":"text","text":"."}],"role":"symbol","defaultImplementations":2},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"User.png":{"type":"image","alt":"User data with different key in decoding and encoding","variants":[{"traits":["1x","light"],"url":"\/images\/User.png"},{"traits":["1x","dark"],"url":"\/images\/User~dark.png"}],"identifier":"User.png"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","kind":"article","type":"topic","abstract":[],"role":"article"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","url":"\/tutorials\/metacodable\/dynamic"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol"},"Date-03.swift":{"syntax":"swift","highlights":[{"line":9}],"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"type":"file","identifier":"Date-03.swift","fileType":"swift","fileName":"Date.swift"},"Product-02.swift":{"syntax":"swift","highlights":[{"line":2},{"line":6},{"line":8}],"content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"type":"file","identifier":"Product-02.swift","fileType":"swift","fileName":"Product.swift"},"User-01.swift":{"syntax":"swift","highlights":[],"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"type":"file","identifier":"User-01.swift","fileType":"swift","fileName":"User.swift"},"User-04.swift":{"fileName":"User.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift","identifier":"User-04.swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"url":"\/tutorials\/metacodable\/enum","title":"Represent variations in data","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"title":"Create Codable type and customize CodingKey of fields","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper"},"User-05.swift":{"syntax":"swift","type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","fileName":"User.swift","identifier":"User-05.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol"},"Xcode 15 or later":{"type":"xcodeRequirement","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"required":true,"title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"title":"Customize field decoding\/encoding","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","title":"Use with general-purpose Swift types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"Date-01.swift":{"syntax":"swift","highlights":[],"content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","identifier":"Date-01.swift","fileType":"swift","fileName":"Date.swift"},"Data-01.swift":{"syntax":"swift","highlights":[],"content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"type":"file","identifier":"Data-01.swift","fileType":"swift","fileName":"Data.swift"},"Date-02.swift":{"syntax":"swift","highlights":[{"line":3},{"line":7}],"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","identifier":"Date-02.swift","fileType":"swift","fileName":"Date.swift"},"Product-01.swift":{"fileName":"Product.swift","type":"file","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"highlights":[],"syntax":"swift","identifier":"Product-01.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"}],"type":"topic","title":"decode(from:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","role":"symbol","required":true,"abstract":[{"text":"Decodes a value of the ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type from the given ","type":"text"},{"type":"codeVoice","code":"decoder"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","kind":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"topic","role":"symbol"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformances faster than ever before.","type":"text"}],"kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage"},"User-02.swift":{"syntax":"swift","type":"file","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"fileType":"swift","fileName":"User.swift","identifier":"User-02.swift"},"Data-03.swift":{"syntax":"swift","type":"file","highlights":[{"line":9},{"line":10}],"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"fileType":"swift","fileName":"Data.swift","identifier":"Data-03.swift"},"Data.png":{"alt":"Base64 data sequence data","type":"image","identifier":"Data.png","variants":[{"url":"\/images\/Data.png","traits":["1x","light"]},{"url":"\/images\/Data~dark.png","traits":["1x","dark"]}]},"Product.png":{"type":"image","alt":"List of products with inconsistent property types","variants":[{"traits":["1x","light"],"url":"\/images\/Product.png"},{"traits":["1x","dark"],"url":"\/images\/Product~dark.png"}],"identifier":"Product.png"},"Data-04.swift":{"syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"type":"file","identifier":"Data-04.swift","fileType":"swift","fileName":"Data.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"Date.png":{"alt":"Data with date formats varying for each property","type":"image","identifier":"Date.png","variants":[{"traits":["1x","light"],"url":"\/images\/Date.png"},{"traits":["1x","dark"],"url":"\/images\/Date~dark.png"}]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"title":"MetaCodable essentials","kind":"article","role":"article","type":"topic","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"Date-04.swift":{"fileName":"Date.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"syntax":"swift","identifier":"Date-04.swift","fileType":"swift"},"Data-02.swift":{"fileName":"Data.swift","type":"file","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"syntax":"swift","identifier":"Data-02.swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","title":"HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"User-03.swift":{"fileName":"User.swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift","identifier":"User-03.swift","fileType":"swift"}}}