{"metadata":{"category":"Discover MetaCodable","role":"project","title":"Add common decoding\/encoding customizations","categoryPathComponent":"Usage"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[{"title":"Add common decoding\/encoding customizations","chapter":"Advanced MetaCodable","estimatedTimeInMinutes":20,"kind":"hero","xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]}]},{"tasks":[{"stepsSection":[{"media":"Product.png","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with unpredictable type and can be mapped to an expected type.","type":"text"}]}],"type":"step","code":null},{"caption":[],"code":"Product-01.swift","media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"type":"step","runtimePreview":"Product.png"},{"caption":[],"code":"Product-02.swift","runtimePreview":"Product.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"ValueCoder","type":"codeVoice"},{"type":"text","text":" on properties to indicate the type mapping transformation."}]}],"media":null}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. if expected "},{"code":"Int","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"Bool","type":"codeVoice"},{"text":" type data is coming as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", the data can be converted to expected type.","type":"text"}]}]}],"title":"Decode\/Encode basic value types without type check","anchor":"DecodeEncode-basic-value-types-without-type-check"},{"anchor":"DecodeEncode-date-representations","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through decoding\/encoding "},{"type":"codeVoice","code":"Date"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"type":"codeVoice","code":"ISO8601"},{"text":" like text formats.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":"Date.png","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify date formats represented in data.","type":"text"}]}],"code":null,"runtimePreview":null},{"runtimePreview":"Date.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"text":" type with the fields as ","type":"text"},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type."}]}],"code":"Date-01.swift","media":null,"type":"step"},{"caption":[],"media":null,"type":"step","code":"Date-02.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Since1970DateCoder"},{"text":" to decode\/encode UNIX timestamp.","type":"text"}]}],"runtimePreview":"Date.png"},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ISO8601DateCoder"},{"type":"text","text":" to decode\/encode date represented in "},{"code":"ISO8601","type":"codeVoice"},{"type":"text","text":" standard."}],"type":"paragraph"}],"type":"step","media":null,"code":"Date-03.swift","runtimePreview":"Date.png","caption":[]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"DateCoder"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}]}],"caption":[],"runtimePreview":"Date.png","code":"Date-04.swift"}],"title":"Decode\/Encode date representations"},{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}]}],"mediaPosition":"trailing"}],"title":"Decode\/Encode sequence of values","stepsSection":[{"runtimePreview":null,"caption":[],"code":null,"media":"Data.png","content":[{"inlineContent":[{"text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data.","type":"text"}],"type":"paragraph"}],"type":"step"},{"caption":[],"runtimePreview":"Data.png","code":"Data-01.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as the required sequence type.","type":"text"}]}]},{"media":null,"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"SequenceCoder"},{"type":"text","text":" and provide "},{"type":"codeVoice","code":"elementHelper"},{"type":"text","text":" "},{"code":"HelperCoder","type":"codeVoice"},{"text":" to customize decoding\/encoding of each element.","type":"text"}],"type":"paragraph"}],"code":"Data-02.swift","runtimePreview":"Data.png","caption":[],"type":"step"},{"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"code":"lossy","type":"codeVoice"},{"type":"text","text":" in "},{"code":"configuration","type":"codeVoice"},{"type":"text","text":" to ignore invalid element data instead of failing."}],"type":"paragraph"}],"media":null,"caption":[],"type":"step","code":"Data-03.swift","runtimePreview":"Data.png"},{"type":"step","runtimePreview":"Data.png","media":null,"code":"Data-04.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value in ","type":"text"},{"code":"configuration","type":"codeVoice"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}]}],"caption":[]}],"anchor":"DecodeEncode-sequence-of-values"},{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library."}],"type":"paragraph"},{"inlineContent":[{"text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}],"anchor":"Create-custom-advanced-customizations","title":"Create custom advanced customizations","stepsSection":[{"code":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}]}],"type":"step","runtimePreview":null,"media":"User.png"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields according to the data.","type":"text"}]}],"type":"step","media":null,"code":"User-01.swift","runtimePreview":"User.png","caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Create custom "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":" type that accepts decoding and encoding key values.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"caption":[],"code":"User-02.swift","runtimePreview":"User.png"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"code":"CodingKey","type":"codeVoice"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}]}],"caption":[],"media":null,"code":"User-03.swift","runtimePreview":"User.png"},{"media":null,"runtimePreview":"User.png","type":"step","code":"User-04.swift","content":[{"inlineContent":[{"type":"text","text":"Provide "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" implementations for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},{"type":"text","text":" and "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","isActive":true,"type":"reference"},{"type":"text","text":" for decoding and encoding with provided key values."}],"type":"paragraph"}],"caption":[]},{"media":null,"type":"step","caption":[],"code":"User-05.swift","runtimePreview":"User.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the created custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to use the decoding\/encoding customization."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" macro without any arguments, to the property to pass the type’s "},{"code":"init(from:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" argument to the custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":"."}]}],"type":"step","media":null,"runtimePreview":"User.png","caption":[],"code":"User-06.swift"}]}],"kind":"tasks"},{"title":"Represent dynamic data variations with protocol","featuredEyebrow":"Tutorial","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"action":{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}]},"kind":"callToAction"}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"kind":"project","variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"Data-04.swift":{"identifier":"Data-04.swift","fileName":"Data.swift","type":"file","highlights":[{"line":10},{"line":11},{"line":12}],"syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([]),","            ]","        )","    )","    let messages: [Data]","}"],"fileType":"swift"},"Date-03.swift":{"identifier":"Date-03.swift","fileName":"Date.swift","type":"file","syntax":"swift","fileType":"swift","highlights":[{"line":9}],"content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"]},"Date-02.swift":{"type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"fileType":"swift","fileName":"Date.swift","identifier":"Date-02.swift","highlights":[{"line":2},{"line":7}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"User-05.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-05.swift","fileName":"User.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift"},"Date-01.swift":{"fileType":"swift","type":"file","syntax":"swift","highlights":[],"content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"identifier":"Date-01.swift","fileName":"Date.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"title":"Decode\/Encode sequence of values","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Data-01.swift":{"fileType":"swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"identifier":"Data-01.swift","fileName":"Data.swift","highlights":[],"syntax":"swift"},"User.png":{"type":"image","identifier":"User.png","alt":"User data with different key in decoding and encoding","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/User.png"},{"url":"\/images\/MetaCodable\/User~dark.png","traits":["1x","dark"]}]},"Date.png":{"type":"image","identifier":"Date.png","alt":"Data with date formats varying for each property","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Date.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Date~dark.png"}]},"Product.png":{"type":"image","identifier":"Product.png","alt":"List of products with inconsistent property types","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Product.png"},{"url":"\/images\/MetaCodable\/Product~dark.png","traits":["1x","dark"]}]},"Product-02.swift":{"fileType":"swift","type":"file","content":["import HelperCoders","import MetaCodable","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"identifier":"Product-02.swift","fileName":"Product.swift","highlights":[{"line":1},{"line":6},{"line":8}],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"estimatedTime":"20min","title":"Represent dynamic data variations with protocol","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","role":"project","url":"\/tutorials\/metacodable\/dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"url":"\/documentation\/metacodable\/codedby(_:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","kind":"symbol","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"type":"text","text":" instance."}],"title":"CodedBy(_:)"},"User-06.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-06.swift","fileName":"User.swift","highlights":[{"line":11}],"syntax":"swift"},"Data-03.swift":{"fileType":"swift","type":"file","syntax":"swift","highlights":[{"line":9},{"line":10}],"content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"identifier":"Data-03.swift","fileName":"Data.swift"},"Product-01.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"identifier":"Product-01.swift","fileName":"Product.swift","highlights":[],"syntax":"swift"},"Xcode 15 or later":{"type":"xcodeRequirement","title":"Xcode 15 or later","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","title":"Represent variations in data","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"User-04.swift":{"fileType":"swift","type":"file","syntax":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-04.swift","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"title":"Share common Codable fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"CodedAt(_:)","role":"symbol","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Coded"}],"url":"\/documentation\/metacodable\/helpercoder\/coded","required":true,"type":"topic","title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","role":"symbol"},"Data-02.swift":{"fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"identifier":"Data-02.swift","fileName":"Data.swift","highlights":[{"line":2},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"syntax":"swift"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"title":"Advanced MetaCodable","type":"topic","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","role":"article","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"kind":"symbol","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Encoder","preciseIdentifier":"s:s7EncoderP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"abstract":[{"text":"Encodes given value of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference"},{"type":"text","text":" type to the provided "},{"type":"codeVoice","code":"encoder"},{"text":".","type":"text"}],"defaultImplementations":2,"title":"encode(_:to:)","type":"topic","url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"title":"Create dynamic variation Codable types","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"User-03.swift":{"fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"identifier":"User-03.swift","fileName":"User.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"syntax":"swift"},"User-02.swift":{"type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"User-02.swift","fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"]},"User-01.swift":{"highlights":[],"identifier":"User-01.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"fileName":"User.swift","type":"file"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"title":"Decode\/Encode basic value types without type check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"url":"\/documentation\/metacodable\/helpercoder","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HelperCoder","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","title":"HelperCoder"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"section"},"Data.png":{"variants":[{"url":"\/images\/MetaCodable\/Data.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Data~dark.png"}],"alt":"Base64 data sequence data","type":"image","identifier":"Data.png"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"type":"topic","title":"MetaCodable essentials","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"Date-04.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"identifier":"Date-04.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"fileName":"Date.swift","type":"file"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"type":"topic","title":"decode(from:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"decode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": any ","kind":"text"},{"preciseIdentifier":"s:s7DecoderP","text":"Decoder","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","kind":"typeIdentifier"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","abstract":[{"text":"Decodes a value of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type from the given "},{"code":"decoder","type":"codeVoice"},{"text":".","type":"text"}],"required":true,"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","kind":"project","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"estimatedTime":"10min","type":"topic"}}}