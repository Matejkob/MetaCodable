{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Represent variations in data","category":"Discover MetaCodable","categoryPathComponent":"Usage","role":"project"},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","interfaceLanguage":"swift"},"variants":[{"paths":["\/tutorials\/metacodable\/enum"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]}],"estimatedTimeInMinutes":10,"kind":"hero","xcodeRequirement":"Xcode 15 or later","title":"Represent variations in data","chapter":"MetaCodable essentials"},{"kind":"tasks","tasks":[{"stepsSection":[{"runtimePreview":null,"caption":[],"media":"Command-01.png","content":[{"inlineContent":[{"type":"text","text":"Identify all the variations and the tags representing variations."}],"type":"paragraph"}],"code":null,"type":"step"},{"caption":[],"type":"step","code":"Command-01.swift","runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case representing each variation, with case name synonymous to tag value."}]}],"media":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}]}],"media":null,"code":"Command-02.swift","runtimePreview":"Command-01.png","type":"step"},{"type":"step","media":null,"runtimePreview":"Command-01.png","code":"Command-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value."}]}],"caption":[]},{"type":"step","runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variation tag values can be declared explicitly by attaching "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true},{"text":" macro to the case.","type":"text"}]}],"media":null,"caption":[],"code":"Command-04.swift"},{"caption":[],"code":"Command-05.swift","content":[{"inlineContent":[{"type":"text","text":"In case of multiple variation data fields, variation specific "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" or "},{"code":"class","type":"codeVoice"},{"text":" type can be created, and created type can be added to enum-case as associated value without any label.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":"Command-01.png"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":" macros respectively.","type":"text"}],"type":"paragraph"}],"code":"Command-06.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"media":null,"runtimePreview":"Command-07.png","type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style per case while using different case style for associated value label."}]}],"code":"Command-07.swift"}],"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"This is default representation of ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":", where variation can be identified with the value of the key.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Since the data is keyed by the tag, variation is known before the content is being parsed.","type":"text"}]}],"mediaPosition":"trailing"}],"title":"Create Codable enums with external tag","anchor":"Create-Codable-enums-with-external-tag"},{"anchor":"Create-Codable-enums-with-internal-tag","stepsSection":[{"caption":[],"code":null,"media":"Command-08.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the field for the tag value."}]}],"runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Command-08.png","type":"step","code":"Command-02.swift","media":null,"caption":[]},{"type":"step","caption":[],"code":"Command-08.swift","media":null,"runtimePreview":"Command-08.png","content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name.","type":"text"}]}]},{"media":null,"caption":[],"code":"Command-09.swift","runtimePreview":"Command-08.png","content":[{"inlineContent":[{"text":"If tag value type differs from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type, specify explicitly with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference","isActive":true},{"type":"text","text":" macro attached to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition."}],"type":"paragraph"}],"type":"step"},{"caption":[],"media":null,"code":"Command-10.swift","runtimePreview":"Command-08.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"If tag values differ from case name, specify explicitly with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" macro attached to the case.","type":"text"}]}]}],"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag value identifying variant is inside the content, next to any other fields."}]},{"inlineContent":[{"type":"text","text":"The tag value is present at a specific field common across all the variations. "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supports any type of value for tag default being "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Create Codable enums with internal tag"},{"title":"Create Codable enums with adjacent tag","anchor":"Create-Codable-enums-with-adjacent-tag","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the fields for the tag and content value."}]}],"media":"Command-11.png","code":null,"type":"step","runtimePreview":null,"caption":[]},{"caption":[],"code":"Command-02.swift","runtimePreview":"Command-11.png","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}]}]},{"type":"step","media":null,"code":"Command-08.swift","runtimePreview":"Command-11.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name, similar to previous section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference"},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying content field name."}]}],"media":null,"runtimePreview":"Command-11.png","code":"Command-11.swift","type":"step","caption":[]},{"runtimePreview":"Command-12.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"type":"text","text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases."}]}],"media":null,"code":"Command-12.swift","caption":[]}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag and content are adjacent to each other as two fields in each variation."}]},{"inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"code":"MetaCodable","type":"codeVoice"},{"text":" supports any type of value for tag default being ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}]},{"title":"Add common decoding\/encoding customizations","action":{"isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"kind":"callToAction","featuredEyebrow":"Tutorial"}],"kind":"project","references":{"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"kind":"text","text":"("},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"text":"of the provided case format.","type":"text"}],"title":"CodingKeys(_:)","role":"symbol","kind":"symbol"},"Command-07.png":{"alt":"Command variations JSON representation","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-07.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-07~dark.png"}],"identifier":"Command-07.png"},"Command-11.png":{"alt":"Command variations JSON representation","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-11.png"},{"url":"\/images\/MetaCodable\/Command-11~dark.png","traits":["1x","dark"]}],"identifier":"Command-11.png"},"Command-08.png":{"alt":"Command variations JSON representation","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-08.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-08~dark.png"}],"identifier":"Command-08.png"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"title":"Advanced MetaCodable","type":"topic","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","role":"article","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"title":"IgnoreCodingInitialized()","kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"type":"topic","title":"MetaCodable essentials","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"title":"IgnoreCoding()","kind":"symbol","role":"symbol"},"Command-12.png":{"alt":"Command variations JSON representation","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-12.png"},{"url":"\/images\/MetaCodable\/Command-12~dark.png","traits":["1x","dark"]}],"identifier":"Command-12.png"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"CodedAt(_:)","role":"symbol","kind":"symbol"},"Command-12.swift":{"highlights":[{"line":9},{"line":10},{"line":11}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"type":"file","fileType":"swift","identifier":"Command-12.swift","syntax":"swift","fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"title":"Create dynamic variation Codable types","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"title":"Decode\/Encode basic value types without type check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"text":"to be decoded\/encoded at the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol"},"Command-08.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","highlights":[{"line":4}],"identifier":"Command-08.swift","syntax":"swift","fileName":"Command.swift"},"Command-01.swift":{"highlights":[],"content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"type":"file","fileType":"swift","identifier":"Command-01.swift","syntax":"swift","fileName":"Command.swift"},"Command-11.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","highlights":[{"line":5}],"identifier":"Command-11.swift","syntax":"swift","fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","kind":"project","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"estimatedTime":"10min","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","kind":"symbol","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"title":"Decode\/Encode sequence of values","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Command-05.swift":{"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file","fileType":"swift","identifier":"Command-05.swift","syntax":"swift","fileName":"Command.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"topic","url":"\/documentation\/metacodable\/codedas()","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"title":"CodedAs()","role":"symbol","kind":"symbol"},"Command-02.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","highlights":[],"identifier":"Command-02.swift","syntax":"swift","fileName":"Command.swift"},"Command-04.swift":{"highlights":[{"line":5},{"line":6}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","identifier":"Command-04.swift","syntax":"swift","fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreDecoding()"},"Command-01.png":{"alt":"Command variations JSON representation","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-01.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-01~dark.png"}],"identifier":"Command-01.png"},"Xcode 15 or later":{"type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later","identifier":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"estimatedTime":"20min","title":"Represent dynamic data variations with protocol","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","role":"project","url":"\/tutorials\/metacodable\/dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"Command-07.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file","highlights":[{"line":8},{"line":9},{"line":10}],"identifier":"Command-07.swift","syntax":"swift","fileName":"Command.swift"},"Command-06.swift":{"highlights":[{"line":8},{"line":9}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file","fileType":"swift","identifier":"Command-06.swift","syntax":"swift","fileName":"Command.swift"},"Command-03.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file","highlights":[{"line":5}],"identifier":"Command-03.swift","syntax":"swift","fileName":"Command.swift"},"Command-09.swift":{"highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","identifier":"Command-09.swift","syntax":"swift","fileName":"Command.swift"},"Command-10.swift":{"fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"],"type":"file","highlights":[{"line":7},{"line":9}],"identifier":"Command-10.swift","syntax":"swift","fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","title":"Represent variations in data","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"title":"Share common Codable fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"title":"CodedAs(_:_:)","role":"symbol","kind":"symbol"}}}