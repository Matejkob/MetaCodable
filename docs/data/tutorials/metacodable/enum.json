{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/enum"]}],"kind":"project","sections":[{"xcodeRequirement":"Xcode 15 or later","content":[{"inlineContent":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"title":"Represent variations in data","kind":"hero","chapter":"MetaCodable essentials","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This is default representation of "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" in "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":", where variation can be identified with the value of the key."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the data is keyed by the tag, variation is known before the content is being parsed."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"media":"Command-01.png","runtimePreview":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all the variations and the tags representing variations."}]}],"code":null,"type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case representing each variation, with case name synonymous to tag value.","type":"text"}]}],"code":"Command-01.swift","type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}]}],"code":"Command-02.swift","type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value."}],"type":"paragraph"}],"code":"Command-03.swift","type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"inlineContent":[{"text":"Variation tag values can be declared explicitly by attaching ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" macro to the case.","type":"text"}],"type":"paragraph"}],"code":"Command-04.swift","type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"In case of multiple variation data fields, variation specific ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" type can be created, and created type can be added to enum-case as associated value without any label.","type":"text"}]}],"code":"Command-05.swift","type":"step"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" macros respectively."}]}],"code":"Command-06.swift","type":"step"},{"media":null,"runtimePreview":"Command-07.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style per case while using different case style for associated value label."}]}],"code":"Command-07.swift","type":"step"}],"anchor":"Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag value identifying variant is inside the content, next to any other fields."}]},{"type":"paragraph","inlineContent":[{"text":"The tag value is present at a specific field common across all the variations. ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" supports any type of value for tag default being ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}]}]}],"stepsSection":[{"type":"step","code":null,"media":"Command-08.png","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Identify all the variations by the tags representing variations and the field for the tag value.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"Command-02.swift","media":null,"runtimePreview":"Command-08.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}]}]},{"type":"step","code":"Command-08.swift","media":null,"runtimePreview":"Command-08.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition with value specifying tag field name."}]}]},{"type":"step","code":"Command-09.swift","media":null,"runtimePreview":"Command-08.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"If tag value type differs from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type, specify explicitly with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference"},{"text":" macro attached to ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" type definition.","type":"text"}]}]},{"type":"step","code":"Command-10.swift","media":null,"runtimePreview":"Command-08.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"If tag values differ from case name, specify explicitly with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true},{"type":"text","text":" macro attached to the case."}],"type":"paragraph"}]}],"anchor":"Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag and content are adjacent to each other as two fields in each variation."}]},{"type":"paragraph","inlineContent":[{"text":"The tag and content fields are common across all the variations. ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" supports any type of value for tag default being ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Identify all the variations by the tags representing variations and the fields for the tag and content value.","type":"text"}]}],"media":"Command-11.png"},{"runtimePreview":"Command-11.png","type":"step","caption":[],"code":"Command-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}]}],"media":null},{"runtimePreview":"Command-11.png","type":"step","caption":[],"code":"Command-08.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" type definition with value specifying tag field name, similar to previous section.","type":"text"}]}],"media":null},{"runtimePreview":"Command-11.png","type":"step","caption":[],"code":"Command-11.swift","content":[{"inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition with value specifying content field name."}],"type":"paragraph"}],"media":null},{"runtimePreview":"Command-12.png","type":"step","caption":[],"code":"Command-12.swift","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases.","type":"text"}],"type":"paragraph"}],"media":null}],"anchor":"Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"}]},{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},"title":"Add common decoding\/encoding customizations","kind":"callToAction","featuredEyebrow":"Tutorial"}],"hierarchy":{"modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"categoryPathComponent":"Usage","title":"Represent variations in data","role":"project","category":"Discover MetaCodable"},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","interfaceLanguage":"swift"},"references":{"Command-05.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"Command-05.swift"},"Command-02.swift":{"type":"file","highlights":[],"fileType":"swift","identifier":"Command-02.swift","syntax":"swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"Command-11.swift":{"type":"file","highlights":[{"line":5}],"fileType":"swift","identifier":"Command-11.swift","syntax":"swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"Command-08.swift":{"type":"file","highlights":[{"line":4}],"fileType":"swift","identifier":"Command-08.swift","syntax":"swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"Command-11.png":{"type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Command-11.png"},{"traits":["1x","dark"],"url":"\/images\/Command-11~dark.png"}],"alt":"Command variations JSON representation","identifier":"Command-11.png"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"title":"Create Codable type and customize CodingKey of fields","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"Xcode 15 or later":{"type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later","title":"Xcode 15 or later"},"Command-06.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9}],"identifier":"Command-06.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol"},"Command-03.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"],"highlights":[{"line":5}],"identifier":"Command-03.swift"},"Command-01.png":{"type":"image","variants":[{"url":"\/images\/Command-01.png","traits":["1x","light"]},{"url":"\/images\/Command-01~dark.png","traits":["1x","dark"]}],"alt":"Command variations JSON representation","identifier":"Command-01.png"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"kind":"symbol"},"Command-07.png":{"type":"image","variants":[{"url":"\/images\/Command-07.png","traits":["1x","light"]},{"url":"\/images\/Command-07~dark.png","traits":["1x","dark"]}],"alt":"Command variations JSON representation","identifier":"Command-07.png"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","url":"\/tutorials\/metacodable\/dynamic"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"title":"ContentAt(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","kind":"article","type":"topic","abstract":[],"role":"article"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"type":"text","text":" "},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"title":"CodedAs()","url":"\/documentation\/metacodable\/codedas()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"topic","role":"symbol"},"Command-09.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"highlights":[{"line":5}],"identifier":"Command-09.swift"},"Command-12.png":{"type":"image","variants":[{"url":"\/images\/Command-12.png","traits":["1x","light"]},{"url":"\/images\/Command-12~dark.png","traits":["1x","dark"]}],"alt":"Command variations JSON representation","identifier":"Command-12.png"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"title":"MetaCodable essentials","kind":"article","role":"article","type":"topic","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"title":"IgnoreDecoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","kind":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"role":"symbol"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformances faster than ever before.","type":"text"}],"kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage"},"Command-12.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"highlights":[{"line":9},{"line":10},{"line":11}],"identifier":"Command-12.swift"},"Command-07.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9},{"line":10}],"identifier":"Command-07.swift"},"Command-08.png":{"type":"image","variants":[{"url":"\/images\/Command-08.png","traits":["1x","light"]},{"url":"\/images\/Command-08~dark.png","traits":["1x","dark"]}],"alt":"Command variations JSON representation","identifier":"Command-08.png"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"url":"\/documentation\/metacodable\/codedat(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"title":"CodedAt(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"title":"Customize field decoding\/encoding","kind":"section","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"text":"This tutorial guides you through","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},"Command-04.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"highlights":[{"line":5},{"line":6}],"identifier":"Command-04.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"Command-10.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"],"highlights":[{"line":7},{"line":9}],"identifier":"Command-10.swift"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"role":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"type":"topic","url":"\/documentation\/metacodable\/codingkeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"url":"\/tutorials\/metacodable\/enum","title":"Represent variations in data","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","title":"Use with general-purpose Swift types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","kind":"project","estimatedTime":"10min","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"Command-01.swift":{"fileType":"swift","fileName":"Command.swift","syntax":"swift","type":"file","content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"highlights":[],"identifier":"Command-01.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"title":"CodedAs(_:_:)","url":"\/documentation\/metacodable\/codedas(_:_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","role":"symbol"}}}