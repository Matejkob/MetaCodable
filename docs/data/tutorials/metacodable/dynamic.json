{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/dynamic"]}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","interfaceLanguage":"swift"},"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}]}]},"sections":[{"content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"type":"paragraph"}],"title":"Represent dynamic data variations with protocol","kind":"hero","chapter":"Advanced MetaCodable","estimatedTimeInMinutes":20,"xcodeRequirement":"Xcode 15 or later"},{"kind":"tasks","tasks":[{"stepsSection":[{"caption":[],"type":"step","code":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Identify all the variations and the tags representing variations."}],"type":"paragraph"}],"media":"DynamicPost-01.png"},{"code":"DynamicPost-01.swift","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create protocol containing common fields across all the data variations."}],"type":"paragraph"}],"type":"step","runtimePreview":"DynamicPost-01.png"},{"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" attribute to this protocol.","type":"text"}]}],"code":"DynamicPost-02.swift","caption":[],"type":"step"},{"caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-03.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types with each type representing a variation.","type":"text"}]}],"media":null,"type":"step"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform common data protocol for each variant data type."}]}],"media":null,"code":"DynamicPost-04.swift","runtimePreview":"DynamicPost-01.png"},{"code":"DynamicPost-05.swift","runtimePreview":"DynamicPost-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"type":"text","text":" conformance for each variant data type, with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","isActive":true},{"text":" returning variant tag.","type":"text"}]}],"type":"step","media":null},{"caption":[],"runtimePreview":"DynamicPost-02.png","type":"step","media":null,"code":"DynamicPost-06.swift","content":[{"inlineContent":[{"type":"text","text":"Provide multiple variant tags in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"},{"type":"text","text":" in case of multiple tags used to represent same variation."}],"type":"paragraph"}]},{"media":null,"caption":[],"type":"step","runtimePreview":"DynamicPost-02.png","code":"DynamicPost-07.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore specific type from decoding or encoding or both by attaching "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" macros respectively."}]}]},{"code":"DynamicPost-08.swift","type":"step","caption":[],"runtimePreview":"DynamicPost-03.png","content":[{"type":"paragraph","inlineContent":[{"text":"In case of internally tagged data, attach ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro to "},{"code":"protocol","type":"codeVoice"},{"text":" declaration with value specifying tag field name.","type":"text"}]}],"media":null},{"content":[{"inlineContent":[{"text":"In case of adjacently tagged data, additionally attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference","isActive":true},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"protocol"},{"text":" declaration with value specifying content field name.","type":"text"}],"type":"paragraph"}],"runtimePreview":"DynamicPost-04.png","code":"DynamicPost-09.swift","caption":[],"media":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin to target to handle code generation.","type":"text"}]}],"runtimePreview":"Plugin.png","type":"step","caption":[],"media":null,"code":"Plugin.swift"},{"media":null,"type":"step","code":"Page.swift","runtimePreview":"Page.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use generated "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" for protocol to decode\/encode dynamic type.","type":"text"}]}],"caption":[]}],"anchor":"Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Similar to "},{"type":"reference","overridingTitleInlineContent":[{"text":"enums","type":"text"}],"isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","overridingTitle":"enums"},{"text":" external, internal and adjacently tagged data variations are supported with default being externally tagged data.","type":"text"}],"type":"paragraph"}]}]},{"title":"Customize dynamic data variations detection","anchor":"Customize-dynamic-data-variations-detection","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" build tool plugin to target to handle code generation."}]}],"media":null,"code":"Plugin.swift","caption":[],"runtimePreview":"Plugin.png"},{"code":"meta_codable_config-01.json","content":[{"inlineContent":[{"type":"text","text":"Create "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","isActive":true,"type":"reference"},{"type":"text","text":" file in the target plugin is included."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","media":null,"caption":[]},{"code":"meta_codable_config-02.json","runtimePreview":"MetaCodableConfig.png","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan","isActive":true},{"type":"text","text":" mode in "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","isActive":true,"type":"reference"},{"type":"text","text":" file to control source files accross dependency targets scanned for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" protocol variation data.","type":"text"}]}],"media":null}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Customize "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin code generation.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}]}],"metadata":{"title":"Represent dynamic data variations with protocol","categoryPathComponent":"Usage","category":"Discover MetaCodable","role":"project"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","references":{"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","kind":"project","url":"\/tutorials\/metacodable\/essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"estimatedTime":"10min","type":"topic"},"DynamicPost-09.swift":{"fileName":"Post.swift","identifier":"DynamicPost-09.swift","type":"file","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","protocol Post {","    var id: UUID { get }","}","","typealias Identifier =","    DynamicCodableIdentifier<String>","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: Identifier {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"highlights":[{"line":5}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"estimatedTime":"20min","title":"Represent dynamic data variations with protocol","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","role":"project","url":"\/tutorials\/metacodable\/dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"title":"Advanced MetaCodable","type":"topic","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","role":"article","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","role":"pseudoSymbol"},"DynamicPost-04.swift":{"content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":9},{"line":15},{"line":22},{"line":29}],"type":"file","identifier":"DynamicPost-04.swift","fileName":"Post.swift"},"Plugin.png":{"variants":[{"url":"\/images\/MetaCodable\/Plugin.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Plugin~dark.png","traits":["1x","dark"]}],"identifier":"Plugin.png","type":"image","alt":"Xcode build tool plugin settings"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","url":"\/documentation\/metacodable\/codable()","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"text":"to be decoded\/encoded at the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}],"kind":"symbol"},"DynamicPost-01.swift":{"content":["protocol Post {","    var id: UUID { get }","}"],"fileType":"swift","syntax":"swift","highlights":[],"type":"file","identifier":"DynamicPost-01.swift","fileName":"Post.swift"},"MetaCodableConfig.png":{"variants":[{"url":"\/images\/MetaCodable\/MetaCodableConfig.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/MetaCodableConfig~dark.png"}],"identifier":"MetaCodableConfig.png","type":"image","alt":"MetaCodableConfig.plist configuration file"},"DynamicPost-01.png":{"variants":[{"url":"\/images\/MetaCodable\/DynamicPost-01.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/DynamicPost-01~dark.png","traits":["1x","dark"]}],"identifier":"DynamicPost-01.png","type":"image","alt":"Post variations JSON representation"},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"abstract":[{"type":"text","text":"The configuration file providing additional customization options for "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" build tool plugin."}],"fragments":[{"text":"configuration","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"file"},{"text":" ","kind":"text"},{"text":"MetaCodableConfig","kind":"identifier"}],"role":"symbol","url":"\/documentation\/metacodable\/metacodableconfig","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","kind":"symbol","type":"topic","title":"MetaCodableConfig"},"DynamicPost-02.png":{"variants":[{"url":"\/images\/MetaCodable\/DynamicPost-02.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/DynamicPost-02~dark.png"}],"identifier":"DynamicPost-02.png","type":"image","alt":"Post variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section"},"DynamicPost-06.swift":{"content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","typealias Identifier =","    DynamicCodableIdentifier<String>","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: Identifier {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":24}],"type":"file","identifier":"DynamicPost-06.swift","fileName":"Post.swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreDecoding()"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig/Scan":{"kind":"symbol","abstract":[{"text":"The source file scan option for ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin.","type":"text"}],"fragments":[{"kind":"keyword","text":"configuration"},{"text":" ","kind":"text"},{"text":"option","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"url":"\/documentation\/metacodable\/metacodableconfig\/scan","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan","title":"Scan","role":"symbol"},"meta_codable_config-02.json":{"fileName":"meta_codable_config.json","type":"file","identifier":"meta_codable_config-02.json","fileType":"json","syntax":"json","content":["{","    \"scan\": \"recursive\"","}"],"highlights":[{"line":1},{"line":2},{"line":3}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"title":"CodedAt(_:)","role":"symbol","kind":"symbol"},"Page.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/Page.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Page~dark.png","traits":["1x","dark"]}],"identifier":"Page.png","alt":"JSON representation of Page containing Posts"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","kind":"symbol","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"url":"\/documentation\/metacodable\/helpercoder","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"HelperCoder","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","navigatorTitle":[{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"kind":"symbol","title":"HelperCoder"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"section"},"DynamicPost-03.swift":{"fileName":"Post.swift","fileType":"swift","type":"file","syntax":"swift","identifier":"DynamicPost-03.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"project"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Coded"}],"url":"\/documentation\/metacodable\/helpercoder\/coded","required":true,"type":"topic","title":"Coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","role":"symbol"},"DynamicPost-07.swift":{"content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","typealias Identifier =","    DynamicCodableIdentifier<String>","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: Identifier {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16}],"type":"file","identifier":"DynamicPost-07.swift","fileName":"Post.swift"},"DynamicPost-08.swift":{"fileName":"Post.swift","type":"file","identifier":"DynamicPost-08.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","protocol Post {","    var id: UUID { get }","}","","typealias Identifier =","    DynamicCodableIdentifier<String>","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: Identifier {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"highlights":[{"line":4}]},"DynamicPost-02.swift":{"content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}"],"fileType":"swift","syntax":"swift","highlights":[{"line":1},{"line":2},{"line":3}],"type":"file","identifier":"DynamicPost-02.swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"title":"Decode\/Encode basic value types without type check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol"},"Xcode 15 or later":{"title":"Xcode 15 or later","type":"xcodeRequirement","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"title":"Create dynamic variation Codable types","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","title":"Represent variations in data","type":"topic","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","role":"project","url":"\/tutorials\/metacodable\/enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" conformances faster than ever before.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"title":"Share common Codable fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"role":"symbol","url":"\/documentation\/metacodable\/dynamiccodable\/identifier","abstract":[{"text":"The identifier value(s) for this type.","type":"text"}],"kind":"symbol","type":"topic","title":"identifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","required":true,"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"identifier","kind":"identifier"},{"text":": ","kind":"text"},{"text":"DynamicCodableIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11MetaCodable07DynamicB0P15IdentifierValueQa","kind":"typeIdentifier","text":"IdentifierValue"},{"kind":"text","text":">"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","kind":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"section"},"DynamicPost-03.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/DynamicPost-03.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/DynamicPost-03~dark.png"}],"identifier":"DynamicPost-03.png","alt":"Internally tagged Post variations JSON representation"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"type":"topic","title":"MetaCodable essentials","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section"},"Plugin.swift":{"fileName":"Package.swift","fileType":"swift","content":["import PackageDescription","","let appTarget = package.targets.first!","appTarget.plugins.append(","    .plugin(","        name: \"MetaProtocolCodable\",","        package: \"MetaCodable\"","    )",")"],"identifier":"Plugin.swift","type":"file","highlights":[],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"DynamicPost-04.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/DynamicPost-04.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/DynamicPost-04~dark.png","traits":["1x","dark"]}],"identifier":"DynamicPost-04.png","alt":"Adjacently tagged Post variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"title":"Decode\/Encode sequence of values","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"meta_codable_config-01.json":{"fileName":"meta_codable_config.json","type":"file","identifier":"meta_codable_config-01.json","fileType":"json","syntax":"json","content":["{}"],"highlights":[]},"DynamicPost-05.swift":{"fileName":"Post.swift","fileType":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","typealias Identifier =","    DynamicCodableIdentifier<String>","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"picture\"","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier: Identifier {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"identifier":"DynamicPost-05.swift","type":"file","highlights":[{"line":8},{"line":9},{"line":10},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48}],"syntax":"swift"},"Page.swift":{"fileName":"Page.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Page {","    @CodedBy(","        SequenceCoder(","            elementHelper: PostCoder()","        )","    )","    let content: [Post]","    let next: String","}"],"identifier":"Page.swift","type":"file","highlights":[],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","url":"\/documentation\/metacodable\/dynamiccodable","abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"title":"DynamicCodable","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"role":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"title":"IgnoreCoding()","kind":"symbol","role":"symbol"}}}