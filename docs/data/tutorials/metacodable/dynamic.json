{"sections":[{"estimatedTimeInMinutes":20,"kind":"hero","xcodeRequirement":"Xcode 15 or later","content":[{"inlineContent":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"type":"paragraph"}],"title":"Represent dynamic data variations with protocol","chapter":"Advanced MetaCodable"},{"kind":"tasks","tasks":[{"anchor":"Create-dynamic-variation-Codable-types","title":"Create dynamic variation Codable types","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Similar to ","type":"text"},{"isActive":true,"overridingTitle":"enums","type":"reference","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","overridingTitleInlineContent":[{"type":"text","text":"enums"}]},{"text":" external, internal and adjacently tagged data variations are supported with default being externally tagged data.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","caption":[],"media":"DynamicPost-01.png","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Identify all the variations and the tags representing variations.","type":"text"}]}],"code":null},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"type":"paragraph","inlineContent":[{"text":"Create protocol containing common fields across all the data variations.","type":"text"}]}],"code":"DynamicPost-01.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" attribute to this protocol.","type":"text"}],"type":"paragraph"}],"code":"DynamicPost-02.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with each type representing a variation."}],"type":"paragraph"}],"code":"DynamicPost-03.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform common data protocol for each variant data type."}]}],"code":"DynamicPost-04.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable"},{"type":"text","text":" conformance for each variant data type, with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"},{"type":"text","text":" returning variant tag."}]}],"code":"DynamicPost-05.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-02.png","content":[{"inlineContent":[{"text":"Provide multiple variant tags in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier"},{"text":" in case of multiple tags used to represent same variation.","type":"text"}],"type":"paragraph"}],"code":"DynamicPost-06.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-02.png","content":[{"type":"paragraph","inlineContent":[{"text":"Ignore specific type from decoding or encoding or both by attaching ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":" macros respectively.","type":"text"}]}],"code":"DynamicPost-07.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-03.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In case of internally tagged data, attach "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" declaration with value specifying tag field name."}]}],"code":"DynamicPost-08.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"DynamicPost-04.png","content":[{"inlineContent":[{"text":"In case of adjacently tagged data, additionally attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true,"type":"reference"},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"protocol"},{"text":" declaration with value specifying content field name.","type":"text"}],"type":"paragraph"}],"code":"DynamicPost-09.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"Plugin.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" build tool plugin to target to handle code generation."}]}],"code":"Plugin.swift"},{"type":"step","caption":[],"media":null,"runtimePreview":"Page.png","content":[{"inlineContent":[{"type":"text","text":"Use generated "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" for protocol to decode\/encode dynamic type."}],"type":"paragraph"}],"code":"Page.swift"}]},{"anchor":"Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Customize "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" build tool plugin code generation."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"media":null,"runtimePreview":"Plugin.png","caption":[],"code":"Plugin.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin to target to handle code generation.","type":"text"}]}],"type":"step"},{"media":null,"runtimePreview":null,"caption":[],"code":"meta_codable_config-01.json","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"},{"type":"text","text":" file in the target plugin is included."}],"type":"paragraph"}],"type":"step"},{"media":null,"runtimePreview":"MetaCodableConfig.png","caption":[],"code":"meta_codable_config-02.json","content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan","type":"reference","isActive":true},{"text":" mode in ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","type":"reference","isActive":true},{"text":" file to control source files accross dependency targets scanned for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" protocol variation data.","type":"text"}]}],"type":"step"}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","interfaceLanguage":"swift"},"kind":"project","metadata":{"categoryPathComponent":"Usage","category":"Discover MetaCodable","role":"project","title":"Represent dynamic data variations with protocol"},"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}]}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]]},"variants":[{"paths":["\/tutorials\/metacodable\/dynamic"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","type":"section","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Share common Codable fields","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"kind":"project","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"estimatedTime":"20min","type":"topic","title":"Represent dynamic data variations with protocol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic","role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"section","role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","title":"Coded","type":"topic","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"url":"\/documentation\/metacodable\/helpercoder\/coded"},"Page.swift":{"identifier":"Page.swift","type":"file","syntax":"swift","fileName":"Page.swift","content":["import MetaCodable","","@Codable","struct Page {","    @CodedBy(","        SequenceCoder(","            elementHelper: PostCoder()","        )","    )","    let content: [Post]","    let next: String","}"],"fileType":"swift","highlights":[]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","kind":"overview","title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","type":"topic","url":"\/tutorials\/usage"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","title":"Advanced MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"kind":"symbol","title":"identifier","required":true,"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO","kind":"typeIdentifier","text":"DynamicCodableIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"IdentifierValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"The identifier value(s) for this type."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","role":"symbol","url":"\/documentation\/metacodable\/dynamiccodable\/identifier"},"Plugin.swift":{"identifier":"Plugin.swift","type":"file","syntax":"swift","fileName":"Package.swift","content":["import PackageDescription","","let appTarget = package.targets.first!","appTarget.plugins.append(","    .plugin(","        name: \"MetaProtocolCodable\",","        package: \"MetaCodable\"","    )",")"],"fileType":"swift","highlights":[]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding."}],"title":"IgnoreDecoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}]},"DynamicPost-01.swift":{"identifier":"DynamicPost-01.swift","type":"file","syntax":"swift","fileName":"Post.swift","content":["protocol Post {","    var id: UUID { get }","}"],"fileType":"swift","highlights":[]},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig/Scan":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan","kind":"symbol","title":"Scan","type":"topic","fragments":[{"kind":"keyword","text":"configuration"},{"kind":"text","text":" "},{"kind":"keyword","text":"option"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scan"}],"abstract":[{"text":"The source file scan option for ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" build tool plugin."}],"url":"\/documentation\/metacodable\/metacodableconfig\/scan"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"title":"DynamicCodable","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"url":"\/documentation\/metacodable\/dynamiccodable"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","title":"Customize dynamic data variations detection","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection"},"DynamicPost-03.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/DynamicPost-03.png"},{"traits":["1x","dark"],"url":"\/images\/DynamicPost-03~dark.png"}],"identifier":"DynamicPost-03.png","type":"image","alt":"Internally tagged Post variations JSON representation"},"DynamicPost-08.swift":{"identifier":"DynamicPost-08.swift","type":"file","syntax":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","highlights":[{"line":4}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"section","title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol"},"DynamicPost-03.swift":{"syntax":"swift","type":"file","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"identifier":"DynamicPost-03.swift","fileType":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"section","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","role":"pseudoSymbol"},"Page.png":{"alt":"JSON representation of Page containing Posts","type":"image","identifier":"Page.png","variants":[{"url":"\/images\/Page.png","traits":["1x","light"]},{"url":"\/images\/Page~dark.png","traits":["1x","dark"]}]},"DynamicPost-02.swift":{"syntax":"swift","type":"file","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}"],"identifier":"DynamicPost-02.swift","fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3}]},"meta_codable_config-01.json":{"identifier":"meta_codable_config-01.json","type":"file","syntax":"json","fileName":"meta_codable_config.json","content":["{}"],"fileType":"json","highlights":[]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","kind":"symbol","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"HelperCoder"}],"abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"url":"\/documentation\/metacodable\/helpercoder"},"DynamicPost-04.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/DynamicPost-04.png"},{"traits":["1x","dark"],"url":"\/images\/DynamicPost-04~dark.png"}],"identifier":"DynamicPost-04.png","type":"image","alt":"Adjacently tagged Post variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"title":"Use with general-purpose Swift types","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields"},"meta_codable_config-02.json":{"identifier":"meta_codable_config-02.json","type":"file","syntax":"json","fileName":"meta_codable_config.json","content":["{","    \"scan\": \"recursive\"","}"],"fileType":"json","highlights":[{"line":1},{"line":2},{"line":3}]},"DynamicPost-02.png":{"alt":"Post variations JSON representation","type":"image","identifier":"DynamicPost-02.png","variants":[{"url":"\/images\/DynamicPost-02.png","traits":["1x","light"]},{"url":"\/images\/DynamicPost-02~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/enum"},"MetaCodableConfig.png":{"alt":"MetaCodableConfig.plist configuration file","type":"image","identifier":"MetaCodableConfig.png","variants":[{"url":"\/images\/MetaCodableConfig.png","traits":["1x","light"]},{"url":"\/images\/MetaCodableConfig~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","title":"ContentAt(_:_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"url":"\/documentation\/metacodable\/contentat(_:_:)"},"DynamicPost-09.swift":{"syntax":"swift","type":"file","fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"identifier":"DynamicPost-09.swift","fileType":"swift","highlights":[{"line":5}]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"type":"topic","role":"project","url":"\/tutorials\/metacodable\/helper"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"kind":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"type":"topic","title":"IgnoreEncoding()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"role":"pseudoSymbol","type":"section","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check"},"Plugin.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Plugin.png"},{"traits":["1x","dark"],"url":"\/images\/Plugin~dark.png"}],"identifier":"Plugin.png","type":"image","alt":"Xcode build tool plugin settings"},"DynamicPost-06.swift":{"identifier":"DynamicPost-06.swift","type":"file","syntax":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","highlights":[{"line":23}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"url":"\/documentation\/metacodable\/codable()","type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"title":"Codable()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}]},"DynamicPost-05.swift":{"syntax":"swift","type":"file","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"picture\"","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"identifier":"DynamicPost-05.swift","fileType":"swift","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}]},"DynamicPost-01.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/DynamicPost-01.png"},{"traits":["1x","dark"],"url":"\/images\/DynamicPost-01~dark.png"}],"identifier":"DynamicPost-01.png","type":"image","alt":"Post variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"title":"Create custom advanced customizations","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"DynamicPost-04.swift":{"identifier":"DynamicPost-04.swift","type":"file","syntax":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","highlights":[{"line":9},{"line":15},{"line":22},{"line":29}]},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","kind":"symbol","title":"MetaCodableConfig","type":"topic","fragments":[{"kind":"keyword","text":"configuration"},{"kind":"text","text":" "},{"kind":"keyword","text":"file"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaCodableConfig"}],"abstract":[{"text":"The configuration file providing additional customization options for ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" build tool plugin."}],"url":"\/documentation\/metacodable\/metacodableconfig"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":"...)","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"DynamicPost-07.swift":{"identifier":"DynamicPost-07.swift","type":"file","syntax":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"],"fileType":"swift","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"title":"Create Codable enums with internal tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","abstract":[],"kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","url":"\/tutorials\/usage\/metacodable-essentials","title":"MetaCodable essentials"}}}