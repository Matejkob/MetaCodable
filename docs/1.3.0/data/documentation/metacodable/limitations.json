{"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Currently all the limitations of this library and possible workarounds and future plans are listed below. Most of these limitations depend on the data "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" provides to "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true,"type":"reference"},{"type":"text","text":" to perform macro expansion."}],"type":"paragraph"},{"anchor":"Why-strict-typing-is-necessary","text":"Why strict typing is necessary?","level":3,"type":"heading"},{"inlineContent":[{"code":"Swift","type":"codeVoice"},{"text":" compiler doesn’t provide any type inference data to macros, so to know type of variables ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" needs types to be explicitly specified in the code. i.e. following code will not work and will cause error while macro expansion:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","struct Model {","    let value = 1","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is due to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" unable to determine the type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":", by specifying the type explicitly expansion is performed successfully:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","struct Model {","    let value: Int = 1","}"],"type":"codeListing"},{"anchor":"Why-super-class-Codable-conformance-not-detected","text":"Why super class Codable conformance not detected?","level":3,"type":"heading"},{"inlineContent":[{"text":"The ability to pass conformance data to macro for classes when performing member attribute expansion was introduced in ","type":"text"},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","isActive":true},{"text":". Please make sure to upgrade to this version to have this working.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Even with this it is unable for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" to get clear indication where conformance to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" is implemented by current class or the super class. ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference"},{"text":" checks current class for the conformance implementation by checking implementation functions and the check will not work if some ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" used for ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":" in implementation function definition.","type":"text"}],"type":"paragraph"},{"anchor":"Why-enum-case-associated-values-decodingencoding-are-not-customizable","text":"Why enum-case associated values decoding\/encoding are not customizable?","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"The goal of "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true},{"type":"text","text":" is to allow same level of customization for enum-case associated values as it is allowed for "},{"code":"struct","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"class","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"actor","type":"codeVoice"},{"type":"text","text":" member properties. Unfortunately, as of now, "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" doesn’t allow macro attributes (or any attributes) to be attached per enum-case arguments."}],"type":"paragraph"},{"inlineContent":[{"isActive":true,"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"reference"},{"text":", you can support this pitch on ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" forum if this feature will benefit you.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The current workaround is to extract enum-case arguments to separate ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" and have the customization options in the ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" itself. i.e. since following isn’t possible:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","enum SomeEnum {","    case string(@CodedAt(\"data\") String)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"you can convert it to:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","enum SomeEnum {","    case string(StringData)","","    @Codable","    struct StringData {","        let data: String","    }","}"],"type":"codeListing"},{"anchor":"Why-enums-with-raw-value-arent-supported","text":"Why enums with raw value aren’t supported?","level":3,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"Swift"},{"type":"text","text":" compiler by default generates "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformance for "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s with raw value and "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" has nothing extra to add for these type of "},{"type":"codeVoice","code":"enum"},{"type":"text","text":"s. Hence, in this case the default compiler generated implementation can be used."}],"type":"paragraph"},{"anchor":"Why-actor-conformance-to-Encodable-not-generated","text":"Why actor conformance to Encodable not generated?","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"For "},{"code":"actor","type":"codeVoice"},{"type":"text","text":"s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" generates "},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":" conformance, while "},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" conformance isn’t generated, only "},{"code":"encode(to:)","type":"codeVoice"},{"type":"text","text":" method implementation is generated which is isolated to "},{"code":"actor","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To generate "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance, the "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method must be "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" to "},{"type":"codeVoice","code":"actor"},{"type":"text","text":", and since "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method must be synchronous making it "},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" will prevent accessing mutable properties."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Due to these limitations, "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance isn’t generated, users has to implement the conformance manually."}],"type":"paragraph"},{"anchor":"Why-MetaProtocolCodable-plugin-cant-scan-Xcode-target-dependencies","text":"Why MetaProtocolCodable plugin can’t scan Xcode target dependencies?","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Currently Swift Package Manager always returns empty list for Xcode target dependencies as noted in "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","isActive":true},{"type":"text","text":". Hence "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" can currently only scan the files from the target or from the project including the target."}],"type":"paragraph"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage"],"title":"Essentials"}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/limitations"]}],"metadata":{"modules":[{"name":"MetaCodable"}],"role":"article","title":"Limitations","roleHeading":"Article"},"sections":[],"abstract":[{"text":"All the usage limitations for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true,"type":"reference"},{"text":".","type":"text"}],"references":{"https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md":{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"link","title":"Swift 5.9.2","titleInlineContent":[{"code":"Swift 5.9.2","type":"codeVoice"}],"url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md"},"https://forums.swift.org/t/attached-macro-support-for-enum-case-arguments/67952":{"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"link","title":"A pitch has been created to allow this support in Swift","titleInlineContent":[{"text":"A pitch has been created to allow this support in ","type":"text"},{"code":"Swift","type":"codeVoice"}],"url":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","title":"Codable()"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","kind":"symbol","title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"https://github.com/apple/swift-package-manager/issues/6003":{"identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","type":"link","title":"this bug","titleInlineContent":[{"text":"this bug","type":"text"}],"url":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003"}}}