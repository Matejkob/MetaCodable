{"metadata":{"modules":[{"name":"MetaCodable"}],"role":"article","roleHeading":"Article","title":"Limitations"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/limitations"]}],"abstract":[{"type":"text","text":"All the usage limitations for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage"],"title":"Essentials"}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Currently all the limitations of this library and possible workarounds and future plans are listed below. Most of these limitations depend on the data ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" provides to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true,"type":"reference"},{"text":" to perform macro expansion.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Why strict typing is necessary?","type":"heading","anchor":"Why-strict-typing-is-necessary"},{"inlineContent":[{"type":"codeVoice","code":"Swift"},{"text":" compiler doesn’t provide any type inference data to macros, so to know type of variables ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"text":" needs types to be explicitly specified in the code. i.e. following code will not work and will cause error while macro expansion:","type":"text"}],"type":"paragraph"},{"code":["@Codable","struct Model {","    let value = 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This is due to "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" unable to determine the type of "},{"type":"codeVoice","code":"value"},{"type":"text","text":", by specifying the type explicitly expansion is performed successfully:"}],"type":"paragraph"},{"code":["@Codable","struct Model {","    let value: Int = 1","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Why super class Codable conformance not detected?","type":"heading","anchor":"Why-super-class-Codable-conformance-not-detected"},{"inlineContent":[{"type":"text","text":"The ability to pass conformance data to macro for classes when performing member attribute expansion was introduced in "},{"identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","type":"reference","isActive":true},{"type":"text","text":". Please make sure to upgrade to this version to have this working."}],"type":"paragraph"},{"inlineContent":[{"text":"Even with this it is unable for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" to get clear indication where conformance to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" is implemented by current class or the super class. ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" checks current class for the conformance implementation by checking implementation functions and the check will not work if some ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" used for ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":" in implementation function definition.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Why enum-case associated values decoding\/encoding are not customizable?","type":"heading","anchor":"Why-enum-case-associated-values-decodingencoding-are-not-customizable"},{"inlineContent":[{"text":"The goal of ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true,"type":"reference"},{"text":" is to allow same level of customization for enum-case associated values as it is allowed for ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" member properties. Unfortunately, as of now, ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" doesn’t allow macro attributes (or any attributes) to be attached per enum-case arguments.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","type":"reference","isActive":true},{"type":"text","text":", you can support this pitch on "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" forum if this feature will benefit you."}],"type":"paragraph"},{"inlineContent":[{"text":"The current workaround is to extract enum-case arguments to separate ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" and have the customization options in the ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" itself. i.e. since following isn’t possible:","type":"text"}],"type":"paragraph"},{"code":["@Codable","enum SomeEnum {","    case string(@CodedAt(\"data\") String)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"you can convert it to:","type":"text"}],"type":"paragraph"},{"code":["@Codable","enum SomeEnum {","    case string(StringData)","","    @Codable","    struct StringData {","        let data: String","    }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Why enums with raw value aren’t supported?","type":"heading","anchor":"Why-enums-with-raw-value-arent-supported"},{"inlineContent":[{"code":"Swift","type":"codeVoice"},{"text":" compiler by default generates ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" conformance for ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s with raw value and ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" has nothing extra to add for these type of ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":"s. Hence, in this case the default compiler generated implementation can be used.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Why actor conformance to Encodable not generated?","type":"heading","anchor":"Why-actor-conformance-to-Encodable-not-generated"},{"inlineContent":[{"type":"text","text":"For "},{"type":"codeVoice","code":"actor"},{"type":"text","text":"s "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" generates "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" conformance, while "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" conformance isn’t generated, only "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method implementation is generated which is isolated to "},{"type":"codeVoice","code":"actor"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"To generate ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" conformance, the ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method must be ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":", and since ","type":"text"},{"code":"encode(to:)","type":"codeVoice"},{"text":" method must be synchronous making it ","type":"text"},{"code":"nonisolated","type":"codeVoice"},{"text":" will prevent accessing mutable properties.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Due to these limitations, ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" conformance isn’t generated, users has to implement the conformance manually.","type":"text"}],"type":"paragraph"},{"level":3,"text":"Why MetaProtocolCodable plugin can’t scan Xcode target dependencies?","type":"heading","anchor":"Why-MetaProtocolCodable-plugin-cant-scan-Xcode-target-dependencies"},{"inlineContent":[{"type":"text","text":"Currently Swift Package Manager always returns empty list for Xcode target dependencies as noted in "},{"isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","type":"reference"},{"type":"text","text":". Hence "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"type":"text","text":" can currently only scan the files from the target or from the project including the target."}],"type":"paragraph"}]}],"sections":[],"references":{"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"type":"topic","title":"Discover MetaCodable","role":"overview","kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","url":"\/tutorials\/usage"},"https://github.com/apple/swift-package-manager/issues/6003":{"title":"this bug","type":"link","identifier":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003","titleInlineContent":[{"type":"text","text":"this bug"}],"url":"https:\/\/github.com\/apple\/swift-package-manager\/issues\/6003"},"doc://MetaCodable/documentation/MetaCodable":{"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","role":"collection","url":"\/documentation\/metacodable"},"https://github.com/apple/swift-evolution/blob/main/proposals/0407-member-macro-conformances.md":{"title":"Swift 5.9.2","type":"link","identifier":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md","titleInlineContent":[{"code":"Swift 5.9.2","type":"codeVoice"}],"url":"https:\/\/github.com\/apple\/swift-evolution\/blob\/main\/proposals\/0407-member-macro-conformances.md"},"https://forums.swift.org/t/attached-macro-support-for-enum-case-arguments/67952":{"title":"A pitch has been created to allow this support in Swift","type":"link","identifier":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952","titleInlineContent":[{"type":"text","text":"A pitch has been created to allow this support in "},{"code":"Swift","type":"codeVoice"}],"url":"https:\/\/forums.swift.org\/t\/attached-macro-support-for-enum-case-arguments\/67952"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","role":"symbol","url":"\/documentation\/metacodable\/codable()"}}}