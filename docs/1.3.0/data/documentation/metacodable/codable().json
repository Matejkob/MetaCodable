{"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros","generated":true}],"metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"roleHeading":"Macro","platforms":[{"beta":false,"unavailable":false,"introducedAt":"5.9","deprecated":false,"name":"Swift"}],"modules":[{"name":"MetaCodable"}],"title":"Codable()","role":"symbol","externalID":"s:11MetaCodable0B0yycfm","symbolKind":"macro"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"abstract":[{"type":"text","text":"Generate "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"type":"text","text":", "},{"code":"actor","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codable()"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"kind":"text","text":", names: named(CodingKeys), named(DecodingKeys), named(init(from:)), named(encode(to:))) "},{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(member, conformances: "},{"kind":"typeIdentifier","text":"Decodable","preciseIdentifier":"s:Se"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Encodable","preciseIdentifier":"s:SE"},{"kind":"text","text":", names: named(CodingKeys), named(init(from:)), named(encode(to:))) "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Usage","type":"heading","level":1,"anchor":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default the field name is used as "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" for the field value during"},{"type":"text","text":" "},{"type":"text","text":"encoding and decoding. Following customization can be done on fields to"},{"type":"text","text":" "},{"type":"text","text":"provide custom decode and encode behavior:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" providing single string value as custom coding key."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" providing multiple string value as nested coding","type":"text"},{"text":" ","type":"text"},{"text":"key path.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"text":" with one or more string value as nested container","type":"text"},{"text":" ","type":"text"},{"text":"coding key path, with variable name as coding key.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" with no path arguments, when type is composition","type":"text"},{"text":" ","type":"text"},{"text":"of multiple ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"type":"text","text":" to provide additional coding key values where"},{"type":"text","text":" "},{"type":"text","text":"field value can appear."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":" to provide custom decoding\/encoding behavior for","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types or implement decoding\/encoding for non-","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" to provide default value when decoding fails."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" to provide custom values for enum cases.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" to provide enum-case\/protocol identifier tag path.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()"},{"text":" to provide enum-case\/protocol identifier tag type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},{"type":"text","text":" to provided enum-case\/protocol content path."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" to ignore specific properties\/cases\/types from"},{"type":"text","text":" "},{"type":"text","text":"decoding\/encoding or both."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference","isActive":true},{"type":"text","text":" to work with different case style "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" to ignore decoding and encoding"},{"type":"text","text":" "},{"type":"text","text":"all initialized properties\/case associated variables."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Generate protocol decoding\/encoding ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":"s with build tool","type":"text"},{"text":" ","type":"text"},{"text":"plugin ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" from ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference"},{"text":" types.","type":"text"}]}]}]},{"text":"Effect","type":"heading","level":1,"anchor":"Effect"},{"type":"paragraph","inlineContent":[{"text":"This macro composes extension macro expansion depending on ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"text":"conformance of type:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Extension macro expansion, to confirm to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocols depending on whether type doesnâ€™t already conform to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Extension macro expansion, to generate custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" type for"},{"type":"text","text":" "},{"type":"text","text":"the attached declaration named "},{"type":"codeVoice","code":"CodingKeys"},{"type":"text","text":" and use this type for"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of both "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" "},{"type":"text","text":"methods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"If attached declaration already conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" this macro expansion","type":"text"},{"text":" ","type":"text"},{"text":"is skipped.","type":"text"}]}]}]},{"type":"aside","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The attached declaration must be of a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" "},{"type":"text","text":"or "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" type. "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","overridingTitle":"See the limitations for this macro","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"See the limitations for this macro"}]},{"type":"text","text":"."}]}],"style":"important"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","title":"Coded","kind":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"role":"symbol","url":"\/documentation\/metacodable\/memberinit()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}],"title":"MemberInit()","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"actor"},{"text":" types","type":"text"},{"text":" ","type":"text"},{"text":"by leveraging custom attributes provided on variable declarations.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","role":"symbol","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","title":"Default(_:)","role":"symbol","url":"\/documentation\/metacodable\/default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"type":"topic","title":"Limitations","abstract":[{"text":"All the usage limitations for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true,"type":"reference"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/limitations","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","role":"article","kind":"article"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","title":"CodedAs()","role":"symbol","url":"\/documentation\/metacodable\/codedas()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/documentation/MetaCodable":{"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates by default initialized properties\/associated values for"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"role":"symbol","abstract":[{"text":"A type that can be decoded\/encoded dynamically based on unique identifier.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DynamicCodable","kind":"identifier"}],"navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"url":"\/documentation\/metacodable\/dynamiccodable","title":"DynamicCodable","type":"topic","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","title":"CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","title":"IgnoreDecoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","role":"symbol","url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"type":"topic","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/metacodable\/helpercoder","role":"symbol"}}}