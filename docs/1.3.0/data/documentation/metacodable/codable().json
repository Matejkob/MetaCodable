{"metadata":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"roleHeading":"Macro","role":"symbol","externalID":"s:11MetaCodable0B0yycfm","modules":[{"name":"MetaCodable"}],"title":"Codable()","symbolKind":"macro","platforms":[{"beta":false,"deprecated":false,"name":"Swift","introducedAt":"5.9","unavailable":false}]},"sections":[],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"generated":true,"title":"Macros"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(extension, conformances: ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":", ","kind":"text"},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", names: named(CodingKeys), named(DecodingKeys), named(init(from:)), named(encode(to:))) ","kind":"text"},{"text":"@attached","kind":"attribute"},{"text":"(member, conformances: ","kind":"text"},{"text":"Decodable","kind":"typeIdentifier","preciseIdentifier":"s:Se"},{"text":", ","kind":"text"},{"text":"Encodable","kind":"typeIdentifier","preciseIdentifier":"s:SE"},{"text":", names: named(CodingKeys), named(init(from:)), named(encode(to:))) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":1,"anchor":"Usage","type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"text":"By default the field name is used as ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field value during","type":"text"},{"text":" ","type":"text"},{"text":"encoding and decoding. Following customization can be done on fields to","type":"text"},{"text":" ","type":"text"},{"text":"provide custom decode and encode behavior:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" providing single string value as custom coding key."}]}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" providing multiple string value as nested coding","type":"text"},{"text":" ","type":"text"},{"text":"key path.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":" with one or more string value as nested container"},{"type":"text","text":" "},{"type":"text","text":"coding key path, with variable name as coding key."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" with no path arguments, when type is composition"},{"type":"text","text":" "},{"type":"text","text":"of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" to provide additional coding key values where","type":"text"},{"text":" ","type":"text"},{"text":"field value can appear.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"text":" to provide custom decoding\/encoding behavior for","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types or implement decoding\/encoding for non-","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" to provide default value when decoding fails.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":" to provide custom values for enum cases.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" to provide enum-case\/protocol identifier tag path."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true},{"type":"text","text":" to provide enum-case\/protocol identifier tag type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true},{"type":"text","text":" to provided enum-case\/protocol content path."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"type":"text","text":", "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"type":"text","text":" and"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"type":"text","text":" to ignore specific properties\/cases\/types from"},{"type":"text","text":" "},{"type":"text","text":"decoding\/encoding or both."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" to work with different case style "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"type":"text","text":" to ignore decoding and encoding"},{"type":"text","text":" "},{"type":"text","text":"all initialized properties\/case associated variables."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Generate protocol decoding\/encoding "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"type":"text","text":"s with build tool"},{"type":"text","text":" "},{"type":"text","text":"plugin "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" from "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference"},{"type":"text","text":" types."}]}]}],"type":"unorderedList"},{"level":1,"anchor":"Effect","type":"heading","text":"Effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro composes extension macro expansion depending on "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"text","text":"conformance of type:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Extension macro expansion, to confirm to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocols depending on whether type doesnâ€™t already conform to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"text":" respectively.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Extension macro expansion, to generate custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" type for"},{"type":"text","text":" "},{"type":"text","text":"the attached declaration named "},{"type":"codeVoice","code":"CodingKeys"},{"type":"text","text":" and use this type for"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of both "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" "},{"type":"text","text":"methods."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"If attached declaration already conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" this macro expansion","type":"text"},{"text":" ","type":"text"},{"text":"is skipped.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"The attached declaration must be of a ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" ","type":"text"},{"text":"or ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" type. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","overridingTitle":"See the limitations for this macro","overridingTitleInlineContent":[{"type":"text","text":"See the limitations for this macro"}],"isActive":true,"type":"reference"},{"text":".","type":"text"}]}],"style":"important","type":"aside"}]}],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/metacodable\/codable()"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", "},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"title":"Limitations","type":"topic","kind":"article","abstract":[{"type":"text","text":"All the usage limitations for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"role":"article","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","url":"\/documentation\/metacodable\/limitations"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","title":"CodingKeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"kind":"symbol","url":"\/documentation\/metacodable\/memberinit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","type":"topic","role":"symbol","title":"MemberInit()","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" types","type":"text"},{"text":" ","type":"text"},{"text":"by leveraging custom attributes provided on variable declarations.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}]},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"kind":"symbol","role":"symbol","required":true,"type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/dynamiccodable","title":"DynamicCodable"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","title":"Codable()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"kind":"symbol","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"title":"HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","kind":"symbol","title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"text":"and protocols.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"url":"\/documentation\/metacodable\/codedas()","title":"CodedAs()"}}}