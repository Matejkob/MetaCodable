{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codingkeys(_:)"]}],"kind":"symbol","metadata":{"roleHeading":"Macro","modules":[{"name":"MetaCodable"}],"role":"symbol","externalID":"s:11MetaCodable10CodingKeysyyAA0C15KeyNameStrategyOcfm","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"text":")","kind":"text"}],"symbolKind":"macro","title":"CodingKeys(_:)","platforms":[{"unavailable":false,"deprecated":false,"name":"Swift","beta":false,"introducedAt":"5.9"}]},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"generated":true,"title":"Strategies"}],"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" for the field names\/associated value label will be"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"strategy","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"},{"text":")","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"strategy","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true,"type":"reference"},{"type":"text","text":" recommend using camel-case names."},{"type":"text","text":" "},{"type":"text","text":"This macro can be used for types to work with "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s of different"},{"type":"text","text":" "},{"type":"text","text":"case format while keeping variable names camel-cased."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For a JSON where keys follow snake-case style:"}],"type":"paragraph"},{"syntax":"json","code":["{","  \"product_name\": \"Banana\",","  \"product_cost\": 200,","  \"description\": \"A banana grown in Ecuador.\"","}"],"type":"codeListing"},{"inlineContent":[{"text":"equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type can be created that uses keys in camel-case","type":"text"},{"text":" ","type":"text"},{"text":"style:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","@CodingKeys(.snake_case)","struct CodableType {","    let productName: String","    let productCost: String","    let description: String","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true},{"type":"text","text":" macro generated code will transform field names"},{"type":"text","text":" "},{"type":"text","text":"to snake-case in the "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Similarly, for enums associated value label can be kept camel-cased while"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s of different case style can be generated."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For a JSON where keys follow snake-case style:"}],"type":"paragraph"},{"syntax":"json","code":["{","  \"banana\": {","    \"product_cost\": 200","  },","  \"apple\": {","    \"product_cost\": 200","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type can be created that uses keys in camel-case","type":"text"},{"text":" ","type":"text"},{"text":"style:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","@CodingKeys(.snake_case)","enum CodableType {","    case banana(_ productCost: String)","    case apple(_ productCost: String)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Also, for enums "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s of different case styles can be generated"},{"type":"text","text":" "},{"type":"text","text":"per case while keeping all associated values label camel-cased."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For a JSON where keys follow mixed snake-case and kebab-case style:"}],"type":"paragraph"},{"syntax":"json","code":["{","  \"banana\": {","    \"product_cost\": 200","  },","  \"apple\": {","    \"product-cost\": 200","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"equivalent "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type can be created that uses keys in camel-case"},{"type":"text","text":" "},{"type":"text","text":"style:"}],"type":"paragraph"},{"syntax":"swift","code":["@Codable","enum CodableType {","    @CodingKeys(.snake_case)","    case banana(_ productCost: String)","    @CodingKeys(.kebab－case)","    case apple(_ productCost: String)","}"],"type":"codeListing"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The case strategy is only used to transform field names to"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s. "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s provided with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" will remain unchanged."}]}],"name":"Note","type":"aside"},{"style":"note","content":[{"inlineContent":[{"text":"This macro on its own only validates if attached declaration","type":"text"},{"text":" ","type":"text"},{"text":"is a variable declaration. ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" macro uses this macro","type":"text"},{"text":" ","type":"text"},{"text":"when generating final implementations.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"style":"important","content":[{"inlineContent":[{"type":"text","text":"This attribute must be used combined with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Important","type":"aside"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},"sections":[],"references":{"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable":{"title":"MetaCodable","kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","role":"collection","url":"\/documentation\/metacodable","abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"text":" ","type":"text"},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"title":"IgnoreCodingInitialized()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","title":"CodedBy(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"type":"text","text":" "},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"url":"\/documentation\/metacodable\/codingkeynamestrategy","kind":"symbol","type":"topic","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"title":"CodingKeyNameStrategy","navigatorTitle":[{"text":"CodingKeyNameStrategy","kind":"identifier"}],"abstract":[{"type":"text","text":"The values that determine the equivalent"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"title":"Codable()","url":"\/documentation\/metacodable\/codable()","role":"symbol","kind":"symbol","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"title":"IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"title":"CodedAs(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)","type":"topic","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"role":"symbol","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","title":"CodedAs()","kind":"symbol","url":"\/documentation\/metacodable\/codedas()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}],"type":"topic"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}],"type":"link","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","title":"Swift API Design Guidelines"}}}