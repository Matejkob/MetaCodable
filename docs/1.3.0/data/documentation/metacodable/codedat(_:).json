{"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/codedat(_:)"]}],"metadata":{"modules":[{"name":"MetaCodable"}],"externalID":"s:11MetaCodable7CodedAtyys12StaticStringVd_tcfm","roleHeading":"Macro","symbolKind":"macro","title":"CodedAt(_:)","platforms":[{"introducedAt":"5.9","name":"Swift","deprecated":false,"beta":false,"unavailable":false}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"text":"(peer) ","kind":"text"},{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"path","kind":"internalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path value located at."}],"type":"paragraph"}],"name":"path"}]},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If single argument provided for ","type":"text"},{"type":"codeVoice","code":"path"},{"text":", then that argument is","type":"text"},{"text":" ","type":"text"},{"text":"chosen as ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":". i.e for JSON:","type":"text"}]},{"code":["{ \"key\": \"value\" }"],"syntax":"json","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"the field can declare custom key:"}]},{"code":["@CodedAt(\"key\")","let field: String"],"syntax":"swift","type":"codeListing"}]},{"content":[{"inlineContent":[{"type":"text","text":"If multiple arguments provided, then field is decoded\/encoded"},{"type":"text","text":" "},{"type":"text","text":"nested by all the arguments as "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":". i.e for JSON:"}],"type":"paragraph"},{"code":["{ \"deeply\": { \"nested\": { \"key\": \"value\" } } }"],"type":"codeListing","syntax":"json"},{"inlineContent":[{"text":"the field can declare custom key:","type":"text"}],"type":"paragraph"},{"code":["@CodedAt(\"deeply\", \"nested\", \"key\")","let field: String"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no arguments provided, then field needs to be directly decoded from"},{"type":"text","text":" "},{"type":"text","text":"and encoded to parent "},{"code":"decoder","type":"codeVoice"},{"type":"text","text":" and "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively rather"},{"type":"text","text":" "},{"type":"text","text":"than at a "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" implementation’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" instance in parent type "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" "},{"type":"text","text":"implementation’s "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method is directly passed to field type’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" method respectively."}]},{"type":"paragraph","inlineContent":[{"text":"Using this some core ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types can be reused across multiple","type":"text"},{"text":" ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. i.e. for different vehicle types in JSON:","type":"text"}]},{"type":"codeListing","syntax":"json","code":["[","  {","    \"id\": 5,","    \"name\": \"Maruti Suzuki Dzire\",","    \"type\": \"Sedan\",","    \"brand\": \"Maruti\"","  },","  {","    \"id\": 105,","    \"name\": \"Vande Bharat Express\",","    \"start\": \"Delhi\",","    \"destination\": \"Bhopal\"","  }","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"core "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" model with common properties can be used with"},{"type":"text","text":" "},{"type":"text","text":"specialized "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Train"},{"type":"text","text":" models:"}]},{"type":"codeListing","syntax":"swift","code":["@Codable","struct Vehicle {","    let id: Int","    let name: String","}","","@Codable","struct Car {","    @CodedAt","    let base: Vehicle","    let type: String","    let brand: String","}","","@Codable","struct Train {","    @CodedAt","    let base: Vehicle","    let start: String","    let destination: String","}"]}]},{"content":[{"inlineContent":[{"type":"text","text":"For enums\/protocols, this attribute can be used to support internally"},{"type":"text","text":" "},{"type":"text","text":"tagged data. The "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided represents the path"},{"type":"text","text":" "},{"type":"text","text":"where value identifying each case\/conforming type respectively is"},{"type":"text","text":" "},{"type":"text","text":"decoded\/encoded. By default, this value is decoded\/encoded as"},{"type":"text","text":" "},{"code":"String","type":"codeVoice"},{"type":"text","text":" unless different type specified with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference","isActive":true},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"text","text":"compared with value for each enum-case identifier or conformed type"},{"type":"text","text":" "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","type":"reference","isActive":true},{"type":"text","text":". i.e. for enum:"}],"type":"paragraph"},{"code":["@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"or protocol:","type":"text"}],"type":"paragraph"},{"code":["@Codable","@CodedAt(\"type\")","@CodedAs<Int>","protocol Command {","    var key: String { get }","}","","@Codable","struct Load: Command, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"load\" }","    let key: String","}","","@Codable","struct Store: Command, DynamicCodable {","    static var identifier: DynamicCodableIdentifier<String> { \"store\" }","    let key: String","    let value: Int","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"the encoded JSON for internally tagged data will be of following variations:","type":"text"}],"type":"paragraph"},{"code":["{ \"key\": \"MyKey\", \"type\": \"load\" }"],"type":"codeListing","syntax":"json"},{"code":["{ \"key\": \"MyKey\", \"value\": 42, \"type\": \"store\" }"],"type":"codeListing","syntax":"json"}]}],"type":"unorderedList"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This macro on its own only validates if attached declaration","type":"text"},{"text":" ","type":"text"},{"text":"is a variable declaration. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" macro uses this macro","type":"text"},{"text":" ","type":"text"},{"text":"when generating final implementations.","type":"text"}]}],"type":"aside"},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"When applied to fields, the field type must confirm to","type":"text"},{"text":" ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside"}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]}],"kind":"symbol","references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable":{"abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","title":"MetaCodable","role":"collection","url":"\/documentation\/metacodable"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","title":"Default(_:)","role":"symbol","url":"\/documentation\/metacodable\/default(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates by default initialized properties\/associated values for"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","role":"symbol","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","title":"IgnoreDecoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","title":"CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","title":"CodedAs()","role":"symbol","url":"\/documentation\/metacodable\/codedas()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","role":"symbol","url":"\/documentation\/metacodable\/codable()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"required":true,"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"identifier","kind":"identifier"},{"text":": ","kind":"text"},{"text":"DynamicCodableIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"IdentifierValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","abstract":[{"type":"text","text":"The identifier value(s) for this type."}],"type":"topic","title":"identifier","kind":"symbol","url":"\/documentation\/metacodable\/dynamiccodable\/identifier","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"}}}