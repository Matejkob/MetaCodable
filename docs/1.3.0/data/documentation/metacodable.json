{"sections":[],"identifier":{"url":"doc:\/\/MetaCodable\/documentation\/MetaCodable","interfaceLanguage":"swift"},"metadata":{"roleHeading":"Framework","role":"collection","externalID":"MetaCodable","platforms":[{"introducedAt":"5.9","name":"Swift"}],"title":"MetaCodable","symbolKind":"module","modules":[{"name":"MetaCodable"}]},"hierarchy":{"paths":[[]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" framework exposes custom macros which can be used to generate dynamic ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations. The core of the framework is ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" macro which generates the implementation aided by data provided with using other macros.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" aims to supercharge your ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations by providing these inbox features:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value declaration per variable, instead of requiring you to write all the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" passing single argument."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to create composition of multiple ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" passing no arguments.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to read data from additional fallback ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s provided with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to provide default value in case of decoding failures with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to create custom decoding\/encoding strategies with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" and using them with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"text":". i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","isActive":true,"type":"reference"},{"text":" etc.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows specifying different case values with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"text":" and case value\/protocol type identifier type different from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows specifying enum-case\/protocol type identifier path with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" and case content path with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to ignore specific properties\/cases from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions"},{"type":"text","text":", while enabling a type\/case to work with different case style keys with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to ignore all initialized properties of a type\/case from decoding\/encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" etc."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Allows to generate protocol decoding\/encoding ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":"s with ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin from ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"text":" types.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"overridingTitleInlineContent":[{"type":"strong","inlineContent":[{"text":"See the limitations for this macro","type":"text"}]}],"isActive":true,"overridingTitle":"See the limitations for this macro","type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Installation","level":2,"type":"heading","anchor":"Installation"},{"type":"tabNavigator","tabs":[{"title":"Swift Package Manager","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"https:\/\/swift.org\/package-manager\/"},{"type":"text","text":" is a tool for automating the distribution of Swift code and is integrated into the "},{"code":"swift","type":"codeVoice"},{"type":"text","text":" compiler."}]},{"type":"paragraph","inlineContent":[{"text":"Once you have your Swift package set up, adding ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" as a dependency is as easy as adding it to the ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" value of your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then you can add the ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":" module product as dependency to the ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s of your choosing, by adding it to the ","type":"text"},{"code":"dependencies","type":"codeVoice"},{"text":" value of your ","type":"text"},{"code":"target","type":"codeVoice"},{"text":"s.","type":"text"}]},{"type":"codeListing","code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"syntax":"swift"}]},{"title":"CocoaPods","content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/cocoapods.org","isActive":true},{"type":"text","text":" is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" into your Xcode project using CocoaPods, specify it in your "},{"type":"codeVoice","code":"Podfile"},{"type":"text","text":":"}]},{"syntax":"ruby","code":["pod 'MetaCodable'"],"type":"codeListing"}]}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"kind":"symbol","topicSections":[{"title":"Essentials","identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"]},{"title":"Macros","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"]},{"title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"]},{"title":"Dynamic Coding","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"]},{"title":"Enumerations","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"references":{"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/dynamiccodable","title":"DynamicCodable"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","title":"CodingKeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"kind":"symbol","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"title":"HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"kind":"symbol","navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LossySequenceCoder","kind":"identifier"}],"title":"LossySequenceCoder","abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" that helps decoding\/encoding lossy sequence."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder","url":"\/documentation\/metacodable\/lossysequencecoder","deprecated":true},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)"},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"title":"Limitations","type":"topic","kind":"article","abstract":[{"type":"text","text":"All the usage limitations for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},{"type":"text","text":"."}],"role":"article","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","url":"\/documentation\/metacodable\/limitations"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","title":"Codable()"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","type":"link","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","titleInlineContent":[{"text":"Swift API Design Guidelines","type":"text"}],"title":"Swift API Design Guidelines"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"url":"\/documentation\/metacodable\/codingkeynamestrategy","title":"CodingKeyNameStrategy","navigatorTitle":[{"kind":"identifier","text":"CodingKeyNameStrategy"}],"type":"topic","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value for a property name.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeyNameStrategy"}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"kind":"symbol","role":"symbol","required":true,"type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","abstract":[{"type":"text","text":"The configuration file providing additional customization options for "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin.","type":"text"}],"fragments":[{"text":"configuration","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"file"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaCodableConfig"}],"url":"\/documentation\/metacodable\/metacodableconfig","kind":"symbol","title":"MetaCodableConfig"},"https://swift.org/package-manager/":{"identifier":"https:\/\/swift.org\/package-manager\/","type":"link","url":"https:\/\/swift.org\/package-manager\/","titleInlineContent":[{"text":"Swift Package Manager","type":"text"}],"title":"Swift Package Manager"},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"kind":"symbol","url":"\/documentation\/metacodable\/memberinit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","type":"topic","role":"symbol","title":"MemberInit()","abstract":[{"text":"Generate memberwise initializer(s) of ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" types","type":"text"},{"text":" ","type":"text"},{"text":"by leveraging custom attributes provided on variable declarations.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"MemberInit"},{"kind":"text","text":"()"}]},"https://cocoapods.org":{"identifier":"https:\/\/cocoapods.org","type":"link","url":"https:\/\/cocoapods.org","titleInlineContent":[{"text":"CocoaPods","type":"text"}],"title":"CocoaPods"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"url":"\/documentation\/metacodable\/dynamiccodableidentifier","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","abstract":[{"type":"text","text":"The identifier option for "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","type":"reference"},{"type":"text","text":" types."}],"title":"DynamicCodableIdentifier","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodableIdentifier"}],"navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"role":"symbol"},"doc://MetaCodable/documentation/MetaCodable":{"role":"collection","type":"topic","abstract":[{"type":"text","text":"Supercharge "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","kind":"symbol","title":"MetaCodable","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"text":"and protocols.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"url":"\/documentation\/metacodable\/codedas()","title":"CodedAs()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()"}}}