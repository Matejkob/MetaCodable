{"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","interfaceLanguage":"swift"},"metadata":{"role":"project","title":"Represent dynamic data variations with protocol","categoryPathComponent":"Usage","category":"Discover MetaCodable"},"sections":[{"estimatedTimeInMinutes":20,"title":"Represent dynamic data variations with protocol","xcodeRequirement":"Xcode 15 or later","kind":"hero","chapter":"Advanced MetaCodable","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]}]},{"tasks":[{"title":"Create dynamic variation Codable types","stepsSection":[{"type":"step","caption":[],"runtimePreview":null,"code":null,"content":[{"inlineContent":[{"type":"text","text":"Identify all the variations and the tags representing variations."}],"type":"paragraph"}],"media":"DynamicPost-01.png"},{"type":"step","caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-01.swift","content":[{"inlineContent":[{"text":"Create protocol containing common fields across all the data variations.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-02.swift","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"text":" attribute to this protocol.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-03.swift","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types with each type representing a variation.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform common data protocol for each variant data type."}]}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-01.png","code":"DynamicPost-05.swift","content":[{"inlineContent":[{"text":"Add ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"text":" conformance for each variant data type, with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","isActive":true,"type":"reference"},{"text":" returning variant tag.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-02.png","code":"DynamicPost-06.swift","content":[{"inlineContent":[{"text":"Provide multiple variant tags in ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","isActive":true,"type":"reference"},{"text":" in case of multiple tags used to represent same variation.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-02.png","code":"DynamicPost-07.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Ignore specific type from decoding or encoding or both by attaching ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"text":" macros respectively.","type":"text"}]}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-03.png","code":"DynamicPost-08.swift","content":[{"inlineContent":[{"text":"In case of internally tagged data, attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro to ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" declaration with value specifying tag field name.","type":"text"}],"type":"paragraph"}],"media":null},{"type":"step","caption":[],"runtimePreview":"DynamicPost-04.png","code":"DynamicPost-09.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In case of adjacently tagged data, additionally attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true,"type":"reference"},{"text":" macro to ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" declaration with value specifying content field name.","type":"text"}]}],"media":null},{"type":"step","caption":[],"runtimePreview":"Plugin.png","code":"Plugin.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Add ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin to target to handle code generation.","type":"text"}]}],"media":null},{"type":"step","caption":[],"runtimePreview":"Page.png","code":"Page.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Use generated ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" for protocol to decode\/encode dynamic type.","type":"text"}]}],"media":null}],"anchor":"Create-dynamic-variation-Codable-types","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Similar to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","overridingTitle":"enums","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"enums"}]},{"text":" external, internal and adjacently tagged data variations are supported with default being externally tagged data.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}]},{"title":"Customize dynamic data variations detection","stepsSection":[{"type":"step","content":[{"inlineContent":[{"text":"Add ","type":"text"},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin to target to handle code generation.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"Plugin.swift","runtimePreview":"Plugin.png"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"},{"type":"text","text":" file in the target plugin is included."}],"type":"paragraph"}],"caption":[],"media":null,"code":"meta_codable_config-01.json","runtimePreview":null},{"type":"step","content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan","type":"reference","isActive":true},{"text":" mode in ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","type":"reference","isActive":true},{"text":" file to control source files accross dependency targets scanned for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","type":"reference","isActive":true},{"text":" protocol variation data.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"meta_codable_config-02.json","runtimePreview":"MetaCodableConfig.png"}],"anchor":"Customize-dynamic-data-variations-detection","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Customize ","type":"text"},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin code generation.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}],"kind":"tasks"}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"kind":"project","variants":[{"paths":["\/tutorials\/metacodable\/dynamic"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig/Scan":{"fragments":[{"kind":"keyword","text":"configuration"},{"text":" ","kind":"text"},{"text":"option","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scan","kind":"identifier"}],"abstract":[{"type":"text","text":"The source file scan option for "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"type":"text","text":" build tool plugin."}],"role":"symbol","title":"Scan","url":"\/documentation\/metacodable\/metacodableconfig\/scan","kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig\/Scan"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},"DynamicPost-04.swift":{"fileName":"Post.swift","identifier":"DynamicPost-04.swift","type":"file","highlights":[{"line":9},{"line":15},{"line":22},{"line":29}],"fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"DynamicPost-02.swift":{"fileName":"Post.swift","identifier":"DynamicPost-02.swift","type":"file","highlights":[{"line":1},{"line":2},{"line":3}],"fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}"]},"Page.png":{"identifier":"Page.png","type":"image","alt":"JSON representation of Page containing Posts","variants":[{"traits":["1x","light"],"url":"\/images\/Page.png"},{"traits":["1x","dark"],"url":"\/images\/Page~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol","title":"Customize dynamic data variations detection","kind":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"meta_codable_config-02.json":{"fileName":"meta_codable_config.json","identifier":"meta_codable_config-02.json","type":"file","highlights":[{"line":1},{"line":2},{"line":3}],"fileType":"json","syntax":"json","content":["{","    \"scan\": \"recursive\"","}"]},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"url":"\/tutorials\/metacodable\/essential","kind":"project","estimatedTime":"10min","title":"Use with general-purpose Swift types"},"DynamicPost-04.png":{"type":"image","identifier":"DynamicPost-04.png","variants":[{"url":"\/images\/DynamicPost-04.png","traits":["1x","light"]},{"url":"\/images\/DynamicPost-04~dark.png","traits":["1x","dark"]}],"alt":"Adjacently tagged Post variations JSON representation"},"meta_codable_config-01.json":{"type":"file","highlights":[],"fileName":"meta_codable_config.json","identifier":"meta_codable_config-01.json","syntax":"json","fileType":"json","content":["{}"]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum","kind":"project","estimatedTime":"10min","title":"Represent variations in data"},"Plugin.png":{"identifier":"Plugin.png","type":"image","alt":"Xcode build tool plugin settings","variants":[{"traits":["1x","light"],"url":"\/images\/Plugin.png"},{"traits":["1x","dark"],"url":"\/images\/Plugin~dark.png"}]},"MetaCodableConfig.png":{"identifier":"MetaCodableConfig.png","type":"image","alt":"MetaCodableConfig.plist configuration file","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodableConfig.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodableConfig~dark.png"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"DynamicPost-02.png":{"identifier":"DynamicPost-02.png","type":"image","alt":"Post variations JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/DynamicPost-02.png"},{"traits":["1x","dark"],"url":"\/images\/DynamicPost-02~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with adjacent tag","kind":"section"},"DynamicPost-09.swift":{"type":"file","highlights":[{"line":5}],"fileName":"Post.swift","identifier":"DynamicPost-09.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with internal tag","kind":"section"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)"},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","title":"Codable()"},"Plugin.swift":{"type":"file","highlights":[],"fileName":"Package.swift","identifier":"Plugin.swift","syntax":"swift","fileType":"swift","content":["import PackageDescription","","let appTarget = package.targets.first!","appTarget.plugins.append(","    .plugin(","        name: \"MetaProtocolCodable\",","        package: \"MetaCodable\"","    )",")"]},"DynamicPost-01.png":{"type":"image","identifier":"DynamicPost-01.png","variants":[{"url":"\/images\/DynamicPost-01.png","traits":["1x","light"]},{"url":"\/images\/DynamicPost-01~dark.png","traits":["1x","dark"]}],"alt":"Post variations JSON representation"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","abstract":[],"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","title":"MetaCodable essentials"},"DynamicPost-05.swift":{"type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49}],"fileName":"Post.swift","identifier":"DynamicPost-05.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"picture\"","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable/identifier":{"role":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable\/identifier","abstract":[{"type":"text","text":"The identifier value(s) for this type."}],"fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DynamicCodableIdentifier","preciseIdentifier":"s:11MetaCodable07DynamicB10IdentifierO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"IdentifierValue"},{"kind":"text","text":">"}],"url":"\/documentation\/metacodable\/dynamiccodable\/identifier","required":true,"kind":"symbol","title":"identifier"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()"},"DynamicPost-03.swift":{"type":"file","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"fileName":"Post.swift","identifier":"DynamicPost-03.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost {","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost {","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost {","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost {","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"navigatorTitle":[{"kind":"identifier","text":"DynamicCodable"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicCodable"}],"abstract":[{"type":"text","text":"A type that can be decoded\/encoded dynamically based on unique identifier."}],"role":"symbol","kind":"symbol","url":"\/documentation\/metacodable\/dynamiccodable","title":"DynamicCodable"},"Xcode 15 or later":{"type":"xcodeRequirement","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","title":"Advanced MetaCodable"},"DynamicPost-03.png":{"type":"image","identifier":"DynamicPost-03.png","variants":[{"url":"\/images\/DynamicPost-03.png","traits":["1x","light"]},{"url":"\/images\/DynamicPost-03~dark.png","traits":["1x","dark"]}],"alt":"Internally tagged Post variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","title":"Customize field decoding\/encoding"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"kind":"symbol","role":"symbol","required":true,"type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()"},"DynamicPost-06.swift":{"type":"file","highlights":[{"line":23}],"fileName":"Post.swift","identifier":"DynamicPost-06.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"DynamicPost-01.swift":{"type":"file","highlights":[],"fileName":"Post.swift","identifier":"DynamicPost-01.swift","syntax":"swift","fileType":"swift","content":["protocol Post {","    var id: UUID { get }","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"url":"\/tutorials\/metacodable\/helper","kind":"project","estimatedTime":"20min","title":"Add common decoding\/encoding customizations"},"DynamicPost-08.swift":{"type":"file","highlights":[{"line":4}],"fileName":"Post.swift","identifier":"DynamicPost-08.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"Page.swift":{"type":"file","highlights":[],"fileName":"Page.swift","identifier":"Page.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Page {","    @CodedBy(","        SequenceCoder(","            elementHelper: PostCoder()","        )","    )","    let content: [Post]","    let next: String","}"]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic","kind":"project","estimatedTime":"20min","title":"Represent dynamic data variations with protocol"},"DynamicPost-07.swift":{"type":"file","highlights":[{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13}],"fileName":"Post.swift","identifier":"DynamicPost-07.swift","syntax":"swift","fileType":"swift","content":["import MetaCodable","","@Codable","protocol Post {","    var id: UUID { get }","}","","@IgnoreCoding","struct InvalidPost: Post {","    let id: UUID","    let invalid: Bool","}","","@Codable","struct TextPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"text\"","    }","","    let id: UUID","    let text: String","}","","@Codable","struct PicturePost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return [\"picture\", \"photo\"]","    }","","    let id: UUID","    let url: URL","    let caption: String","}","","@Codable","struct AudioPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"audio\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","}","","@Codable","struct VideoPost: Post, DynamicCodable {","    static var identifier:","    DynamicCodableIdentifier<String> {","        return \"video\"","    }","","    let id: UUID","    let url: URL","    let duration: Int","    let thumbnail: URL","}"]},"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"role":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","abstract":[{"type":"text","text":"The configuration file providing additional customization options for "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin.","type":"text"}],"fragments":[{"text":"configuration","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"file"},{"kind":"text","text":" "},{"kind":"identifier","text":"MetaCodableConfig"}],"url":"\/documentation\/metacodable\/metacodableconfig","kind":"symbol","title":"MetaCodableConfig"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"kind":"symbol","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"title":"HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","title":"Create custom advanced customizations"}}}