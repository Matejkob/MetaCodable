{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/essential"]}],"sections":[{"estimatedTimeInMinutes":10,"title":"Use with general-purpose Swift types","chapter":"MetaCodable essentials","xcodeRequirement":"Xcode 15 or later","content":[{"inlineContent":[{"text":"This tutorial guides you through","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"creating equivalent types for decoding\/encoding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"customizing fieldâ€™s "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fallback field value when decoding fails"}]}]},{"content":[{"inlineContent":[{"text":"ignoring fields from decoding\/encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"share common data across ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" types.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"hero"},{"tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The simplest way to generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation is to attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","isActive":true,"type":"reference"},{"text":" macro to type definition, provided all its properties using types that are already ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"code":"CodingKey","type":"codeVoice"},{"text":" of each field can be customized individually using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"text":" macros. Optionally, global field case style can be declared using ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference"},{"text":" macro.","type":"text"}]}]}],"title":"Create Codable type and customize CodingKey of fields","stepsSection":[{"media":"Post-01.png","caption":[],"type":"step","code":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Analyze fields and their data types from data.","type":"text"}]}]},{"media":null,"caption":[],"type":"step","code":"Post-01.swift","runtimePreview":"Post-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"struct","type":"codeVoice"},{"type":"text","text":"\/"},{"code":"class","type":"codeVoice"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}]}]},{"media":null,"caption":[],"type":"step","code":"Post-02.swift","runtimePreview":"Post-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition."}]}]},{"media":null,"caption":[],"type":"step","code":"Post-03.swift","runtimePreview":"Post-01.png","content":[{"inlineContent":[{"text":"Provide custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" value to use to ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro attached to said field.","type":"text"}],"type":"paragraph"}]},{"media":null,"caption":[],"type":"step","code":"Post-04.swift","runtimePreview":"Post-04.png","content":[{"inlineContent":[{"text":"Provide each ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path components in order, to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" macro for decoding nested field at path.","type":"text"}],"type":"paragraph"}]},{"media":null,"caption":[],"type":"step","code":"Post-05.swift","runtimePreview":"Post-04.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Last "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macro."}]}]},{"media":null,"caption":[],"type":"step","code":"Post-06.swift","runtimePreview":"Post-06.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":" macro to specify multiple possible ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s for a single field.","type":"text"}]}]},{"media":null,"caption":[],"type":"step","code":"Post-07.swift","runtimePreview":"Post-07.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference","isActive":true},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style while using different case style for field name."}]}]}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields"},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Provide default value for fields to be used when decoding fails with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" macro.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"text":" macro per fields and ignore only decoding or encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"text":" or ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"text":" macros per fields respectively.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}]}]}],"kind":"contentAndMedia"}],"title":"Customize field decoding\/encoding","stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide default value per field if decoding fails due to missing or invalid data."}]}],"code":"Post-07.swift","runtimePreview":"Post-06.png","type":"step","caption":[]},{"media":null,"content":[{"inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"text":" respectively.","type":"text"}],"type":"paragraph"}],"code":"Post-08.swift","runtimePreview":"Post-06.png","type":"step","caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"type":"text","text":" macro to type definition."}]}],"code":"Post-09.swift","runtimePreview":"Post-06.png","type":"step","caption":[]},{"media":null,"content":[{"inlineContent":[{"text":"Allow specific initialized field decoding and encoding by attaching any of ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":"\/","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"text":"\/","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":"\/","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference","isActive":true},{"text":" macros.","type":"text"}],"type":"paragraph"}],"code":"Post-10.swift","runtimePreview":null,"type":"step","caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"type":"text","text":" macro to initialized field for only suppressing decoding or encoding respectively."}]}],"code":"Post-11.swift","runtimePreview":"Post-11.png","type":"step","caption":[]}],"anchor":"Customize-field-decodingencoding"},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Common ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" fields can be extracted to a separate type to be shared across other ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" types.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing"}],"title":"Share common Codable fields","stepsSection":[{"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify fields that are common across multiple data."}]}],"runtimePreview":null,"caption":[],"type":"step","media":"Post-12.png"},{"code":"Post-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with fields representing common data."}]}],"runtimePreview":"Post-12.png","caption":[],"type":"step","media":null},{"code":"Post-13.swift","content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type for each specific post category only with fields representing category specific data.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-12.png","caption":[],"type":"step","media":null},{"code":"Post-14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}]}],"runtimePreview":"Post-12.png","caption":[],"type":"step","media":null},{"code":"Post-15.swift","content":[{"inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}],"type":"paragraph"}],"runtimePreview":"Post-12.png","caption":[],"type":"step","media":null}],"anchor":"Share-common-Codable-fields"}],"kind":"tasks"},{"title":"Represent variations in data","kind":"callToAction","action":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","overridingTitle":"Get started"},"abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"featuredEyebrow":"Tutorial"}],"metadata":{"category":"Discover MetaCodable","title":"Use with general-purpose Swift types","role":"project","categoryPathComponent":"Usage"},"kind":"project","references":{"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","title":"Create custom advanced customizations"},"Post-11.swift":{"type":"file","fileType":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"syntax":"swift","highlights":[{"line":16},{"line":17}],"identifier":"Post-11.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"Post-07.png":{"type":"image","alt":"Basic post JSON representation with author and creation time","variants":[{"url":"\/images\/Post-07.png","traits":["1x","light"]},{"url":"\/images\/Post-07~dark.png","traits":["1x","dark"]}],"identifier":"Post-07.png"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","abstract":[],"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","title":"MetaCodable essentials"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with internal tag","kind":"section"},"Post-10.swift":{"fileName":"Post.swift","highlights":[{"line":5}],"syntax":"swift","type":"file","identifier":"Post-10.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"]},"Post-08.swift":{"fileName":"Post.swift","highlights":[{"line":9}],"syntax":"swift","type":"file","identifier":"Post-08.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","title":"Advanced MetaCodable"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with adjacent tag","kind":"section"},"Xcode 15 or later":{"url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement","title":"Xcode 15 or later","identifier":"Xcode 15 or later"},"Post-12.png":{"type":"image","variants":[{"url":"\/images\/Post-12.png","traits":["1x","light"]},{"url":"\/images\/Post-12~dark.png","traits":["1x","dark"]}],"identifier":"Post-12.png","alt":"Multi-category post JSON representation"},"Post-06.png":{"type":"image","alt":"Basic post JSON representation with author and creation time","variants":[{"url":"\/images\/Post-06.png","traits":["1x","light"]},{"url":"\/images\/Post-06~dark.png","traits":["1x","dark"]}],"identifier":"Post-06.png"},"Post-02.swift":{"fileName":"Post.swift","highlights":[{"line":1},{"line":2},{"line":3}],"syntax":"swift","type":"file","identifier":"Post-02.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","title":"CodingKeys(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol","title":"Customize dynamic data variations detection","kind":"section"},"Post-05.swift":{"fileName":"Post.swift","highlights":[{"line":9}],"syntax":"swift","type":"file","identifier":"Post-05.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"Post-09.swift":{"fileName":"Post.swift","highlights":[{"line":14},{"line":15}],"syntax":"swift","type":"file","identifier":"Post-09.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic","kind":"project","estimatedTime":"20min","title":"Represent dynamic data variations with protocol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"Post-14.swift":{"type":"file","fileType":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"syntax":"swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"identifier":"Post-14.swift"},"Post-15.swift":{"type":"file","fileType":"swift","fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"syntax":"swift","highlights":[{"line":15},{"line":21},{"line":28}],"identifier":"Post-15.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","title":"Customize field decoding\/encoding"},"Post-04.png":{"type":"image","alt":"Basic post JSON representation with author","variants":[{"url":"\/images\/Post-04.png","traits":["1x","light"]},{"url":"\/images\/Post-04~dark.png","traits":["1x","dark"]}],"identifier":"Post-04.png"},"Post-06.swift":{"fileName":"Post.swift","highlights":[{"line":7}],"syntax":"swift","type":"file","identifier":"Post-06.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"text":" ","type":"text"},{"text":"declarations.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/codable()","title":"Codable()"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"url":"\/tutorials\/metacodable\/essential","kind":"project","estimatedTime":"10min","title":"Use with general-purpose Swift types"},"Post-13.swift":{"fileName":"Post.swift","highlights":[],"syntax":"swift","type":"file","identifier":"Post-13.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"]},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},"Post-01.swift":{"fileName":"Post.swift","highlights":[],"syntax":"swift","type":"file","identifier":"Post-01.swift","fileType":"swift","content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"]},"Post-07.swift":{"fileName":"Post.swift","highlights":[],"syntax":"swift","type":"file","identifier":"Post-07.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)"},"Post-04.swift":{"fileName":"Post.swift","highlights":[{"line":9},{"line":10}],"syntax":"swift","type":"file","identifier":"Post-04.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"]},"Post-11.png":{"type":"image","alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","variants":[{"url":"\/images\/Post-11.png","traits":["1x","light"]},{"url":"\/images\/Post-11~dark.png","traits":["1x","dark"]}],"identifier":"Post-11.png"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values"},"Post-12.swift":{"fileName":"Post.swift","highlights":[],"syntax":"swift","type":"file","identifier":"Post-12.swift","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"Post-03.swift":{"fileName":"Post.swift","highlights":[{"line":6},{"line":7}],"syntax":"swift","type":"file","identifier":"Post-03.swift","fileType":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"]},"Post-01.png":{"type":"image","alt":"Basic post JSON representation","variants":[{"url":"\/images\/Post-01.png","traits":["1x","light"]},{"url":"\/images\/Post-01~dark.png","traits":["1x","dark"]}],"identifier":"Post-01.png"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"IgnoreCodingInitialized()"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Default"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum","kind":"project","estimatedTime":"10min","title":"Represent variations in data"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"url":"\/tutorials\/metacodable\/helper","kind":"project","estimatedTime":"20min","title":"Add common decoding\/encoding customizations"}}}