{"metadata":{"title":"Use with general-purpose Swift types","category":"Discover MetaCodable","role":"project","categoryPathComponent":"Usage"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[{"content":[{"inlineContent":[{"text":"This tutorial guides you through","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"creating equivalent types for decoding\/encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"customizing fieldâ€™s ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"ignoring fields from decoding\/encoding.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"share common data across "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}]}]}]}],"chapter":"MetaCodable essentials","title":"Use with general-purpose Swift types","xcodeRequirement":"Xcode 15 or later","estimatedTimeInMinutes":10,"kind":"hero"},{"tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest way to generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation is to attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition, provided all its properties using types that are already "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"type":"text","text":". Any type whose properties are "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" automatically conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" just by attaching this macro."}]},{"type":"paragraph","inlineContent":[{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" of each field can be customized individually using "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"type":"text","text":" macros. Optionally, global field case style can be declared using "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference"},{"type":"text","text":" macro."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Analyze fields and their data types from data.","type":"text"}]}],"runtimePreview":null,"code":null,"caption":[],"media":"Post-01.png"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"class"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}],"type":"paragraph"}],"runtimePreview":"Post-01.png","code":"Post-01.swift","caption":[],"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()"},{"type":"text","text":" macro to type definition."}]}],"runtimePreview":"Post-01.png","code":"Post-02.swift","caption":[],"media":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Provide custom "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value to use to "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro attached to said field."}],"type":"paragraph"}],"runtimePreview":"Post-01.png","code":"Post-03.swift","caption":[],"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Provide each ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path components in order, to ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" macro for decoding nested field at path.","type":"text"}]}],"runtimePreview":"Post-04.png","code":"Post-04.swift","caption":[],"media":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Last "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macro."}]}],"runtimePreview":"Post-04.png","code":"Post-05.swift","caption":[],"media":null},{"type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" macro to specify multiple possible ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s for a single field.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-06.png","code":"Post-06.swift","caption":[],"media":null},{"type":"step","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":" macro to specify ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" case style while using different case style for field name.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-07.png","code":"Post-07.swift","caption":[],"media":null}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields"},{"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"text":" macro per fields and ignore only decoding or encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" macros per fields respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro.","type":"text"}]}]}],"type":"unorderedList"}],"kind":"contentAndMedia"}],"stepsSection":[{"media":null,"caption":[],"code":"Post-07.swift","type":"step","content":[{"inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-06.png"},{"media":null,"caption":[],"code":"Post-08.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore fields from decoding or encoding or both with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" respectively."}]}],"runtimePreview":"Post-06.png"},{"media":null,"caption":[],"code":"Post-09.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"type":"text","text":" macro to type definition."}],"type":"paragraph"}],"runtimePreview":"Post-06.png"},{"media":null,"caption":[],"code":"Post-10.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow specific initialized field decoding and encoding by attaching any of "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":"\/"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"type":"text","text":"\/"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"type":"text","text":"\/"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference"},{"type":"text","text":" macros."}]}],"runtimePreview":null},{"media":null,"caption":[],"code":"Post-11.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true},{"type":"text","text":" macro to initialized field for only suppressing decoding or encoding respectively."}]}],"runtimePreview":"Post-11.png"}],"anchor":"Customize-field-decodingencoding","title":"Customize field decoding\/encoding"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Common "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" fields can be extracted to a separate type to be shared across other "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}]}]}],"stepsSection":[{"type":"step","code":null,"runtimePreview":null,"caption":[],"media":"Post-12.png","content":[{"inlineContent":[{"text":"Identify fields that are common across multiple data.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"Post-12.swift","runtimePreview":"Post-12.png","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with fields representing common data."}],"type":"paragraph"}]},{"type":"step","code":"Post-13.swift","runtimePreview":"Post-12.png","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type for each specific post category only with fields representing category specific data.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"Post-14.swift","runtimePreview":"Post-12.png","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}],"type":"paragraph"}]},{"type":"step","code":"Post-15.swift","runtimePreview":"Post-12.png","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}],"type":"paragraph"}]}],"anchor":"Share-common-Codable-fields","title":"Share common Codable fields"}],"kind":"tasks"},{"title":"Represent variations in data","featuredEyebrow":"Tutorial","action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","isActive":true},"abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"kind":"callToAction"}],"kind":"project","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/essential"]}],"references":{"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","kind":"article","abstract":[],"title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","title":"Decode\/Encode sequence of values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/Codable()":{"abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"text":", ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Codable"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable()","title":"Codable()","role":"symbol","url":"\/documentation\/metacodable\/codable()"},"Post-07.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-07.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","role":"symbol","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates by default initialized properties\/associated values for"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"Xcode 15 or later":{"identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"type":"topic","title":"Use with general-purpose Swift types","role":"project","estimatedTime":"10min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"abstract":[{"text":"Indicates the field needs to be decoded from and encoded in the","type":"text"},{"text":" ","type":"text"},{"text":"container ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedIn"},{"kind":"text","text":"("},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","title":"CodedIn(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","title":"CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"Post-04.png":{"alt":"Basic post JSON representation with author","identifier":"Post-04.png","type":"image","variants":[{"url":"\/images\/Post-04.png","traits":["1x","light"]},{"url":"\/images\/Post-04~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"},"Post-11.png":{"alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","identifier":"Post-11.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-11.png"},{"traits":["1x","dark"],"url":"\/images\/Post-11~dark.png"}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"Post-06.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-06.swift","syntax":"swift","type":"file","highlights":[{"line":7}],"fileType":"swift","fileName":"Post.swift"},"Post-06.png":{"alt":"Basic post JSON representation with author and creation time","identifier":"Post-06.png","type":"image","variants":[{"url":"\/images\/Post-06.png","traits":["1x","light"]},{"url":"\/images\/Post-06~dark.png","traits":["1x","dark"]}]},"Post-03.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"identifier":"Post-03.swift","syntax":"swift","type":"file","highlights":[{"line":6},{"line":7}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()"},"Post-10.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"],"identifier":"Post-10.swift","syntax":"swift","type":"file","highlights":[{"line":5}],"fileType":"swift","fileName":"Post.swift"},"Post-15.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"identifier":"Post-15.swift","syntax":"swift","type":"file","highlights":[{"line":15},{"line":21},{"line":28}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Post-12.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"identifier":"Post-12.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","fileName":"Post.swift"},"Post-08.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-08.swift","syntax":"swift","type":"file","highlights":[{"line":9}],"fileType":"swift","fileName":"Post.swift"},"Post-13.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"identifier":"Post-13.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","fileName":"Post.swift"},"Post-02.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"identifier":"Post-02.swift","syntax":"swift","type":"file","highlights":[{"line":1},{"line":2},{"line":3}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","title":"IgnoreDecoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()"},"Post-14.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"identifier":"Post-14.swift","syntax":"swift","type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" value to be used when decoding fails and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"when not initialized explicitly in memberwise initializer(s)."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","title":"Default(_:)","role":"symbol","url":"\/documentation\/metacodable\/default(_:)"},"Post-12.png":{"alt":"Multi-category post JSON representation","identifier":"Post-12.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-12.png"},{"traits":["1x","dark"],"url":"\/images\/Post-12~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","title":"Share common Codable fields","kind":"section"},"Post-01.swift":{"content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"identifier":"Post-01.swift","syntax":"swift","type":"file","highlights":[],"fileType":"swift","fileName":"Post.swift"},"Post-05.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-05.swift","syntax":"swift","type":"file","highlights":[{"line":9}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","title":"MetaCodable essentials","url":"\/tutorials\/usage\/metacodable-essentials","type":"topic","abstract":[]},"Post-07.png":{"alt":"Basic post JSON representation with author and creation time","identifier":"Post-07.png","type":"image","variants":[{"url":"\/images\/Post-07.png","traits":["1x","light"]},{"url":"\/images\/Post-07~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"Post-09.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"],"identifier":"Post-09.swift","syntax":"swift","type":"file","highlights":[{"line":14},{"line":15}],"fileType":"swift","fileName":"Post.swift"},"Post-04.swift":{"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"identifier":"Post-04.swift","syntax":"swift","type":"file","highlights":[{"line":9},{"line":10}],"fileType":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with external tag","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"type":"topic","title":"Represent dynamic data variations with protocol","role":"project","estimatedTime":"20min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","estimatedTime":"10min","title":"Represent variations in data","url":"\/tutorials\/metacodable\/enum","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"type":"topic","title":"Discover MetaCodable","role":"overview","kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","url":"\/tutorials\/usage"},"Post-01.png":{"alt":"Basic post JSON representation","identifier":"Post-01.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Post-01.png"},{"traits":["1x","dark"],"url":"\/images\/Post-01~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","estimatedTime":"20min","role":"project","url":"\/tutorials\/metacodable\/helper","title":"Add common decoding\/encoding customizations","kind":"project"},"Post-11.swift":{"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"identifier":"Post-11.swift","syntax":"swift","type":"file","highlights":[{"line":16},{"line":17}],"fileType":"swift","fileName":"Post.swift"}}}