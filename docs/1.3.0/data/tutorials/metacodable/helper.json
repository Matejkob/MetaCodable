{"metadata":{"role":"project","category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations","categoryPathComponent":"Usage"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[{"kind":"hero","chapter":"Advanced MetaCodable","title":"Add common decoding\/encoding customizations","xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]}],"estimatedTimeInMinutes":20},{"tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"i.e. if expected ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" type data is coming as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", the data can be converted to expected type.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Decode\/Encode basic value types without type check","stepsSection":[{"content":[{"inlineContent":[{"type":"text","text":"Identify data with unpredictable type and can be mapped to an expected type."}],"type":"paragraph"}],"media":"Product.png","code":null,"caption":[],"type":"step","runtimePreview":null},{"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"media":null,"code":"Product-01.swift","caption":[],"type":"step","runtimePreview":"Product.png"},{"content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"ValueCoder","type":"codeVoice"},{"text":" on properties to indicate the type mapping transformation.","type":"text"}],"type":"paragraph"}],"media":null,"code":"Product-02.swift","caption":[],"type":"step","runtimePreview":"Product.png"}],"anchor":"DecodeEncode-basic-value-types-without-type-check"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through decoding\/encoding "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" like text formats."}],"type":"paragraph"}]}],"title":"Decode\/Encode date representations","stepsSection":[{"caption":[],"code":null,"type":"step","media":"Date.png","content":[{"inlineContent":[{"type":"text","text":"Identify date formats represented in data."}],"type":"paragraph"}],"runtimePreview":null},{"caption":[],"code":"Date-01.swift","type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as "},{"type":"codeVoice","code":"Date"},{"type":"text","text":" type."}],"type":"paragraph"}],"runtimePreview":"Date.png"},{"caption":[],"code":"Date-02.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"Since1970DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode UNIX timestamp."}]}],"runtimePreview":"Date.png"},{"caption":[],"code":"Date-03.swift","type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"ISO8601DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode date represented in "},{"code":"ISO8601","type":"codeVoice"},{"text":" standard.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Date.png"},{"caption":[],"code":"Date-04.swift","type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}]}],"runtimePreview":"Date.png"}],"anchor":"DecodeEncode-date-representations"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}]}]}],"title":"Decode\/Encode sequence of values","stepsSection":[{"runtimePreview":null,"caption":[],"type":"step","code":null,"media":"Data.png","content":[{"inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}],"type":"paragraph"}]},{"runtimePreview":"Data.png","caption":[],"type":"step","code":"Data-01.swift","media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" type with the fields as the required sequence type.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":"Data.png","caption":[],"type":"step","code":"Data-02.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"SequenceCoder"},{"text":" and provide ","type":"text"},{"type":"codeVoice","code":"elementHelper"},{"text":" ","type":"text"},{"type":"codeVoice","code":"HelperCoder"},{"text":" to customize decoding\/encoding of each element.","type":"text"}]}]},{"runtimePreview":"Data.png","caption":[],"type":"step","code":"Data-03.swift","media":null,"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"code":"lossy","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"configuration","type":"codeVoice"},{"text":" to ignore invalid element data instead of failing.","type":"text"}],"type":"paragraph"}]},{"runtimePreview":"Data.png","caption":[],"type":"step","code":"Data-04.swift","media":null,"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to be used in case provided data is not of sequence type or empty sequence data provided.","type":"text"}],"type":"paragraph"}]}],"anchor":"DecodeEncode-sequence-of-values"},{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"title":"Create custom advanced customizations","stepsSection":[{"caption":[],"media":"User.png","content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}]}],"type":"step","runtimePreview":null,"code":null},{"caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields according to the data."}],"type":"paragraph"}],"type":"step","runtimePreview":"User.png","code":"User-01.swift"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"type":"text","text":" type that accepts decoding and encoding key values."}]}],"type":"step","runtimePreview":"User.png","code":"User-02.swift"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}]}],"type":"step","runtimePreview":"User.png","code":"User-03.swift"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"type":"text","text":" implementations for "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","type":"reference","isActive":true},{"type":"text","text":" for decoding and encoding with provided key values."}]}],"type":"step","runtimePreview":"User.png","code":"User-04.swift"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the created custom ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":" with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true},{"text":" macro to use the decoding\/encoding customization.","type":"text"}]}],"type":"step","runtimePreview":"User.png","code":"User-05.swift"},{"caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Apply ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" macro without any arguments, to the property to pass the type’s ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" argument to the custom ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"text":".","type":"text"}]}],"type":"step","runtimePreview":"User.png","code":"User-06.swift"}],"anchor":"Create-custom-advanced-customizations"}],"kind":"tasks"},{"abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"action":{"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"},"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Represent dynamic data variations with protocol"}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}]}]},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"kind":"project","variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"Data-04.swift":{"type":"file","highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift","fileName":"Data.swift","identifier":"Data-04.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"syntax":"swift"},"User.png":{"type":"image","alt":"User data with different key in decoding and encoding","identifier":"User.png","variants":[{"url":"\/images\/User.png","traits":["1x","light"]},{"url":"\/images\/User~dark.png","traits":["1x","dark"]}]},"Date-01.swift":{"type":"file","highlights":[],"fileType":"swift","fileName":"Date.swift","identifier":"Date-01.swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"kind":"symbol","role":"symbol","required":true,"type":"topic","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Coded","kind":"identifier"}],"title":"Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","required":true,"title":"decode(from:)","type":"topic","abstract":[{"type":"text","text":"Decodes a value of the "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type from the given "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP","text":"Decoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"}],"role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"url":"\/tutorials\/metacodable\/essential","kind":"project","estimatedTime":"10min","title":"Use with general-purpose Swift types"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","title":"Create custom advanced customizations"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"role":"symbol","required":true,"type":"topic","abstract":[{"type":"text","text":"Encodes given value of the "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type to the provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":"."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"defaultImplementations":2,"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","kind":"symbol","title":"encode(_:to:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg"},"Product-01.swift":{"type":"file","highlights":[],"fileType":"swift","fileName":"Product.swift","identifier":"Product-01.swift","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with adjacent tag","kind":"section"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"User-04.swift":{"type":"file","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileType":"swift","fileName":"User.swift","identifier":"User-04.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","title":"Customize field decoding\/encoding"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"url":"\/tutorials\/metacodable\/helper","kind":"project","estimatedTime":"20min","title":"Add common decoding\/encoding customizations"},"User-06.swift":{"type":"file","highlights":[{"line":11}],"fileType":"swift","fileName":"User.swift","identifier":"User-06.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"syntax":"swift"},"Xcode 15 or later":{"title":"Xcode 15 or later","type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later"},"Data.png":{"type":"image","alt":"Base64 data sequence data","identifier":"Data.png","variants":[{"url":"\/images\/Data.png","traits":["1x","light"]},{"url":"\/images\/Data~dark.png","traits":["1x","dark"]}]},"User-05.swift":{"type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"swift","fileName":"User.swift","identifier":"User-05.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"syntax":"swift"},"Date-02.swift":{"type":"file","highlights":[{"line":3},{"line":7}],"fileType":"swift","fileName":"Date.swift","identifier":"Date-02.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"syntax":"swift"},"Product-02.swift":{"type":"file","highlights":[{"line":2},{"line":6},{"line":8}],"fileType":"swift","fileName":"Product.swift","identifier":"Product-02.swift","content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"title":"CodedBy(_:)","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" instance."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","url":"\/documentation\/metacodable\/codedby(_:)"},"Data-02.swift":{"type":"file","highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"fileType":"swift","fileName":"Data.swift","identifier":"Data-02.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"syntax":"swift"},"Data-01.swift":{"type":"file","highlights":[],"fileType":"swift","fileName":"Data.swift","identifier":"Data-01.swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"syntax":"swift"},"User-01.swift":{"type":"file","highlights":[],"fileType":"swift","fileName":"User.swift","identifier":"User-01.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"syntax":"swift"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","title":"Advanced MetaCodable"},"Date-03.swift":{"type":"file","highlights":[{"line":9}],"fileType":"swift","fileName":"Date.swift","identifier":"Date-03.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol","title":"Customize dynamic data variations detection","kind":"section"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","abstract":[],"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","title":"MetaCodable essentials"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum","kind":"project","estimatedTime":"10min","title":"Represent variations in data"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic","kind":"project","estimatedTime":"20min","title":"Represent dynamic data variations with protocol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"kind":"symbol","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"title":"HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder"},"Data-03.swift":{"type":"file","highlights":[{"line":9},{"line":10}],"fileType":"swift","fileName":"Data.swift","identifier":"Data-03.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"syntax":"swift"},"Product.png":{"type":"image","alt":"List of products with inconsistent property types","identifier":"Product.png","variants":[{"url":"\/images\/Product.png","traits":["1x","light"]},{"url":"\/images\/Product~dark.png","traits":["1x","dark"]}]},"User-03.swift":{"type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileType":"swift","fileName":"User.swift","identifier":"User-03.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"syntax":"swift"},"Date.png":{"type":"image","alt":"Data with date formats varying for each property","identifier":"Date.png","variants":[{"url":"\/images\/Date.png","traits":["1x","light"]},{"url":"\/images\/Date~dark.png","traits":["1x","dark"]}]},"Date-04.swift":{"type":"file","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"fileType":"swift","fileName":"Date.swift","identifier":"Date-04.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"syntax":"swift"},"User-02.swift":{"type":"file","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileType":"swift","fileName":"User.swift","identifier":"User-02.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with internal tag","kind":"section"}}}