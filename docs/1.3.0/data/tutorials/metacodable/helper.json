{"variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[{"title":"Add common decoding\/encoding customizations","xcodeRequirement":"Xcode 15 or later","estimatedTimeInMinutes":20,"kind":"hero","chapter":"Advanced MetaCodable","content":[{"inlineContent":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"anchor":"DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data."}]},{"type":"paragraph","inlineContent":[{"text":"i.e. if expected ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" type data is coming as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", the data can be converted to expected type.","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"runtimePreview":null,"code":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify data with unpredictable type and can be mapped to an expected type.","type":"text"}]}],"type":"step","media":"Product.png"},{"runtimePreview":"Product.png","code":"Product-01.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"type":"step","media":null},{"runtimePreview":"Product.png","code":"Product-02.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}],"type":"paragraph"}],"type":"step","media":null}]},{"anchor":"DecodeEncode-date-representations","title":"Decode\/Encode date representations","contentSection":[{"content":[{"inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"code":"ISO8601","type":"codeVoice"},{"text":" like text formats.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"media":"Date.png","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Identify date formats represented in data."}],"type":"paragraph"}],"type":"step","runtimePreview":null,"code":null},{"media":null,"caption":[],"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":" type.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":"Date.png","code":"Date-01.swift"},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Since1970DateCoder"},{"text":" to decode\/encode UNIX timestamp.","type":"text"}]}],"type":"step","runtimePreview":"Date.png","code":"Date-02.swift"},{"media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ISO8601DateCoder"},{"type":"text","text":" to decode\/encode date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}],"type":"paragraph"}],"type":"step","runtimePreview":"Date.png","code":"Date-03.swift"},{"media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"DateCoder"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}],"type":"paragraph"}],"type":"step","runtimePreview":"Date.png","code":"Date-04.swift"}]},{"anchor":"DecodeEncode-sequence-of-values","title":"Decode\/Encode sequence of values","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}],"type":"paragraph"}]}],"stepsSection":[{"runtimePreview":null,"media":"Data.png","caption":[],"code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}]}],"type":"step"},{"runtimePreview":"Data.png","media":null,"caption":[],"code":"Data-01.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as the required sequence type."}]}],"type":"step"},{"runtimePreview":"Data.png","media":null,"caption":[],"code":"Data-02.swift","content":[{"inlineContent":[{"type":"text","text":"Use "},{"code":"SequenceCoder","type":"codeVoice"},{"type":"text","text":" and provide "},{"code":"elementHelper","type":"codeVoice"},{"type":"text","text":" "},{"code":"HelperCoder","type":"codeVoice"},{"type":"text","text":" to customize decoding\/encoding of each element."}],"type":"paragraph"}],"type":"step"},{"runtimePreview":"Data.png","media":null,"caption":[],"code":"Data-03.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"code":"lossy","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"configuration","type":"codeVoice"},{"text":" to ignore invalid element data instead of failing.","type":"text"}]}],"type":"step"},{"runtimePreview":"Data.png","media":null,"caption":[],"code":"Data-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value in "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}]}],"type":"step"}]},{"anchor":"Create-custom-advanced-customizations","title":"Create custom advanced customizations","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that arenâ€™t provided by this library."}]},{"type":"paragraph","inlineContent":[{"text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding.","type":"text"}]}]}],"stepsSection":[{"type":"step","media":"User.png","caption":[],"content":[{"inlineContent":[{"text":"Identify data with different key in decoding and encoding.","type":"text"}],"type":"paragraph"}],"code":null,"runtimePreview":null},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields according to the data.","type":"text"}]}],"code":"User-01.swift","runtimePreview":"User.png"},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"type":"text","text":" type that accepts decoding and encoding key values."}]}],"code":"User-02.swift","runtimePreview":"User.png"},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" type to be used for decoding\/encoding from provided string values."}]}],"code":"User-03.swift","runtimePreview":"User.png"},{"type":"step","media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":" implementations for ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","isActive":true},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","isActive":true},{"text":" for decoding and encoding with provided key values.","type":"text"}]}],"code":"User-04.swift","runtimePreview":"User.png"},{"type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"text":"Use the created custom ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"text":" macro to use the decoding\/encoding customization.","type":"text"}],"type":"paragraph"}],"code":"User-05.swift","runtimePreview":"User.png"},{"type":"step","media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Apply "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro without any arguments, to the property to pass the typeâ€™s "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" argument to the custom "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"code":"User-06.swift","runtimePreview":"User.png"}]}]},{"title":"Represent dynamic data variations with protocol","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","isActive":true}}],"metadata":{"title":"Add common decoding\/encoding customizations","categoryPathComponent":"Usage","category":"Discover MetaCodable","role":"project"},"kind":"project","identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"references":{"Date-02.swift":{"identifier":"Date-02.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"highlights":[{"line":3},{"line":7}],"fileName":"Date.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"Date.png":{"alt":"Data with date formats varying for each property","type":"image","variants":[{"url":"\/images\/Date.png","traits":["1x","light"]},{"url":"\/images\/Date~dark.png","traits":["1x","dark"]}],"identifier":"Date.png"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"title":"HelperCoder","url":"\/documentation\/metacodable\/helpercoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","kind":"symbol","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true,"type":"reference"},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" and to provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":" respectively.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"role":"symbol","type":"topic","title":"encode(_:to:)","required":true,"abstract":[{"text":"Encodes given value of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"text":" type to the provided ","type":"text"},{"code":"encoder","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7EncoderP","kind":"typeIdentifier","text":"Encoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"defaultImplementations":2,"kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg"},"Data.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Data.png"},{"url":"\/images\/Data~dark.png","traits":["1x","dark"]}],"identifier":"Data.png","alt":"Base64 data sequence data","type":"image"},"Product-01.swift":{"identifier":"Product-01.swift","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"highlights":[],"fileName":"Product.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"type":"topic","title":"Coded","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"kind":"symbol","required":true,"role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"kind":"article","role":"article","abstract":[],"type":"topic","title":"MetaCodable essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","url":"\/tutorials\/usage\/metacodable-essentials"},"Data-02.swift":{"fileType":"swift","fileName":"Data.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"type":"file","syntax":"swift","highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"identifier":"Data-02.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"type":"topic","title":"CodedBy(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"type":"text","text":" "},{"text":"encoded by the provided ","type":"text"},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"Data-01.swift":{"fileType":"swift","fileName":"Data.swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"type":"file","syntax":"swift","highlights":[],"identifier":"Data-01.swift"},"Date-03.swift":{"fileType":"swift","fileName":"Date.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"type":"file","syntax":"swift","highlights":[{"line":9}],"identifier":"Date-03.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier","text":"Decoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"}],"required":true,"abstract":[{"type":"text","text":"Decodes a value of the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type from the given "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":"."}],"role":"symbol","title":"decode(from:)","url":"\/documentation\/metacodable\/helpercoder\/decode(from:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"topic","title":"Use with general-purpose Swift types","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","type":"section"},"Data-04.swift":{"fileType":"swift","fileName":"Data.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"type":"file","syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"identifier":"Data-04.swift"},"Date-01.swift":{"fileType":"swift","fileName":"Date.swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","syntax":"swift","highlights":[],"identifier":"Date-01.swift"},"User-06.swift":{"fileType":"swift","fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","syntax":"swift","highlights":[{"line":11}],"identifier":"User-06.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"kind":"article","role":"article","abstract":[],"type":"topic","title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"type":"section","title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"type":"topic","title":"Represent dynamic data variations with protocol","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic"},"User-01.swift":{"fileType":"swift","fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"type":"file","syntax":"swift","highlights":[],"identifier":"User-01.swift"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"topic","title":"Add common decoding\/encoding customizations","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","url":"\/tutorials\/metacodable\/helper"},"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"role":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","type":"topic"},"Product-02.swift":{"fileType":"swift","fileName":"Product.swift","content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"type":"file","syntax":"swift","highlights":[{"line":2},{"line":6},{"line":8}],"identifier":"Product-02.swift"},"User-04.swift":{"identifier":"User-04.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"User.swift","type":"file","syntax":"swift","fileType":"swift"},"User-03.swift":{"identifier":"User-03.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"User.swift","type":"file","syntax":"swift","fileType":"swift"},"User-05.swift":{"fileType":"swift","fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","syntax":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"identifier":"User-05.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","type":"section"},"User-02.swift":{"fileType":"swift","fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"type":"file","syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"User-02.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"Data-03.swift":{"identifier":"Data-03.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":9},{"line":10}],"fileName":"Data.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","url":"\/tutorials\/metacodable\/enum","kind":"project","type":"topic","estimatedTime":"10min"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"section","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values"},"User.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/User.png"},{"traits":["1x","dark"],"url":"\/images\/User~dark.png"}],"identifier":"User.png","alt":"User data with different key in decoding and encoding","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section"},"Product.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Product.png"},{"traits":["1x","dark"],"url":"\/images\/Product~dark.png"}],"identifier":"Product.png","alt":"List of products with inconsistent property types","type":"image"},"Date-04.swift":{"identifier":"Date-04.swift","content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"fileName":"Date.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)"}}}