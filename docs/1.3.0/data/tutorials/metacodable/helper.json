{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/helper"]}],"metadata":{"role":"project","category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations","categoryPathComponent":"Usage"},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[{"kind":"hero","chapter":"Advanced MetaCodable","content":[{"inlineContent":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"type":"paragraph"}],"estimatedTimeInMinutes":20,"title":"Add common decoding\/encoding customizations","xcodeRequirement":"Xcode 15 or later"},{"kind":"tasks","tasks":[{"anchor":"DecodeEncode-basic-value-types-without-type-check","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"i.e. if expected "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" type data is coming as "},{"type":"codeVoice","code":"String"},{"type":"text","text":", the data can be converted to expected type."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"title":"Decode\/Encode basic value types without type check","stepsSection":[{"type":"step","media":"Product.png","caption":[],"code":null,"content":[{"inlineContent":[{"type":"text","text":"Identify data with unpredictable type and can be mapped to an expected type."}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","media":null,"caption":[],"code":"Product-01.swift","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"runtimePreview":"Product.png"},{"type":"step","media":null,"caption":[],"code":"Product-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}]}],"runtimePreview":"Product.png"}]},{"anchor":"DecodeEncode-date-representations","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"code":"Date","type":"codeVoice"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"code":"ISO8601","type":"codeVoice"},{"text":" like text formats.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Decode\/Encode date representations","stepsSection":[{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify date formats represented in data."}]}],"media":"Date.png","code":null,"runtimePreview":null,"type":"step"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with the fields as "},{"code":"Date","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"}],"media":null,"code":"Date-01.swift","runtimePreview":"Date.png","type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Since1970DateCoder"},{"type":"text","text":" to decode\/encode UNIX timestamp."}]}],"media":null,"code":"Date-02.swift","runtimePreview":"Date.png","type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ISO8601DateCoder"},{"type":"text","text":" to decode\/encode date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}]}],"media":null,"code":"Date-03.swift","runtimePreview":"Date.png","type":"step"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"DateCoder"},{"text":" to decode\/encode date represented in custom formats by providing the formatter.","type":"text"}]}],"media":null,"code":"Date-04.swift","runtimePreview":"Date.png","type":"step"}]},{"anchor":"DecodeEncode-sequence-of-values","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values.","type":"text"}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Decode\/Encode sequence of values","stepsSection":[{"runtimePreview":null,"media":"Data.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}]}],"code":null,"type":"step","caption":[]},{"runtimePreview":"Data.png","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with the fields as the required sequence type."}],"type":"paragraph"}],"code":"Data-01.swift","type":"step","caption":[]},{"runtimePreview":"Data.png","media":null,"content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"SequenceCoder"},{"type":"text","text":" and provide "},{"type":"codeVoice","code":"elementHelper"},{"type":"text","text":" "},{"type":"codeVoice","code":"HelperCoder"},{"type":"text","text":" to customize decoding\/encoding of each element."}],"type":"paragraph"}],"code":"Data-02.swift","type":"step","caption":[]},{"runtimePreview":"Data.png","media":null,"content":[{"inlineContent":[{"type":"text","text":"Provide "},{"code":"lossy","type":"codeVoice"},{"type":"text","text":" in "},{"code":"configuration","type":"codeVoice"},{"type":"text","text":" to ignore invalid element data instead of failing."}],"type":"paragraph"}],"code":"Data-03.swift","type":"step","caption":[]},{"runtimePreview":"Data.png","media":null,"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to be used in case provided data is not of sequence type or empty sequence data provided.","type":"text"}],"type":"paragraph"}],"code":"Data-04.swift","type":"step","caption":[]}]},{"anchor":"Create-custom-advanced-customizations","contentSection":[{"content":[{"inlineContent":[{"text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Create custom advanced customizations","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with different key in decoding and encoding."}]}],"runtimePreview":null,"caption":[],"media":"User.png","code":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields according to the data."}],"type":"paragraph"}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-01.swift","type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":" type that accepts decoding and encoding key values.","type":"text"}]}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-02.swift","type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}]}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-03.swift","type":"step"},{"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" implementations for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg"},{"text":" for decoding and encoding with provided key values.","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-04.swift","type":"step"},{"content":[{"inlineContent":[{"text":"Use the created custom ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"text":" with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference","isActive":true},{"text":" macro to use the decoding\/encoding customization.","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-05.swift","type":"step"},{"content":[{"inlineContent":[{"text":"Apply ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" macro without any arguments, to the property to pass the type’s ","type":"text"},{"code":"init(from:)","type":"codeVoice"},{"text":" ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":" argument to the custom ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"runtimePreview":"User.png","caption":[],"media":null,"code":"User-06.swift","type":"step"}]}]},{"kind":"callToAction","action":{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"},"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"featuredEyebrow":"Tutorial","title":"Represent dynamic data variations with protocol"}],"kind":"project","hierarchy":{"modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]]},"references":{"User-03.swift":{"highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"identifier":"User-03.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol"},"User-06.swift":{"highlights":[{"line":11}],"identifier":"User-06.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"required":true,"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","type":"topic","title":"decode(from:)","abstract":[{"text":"Decodes a value of the ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"text":" type from the given ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"decode","kind":"identifier"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Decoder","preciseIdentifier":"s:s7DecoderP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","kind":"typeIdentifier"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","estimatedTime":"10min","title":"Represent variations in data","url":"\/tutorials\/metacodable\/enum","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"User-01.swift":{"highlights":[],"identifier":"User-01.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"type":"file","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","type":"section"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)-5jwyg":{"type":"topic","kind":"symbol","role":"symbol","title":"encode(_:to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Coded"},{"kind":"text","text":", "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7EncoderP","text":"Encoder"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"abstract":[{"type":"text","text":"Encodes given value of the "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference","isActive":true},{"type":"text","text":" type to the provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":"."}],"required":true,"defaultImplementations":2,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)-5jwyg","url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-5jwyg"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"type":"topic","title":"Use with general-purpose Swift types","role":"project","estimatedTime":"10min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"abstract":[{"text":"Indicates the field or enum\/protocol identifier needs to be decoded and","type":"text"},{"text":" ","type":"text"},{"text":"encoded by the provided ","type":"text"},{"type":"codeVoice","code":"helper"},{"text":" instance.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedBy","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","title":"CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","kind":"article","abstract":[],"title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","type":"topic"},"User.png":{"identifier":"User.png","variants":[{"traits":["1x","light"],"url":"\/images\/User.png"},{"url":"\/images\/User~dark.png","traits":["1x","dark"]}],"type":"image","alt":"User data with different key in decoding and encoding"},"Data-02.swift":{"highlights":[{"line":3},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"identifier":"Data-02.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"type":"file","fileName":"Data.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","estimatedTime":"20min","role":"project","url":"\/tutorials\/metacodable\/helper","title":"Add common decoding\/encoding customizations","kind":"project"},"Data.png":{"identifier":"Data.png","variants":[{"traits":["1x","light"],"url":"\/images\/Data.png"},{"url":"\/images\/Data~dark.png","traits":["1x","dark"]}],"type":"image","alt":"Base64 data sequence data"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"type":"topic","title":"Coded","kind":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","role":"symbol"},"Product-01.swift":{"highlights":[],"identifier":"Product-01.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct Product {","    let sku: Int","    let inStock: Bool","}"],"type":"file","fileName":"Product.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","title":"MetaCodable essentials","url":"\/tutorials\/usage\/metacodable-essentials","type":"topic","abstract":[]},"Date-02.swift":{"highlights":[{"line":3},{"line":7}],"identifier":"Date-02.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","fileName":"Date.swift"},"Date-03.swift":{"highlights":[{"line":9}],"identifier":"Date-03.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"type":"file","fileName":"Date.swift"},"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"type":"topic","title":"Discover MetaCodable","role":"overview","kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","url":"\/tutorials\/usage"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","type":"xcodeRequirement","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"User-05.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"identifier":"User-05.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with external tag","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"User-04.swift":{"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"identifier":"User-04.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift"},"User-02.swift":{"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"User-02.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"type":"file","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","title":"Share common Codable fields","kind":"section"},"Data-03.swift":{"highlights":[{"line":9},{"line":10}],"identifier":"Data-03.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"type":"file","fileName":"Data.swift"},"Product-02.swift":{"highlights":[{"line":2},{"line":6},{"line":8}],"identifier":"Product-02.swift","fileType":"swift","syntax":"swift","content":["import MetaCodable","import HelperCoders","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","}"],"type":"file","fileName":"Product.swift"},"Date.png":{"identifier":"Date.png","variants":[{"traits":["1x","light"],"url":"\/images\/Date.png"},{"url":"\/images\/Date~dark.png","traits":["1x","dark"]}],"type":"image","alt":"Data with date formats varying for each property"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"type":"topic","title":"Represent dynamic data variations with protocol","role":"project","estimatedTime":"20min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic"},"Data-01.swift":{"highlights":[],"identifier":"Data-01.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"type":"file","fileName":"Data.swift"},"Data-04.swift":{"highlights":[{"line":10},{"line":11},{"line":12}],"identifier":"Data-04.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([])","            ]","        )","    )","    let messages: [Data]","}"],"type":"file","fileName":"Data.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type"},{"type":"text","text":" "},{"type":"text","text":"from provided "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"type":"codeVoice","code":"encoder"},{"type":"text","text":" respectively."}],"type":"topic","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/metacodable\/helpercoder","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"Date-04.swift":{"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"identifier":"Date-04.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","import HelperCoders","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"type":"file","fileName":"Date.swift"},"Date-01.swift":{"highlights":[],"identifier":"Date-01.swift","fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","fileName":"Date.swift"},"Product.png":{"identifier":"Product.png","variants":[{"traits":["1x","light"],"url":"\/images\/Product.png"},{"url":"\/images\/Product~dark.png","traits":["1x","dark"]}],"type":"image","alt":"List of products with inconsistent property types"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","title":"Decode\/Encode sequence of values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"}}}