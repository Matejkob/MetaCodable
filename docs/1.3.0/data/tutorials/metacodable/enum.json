{"metadata":{"role":"project","title":"Represent variations in data","categoryPathComponent":"Usage","category":"Discover MetaCodable"},"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","interfaceLanguage":"swift"},"sections":[{"kind":"hero","chapter":"MetaCodable essentials","xcodeRequirement":"Xcode 15 or later","title":"Represent variations in data","estimatedTimeInMinutes":10,"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]}]},{"kind":"tasks","tasks":[{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This is default representation of ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":", where variation can be identified with the value of the key.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Since the data is keyed by the tag, variation is known before the content is being parsed.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Create Codable enums with external tag","anchor":"Create-Codable-enums-with-external-tag","stepsSection":[{"media":"Command-01.png","runtimePreview":null,"code":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Identify all the variations and the tags representing variations.","type":"text"}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-01.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case representing each variation, with case name synonymous to tag value.","type":"text"}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-02.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-03.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value.","type":"text"}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variation tag values can be declared explicitly by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"type":"text","text":" macro to the case."}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-05.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In case of multiple variation data fields, variation specific ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" type can be created, and created type can be added to enum-case as associated value without any label.","type":"text"}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","code":"Command-06.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" macros respectively."}]}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-07.png","code":"Command-07.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"text":" macro to specify ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" case style per case while using different case style for associated value label.","type":"text"}]}],"type":"step","caption":[]}]},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"In this case the tag value identifying variant is inside the content, next to any other fields."}],"type":"paragraph"},{"inlineContent":[{"text":"The tag value is present at a specific field common across all the variations. ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" supports any type of value for tag default being ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Create Codable enums with internal tag","anchor":"Create-Codable-enums-with-internal-tag","stepsSection":[{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the field for the tag value."}]}],"runtimePreview":null,"caption":[],"media":"Command-08.png","code":null},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}],"type":"paragraph"}],"runtimePreview":"Command-08.png","caption":[],"media":null,"code":"Command-02.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name.","type":"text"}]}],"runtimePreview":"Command-08.png","caption":[],"media":null,"code":"Command-08.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"If tag value type differs from "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type, specify explicitly with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()"},{"type":"text","text":" macro attached to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition."}],"type":"paragraph"}],"runtimePreview":"Command-08.png","caption":[],"media":null,"code":"Command-09.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"If tag values differ from case name, specify explicitly with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":" macro attached to the case.","type":"text"}]}],"runtimePreview":"Command-08.png","caption":[],"media":null,"code":"Command-10.swift"}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"text":"In this case the tag and content are adjacent to each other as two fields in each variation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supports any type of value for tag default being "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"title":"Create Codable enums with adjacent tag","anchor":"Create-Codable-enums-with-adjacent-tag","stepsSection":[{"type":"step","caption":[],"media":"Command-11.png","code":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the fields for the tag and content value."}],"type":"paragraph"}]},{"type":"step","caption":[],"media":null,"code":"Command-02.swift","runtimePreview":"Command-11.png","content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}]}]},{"type":"step","caption":[],"media":null,"code":"Command-08.swift","runtimePreview":"Command-11.png","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name, similar to previous section.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"media":null,"code":"Command-11.swift","runtimePreview":"Command-11.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)"},{"type":"text","text":" macro to "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying content field name."}]}]},{"type":"step","caption":[],"media":null,"code":"Command-12.swift","runtimePreview":"Command-12.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases."}]}]}]}]},{"featuredEyebrow":"Tutorial","kind":"callToAction","action":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","isActive":true,"type":"reference"},"title":"Add common decoding\/encoding customizations","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]}],"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/enum"]}],"kind":"project","schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"type":"topic","title":"Represent dynamic data variations with protocol","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic"},"Command-06.swift":{"identifier":"Command-06.swift","fileType":"swift","type":"file","highlights":[{"line":8},{"line":9}],"fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"syntax":"swift"},"Command-01.swift":{"syntax":"swift","highlights":[],"content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-01.swift"},"Command-11.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-11.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-11.png"},{"traits":["1x","dark"],"url":"\/images\/Command-11~dark.png"}]},"Command-05.swift":{"syntax":"swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-05.swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through"}],"type":"topic","title":"Use with general-purpose Swift types","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"role":"symbol","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","title":"CodedAs()","kind":"symbol","url":"\/documentation\/metacodable\/codedas()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}],"type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","type":"section"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"title":"CodedAt(_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"topic","url":"\/documentation\/metacodable\/codedat(_:)"},"Command-12.swift":{"syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-12.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","url":"\/tutorials\/metacodable\/enum","kind":"project","type":"topic","estimatedTime":"10min"},"Command-09.swift":{"syntax":"swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-09.swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"title":"IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"topic","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"title":"CodingKeys(_:)","url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","kind":"symbol","abstract":[{"text":"Indicates ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"Command-12.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-12.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-12.png"},{"url":"\/images\/Command-12~dark.png","traits":["1x","dark"]}]},"Command-08.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-08.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-08.png"},{"url":"\/images\/Command-08~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","title":"Customize field decoding\/encoding","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","type":"section"},"Command-01.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-01.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-01.png"},{"url":"\/images\/Command-01~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"section","title":"Decode\/Encode sequence of values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values"},"Command-03.swift":{"syntax":"swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-03.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","kind":"section","type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"title":"IgnoreCodingInitialized()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"topic","url":"\/documentation\/metacodable\/ignorecodinginitialized()"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with internal tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag"},"Command-08.swift":{"syntax":"swift","highlights":[{"line":4}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-08.swift"},"Command-02.swift":{"syntax":"swift","highlights":[],"content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-02.swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"kind":"article","role":"article","abstract":[],"type":"topic","title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"kind":"project","role":"project","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"type":"topic","title":"Add common decoding\/encoding customizations","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","url":"\/tutorials\/metacodable\/helper"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"text":" ","type":"text"},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","url":"\/documentation\/metacodable\/contentat(_:_:)"},"Command-10.swift":{"syntax":"swift","highlights":[{"line":7},{"line":9}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-10.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"title":"CodedAs(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","title":"Share common Codable fields","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","type":"section"},"Command-07.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-07.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-07.png"},{"url":"\/images\/Command-07~dark.png","traits":["1x","dark"]}]},"Command-07.swift":{"syntax":"swift","highlights":[{"line":8},{"line":9},{"line":10}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-07.swift"},"Xcode 15 or later":{"type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later","title":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"kind":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"type":"section","title":"Create dynamic variation Codable types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"kind":"article","role":"article","abstract":[],"type":"topic","title":"MetaCodable essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","url":"\/tutorials\/usage\/metacodable-essentials"},"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"role":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","title":"Discover MetaCodable","url":"\/tutorials\/usage","kind":"overview","type":"topic"},"Command-04.swift":{"syntax":"swift","highlights":[{"line":5},{"line":6}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-04.swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from decoding and encoding."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","kind":"symbol","url":"\/documentation\/metacodable\/ignorecoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"type":"topic"},"Command-11.swift":{"syntax":"swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","fileName":"Command.swift","identifier":"Command-11.swift"}}}