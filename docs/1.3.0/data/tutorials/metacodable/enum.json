{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"category":"Discover MetaCodable","categoryPathComponent":"Usage","title":"Represent variations in data","role":"project"},"sections":[{"estimatedTimeInMinutes":10,"kind":"hero","chapter":"MetaCodable essentials","title":"Represent variations in data","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]}],"xcodeRequirement":"Xcode 15 or later"},{"tasks":[{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"text":"This is default representation of ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":", where variation can be identified with the value of the key.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the data is keyed by the tag, variation is known before the content is being parsed."}]}]}],"anchor":"Create-Codable-enums-with-external-tag","title":"Create Codable enums with external tag","stepsSection":[{"caption":[],"code":null,"type":"step","media":"Command-01.png","runtimePreview":null,"content":[{"inlineContent":[{"text":"Identify all the variations and the tags representing variations.","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"Command-01.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case representing each variation, with case name synonymous to tag value.","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"Command-02.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}],"type":"paragraph"}]},{"caption":[],"code":"Command-03.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value.","type":"text"}]}]},{"caption":[],"code":"Command-04.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"text":"Variation tag values can be declared explicitly by attaching ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"text":" macro to the case.","type":"text"}]}]},{"caption":[],"code":"Command-05.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"inlineContent":[{"text":"In case of multiple variation data fields, variation specific ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" type can be created, and created type can be added to enum-case as associated value without any label.","type":"text"}],"type":"paragraph"}]},{"caption":[],"code":"Command-06.swift","type":"step","media":null,"runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference"},{"type":"text","text":" or "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference"},{"type":"text","text":" macros respectively."}]}]},{"caption":[],"code":"Command-07.swift","type":"step","media":null,"runtimePreview":"Command-07.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" case style per case while using different case style for associated value label."}]}]}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In this case the tag value identifying variant is inside the content, next to any other fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tag value is present at a specific field common across all the variations. "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supports any type of value for tag default being "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","stepsSection":[{"type":"step","caption":[],"code":null,"runtimePreview":null,"media":"Command-08.png","content":[{"inlineContent":[{"text":"Identify all the variations by the tags representing variations and the field for the tag value.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"code":"Command-02.swift","runtimePreview":"Command-08.png","media":null,"content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}],"type":"paragraph"}]},{"type":"step","caption":[],"code":"Command-08.swift","runtimePreview":"Command-08.png","media":null,"content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name.","type":"text"}],"type":"paragraph"}]},{"type":"step","caption":[],"code":"Command-09.swift","runtimePreview":"Command-08.png","media":null,"content":[{"inlineContent":[{"type":"text","text":"If tag value type differs from "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type, specify explicitly with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true},{"type":"text","text":" macro attached to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition."}],"type":"paragraph"}]},{"type":"step","caption":[],"code":"Command-10.swift","runtimePreview":"Command-08.png","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If tag values differ from case name, specify explicitly with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true},{"type":"text","text":" macro attached to the case."}]}]}]},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In this case the tag and content are adjacent to each other as two fields in each variation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supports any type of value for tag default being "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]}],"anchor":"Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag","stepsSection":[{"type":"step","code":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify all the variations by the tags representing variations and the fields for the tag and content value.","type":"text"}]}],"media":"Command-11.png","runtimePreview":null},{"type":"step","code":"Command-02.swift","caption":[],"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}],"type":"paragraph"}],"media":null,"runtimePreview":"Command-11.png"},{"type":"step","code":"Command-08.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition with value specifying tag field name, similar to previous section."}],"type":"paragraph"}],"media":null,"runtimePreview":"Command-11.png"},{"type":"step","code":"Command-11.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true},{"type":"text","text":" macro to "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying content field name."}]}],"media":null,"runtimePreview":"Command-11.png"},{"type":"step","code":"Command-12.swift","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"type":"text","text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases."}]}],"media":null,"runtimePreview":"Command-12.png"}]}],"kind":"tasks"},{"action":{"type":"reference","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"isActive":true,"overridingTitle":"Get started"},"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Add common decoding\/encoding customizations"}],"kind":"project","hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/enum"]}],"references":{"Command-10.swift":{"type":"file","syntax":"swift","identifier":"Command-10.swift","fileType":"swift","fileName":"Command.swift","highlights":[{"line":7},{"line":9}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"type":"section","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"section","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode basic value types without type check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","type":"section"},"Command-01.png":{"type":"image","identifier":"Command-01.png","alt":"Command variations JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/Command-01.png"},{"traits":["1x","dark"],"url":"\/images\/Command-01~dark.png"}]},"Command-11.png":{"type":"image","identifier":"Command-11.png","alt":"Command variations JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/Command-11.png"},{"traits":["1x","dark"],"url":"\/images\/Command-11~dark.png"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","title":"IgnoreEncoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoreencoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"type":"text","text":" "},{"text":"additional variable ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","title":"CodedAs(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","estimatedTime":"10min","title":"Represent variations in data","url":"\/tutorials\/metacodable\/enum","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded to the"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodedAt","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","title":"CodedAt(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Indicates by default initialized properties\/associated values for"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"Command-08.swift":{"type":"file","syntax":"swift","identifier":"Command-08.swift","fileType":"swift","fileName":"Command.swift","highlights":[{"line":4}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"Command-05.swift":{"type":"file","syntax":"swift","identifier":"Command-05.swift","fileType":"swift","fileName":"Command.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","estimatedTime":"20min","role":"project","url":"\/tutorials\/metacodable\/helper","title":"Add common decoding\/encoding customizations","kind":"project"},"Command-12.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Command-12.png"},{"traits":["1x","dark"],"url":"\/images\/Command-12~dark.png"}],"alt":"Command variations JSON representation","identifier":"Command-12.png","type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"type":"topic","title":"Represent dynamic data variations with protocol","role":"project","estimatedTime":"20min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","url":"\/tutorials\/metacodable\/dynamic"},"Command-08.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Command-08.png"},{"traits":["1x","dark"],"url":"\/images\/Command-08~dark.png"}],"alt":"Command variations JSON representation","identifier":"Command-08.png","type":"image"},"Command-11.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":5}],"syntax":"swift","identifier":"Command-11.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file"},"Command-07.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":8},{"line":9},{"line":10}],"syntax":"swift","identifier":"Command-07.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","type":"section"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","title":"MetaCodable essentials","url":"\/tutorials\/usage\/metacodable-essentials","type":"topic","abstract":[]},"doc://MetaCodable/tutorials/Usage":{"abstract":[{"code":"MetaCodable","type":"codeVoice"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"’s ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations with macros. Remove previous boiler-plate for ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" conformances faster than ever before."}],"type":"topic","title":"Discover MetaCodable","role":"overview","kind":"overview","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","url":"\/tutorials\/usage"},"Command-06.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":8},{"line":9}],"syntax":"swift","identifier":"Command-06.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"type":"file"},"Command-07.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Command-07.png"},{"traits":["1x","dark"],"url":"\/images\/Command-07~dark.png"}],"alt":"Command variations JSON representation","identifier":"Command-07.png","type":"image"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","title":"IgnoreCoding()","role":"symbol","url":"\/documentation\/metacodable\/ignorecoding()"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","kind":"article","abstract":[],"title":"Advanced MetaCodable","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","type":"topic"},"Command-02.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[],"syntax":"swift","identifier":"Command-02.swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file"},"Command-03.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":5}],"syntax":"swift","identifier":"Command-03.swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","type":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","title":"Decode\/Encode sequence of values","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedAs","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","title":"CodedAs()","role":"symbol","url":"\/documentation\/metacodable\/codedas()"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","type":"section","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","title":"Share common Codable fields","kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","title":"Create dynamic variation Codable types","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"Command-01.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[],"syntax":"swift","identifier":"Command-01.swift","content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"type":"file"},"Command-12.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":9},{"line":10},{"line":11}],"syntax":"swift","identifier":"Command-12.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"type":"file"},"Command-04.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":5},{"line":6}],"syntax":"swift","identifier":"Command-04.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file"},"Xcode 15 or later":{"title":"Xcode 15 or later","identifier":"Xcode 15 or later","type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","title":"IgnoreDecoding()","role":"symbol","url":"\/documentation\/metacodable\/ignoredecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","text":"CodingKeyNameStrategy","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","title":"CodingKeys(_:)","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"type":"section","title":"Create Codable enums with external tag","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"role":"pseudoSymbol","type":"section","title":"Create Codable enums with adjacent tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":"...)"}],"type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","title":"ContentAt(_:_:)","role":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"type":"topic","title":"Use with general-purpose Swift types","role":"project","estimatedTime":"10min","kind":"project","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","url":"\/tutorials\/metacodable\/essential"},"Command-09.swift":{"fileType":"swift","fileName":"Command.swift","highlights":[{"line":5}],"syntax":"swift","identifier":"Command-09.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"type":"file"}}}