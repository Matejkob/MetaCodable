{"variants":[{"paths":["\/tutorials\/metacodable\/enum"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"sections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}]}],"xcodeRequirement":"Xcode 15 or later","estimatedTimeInMinutes":10,"kind":"hero","chapter":"MetaCodable essentials","title":"Represent variations in data"},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"This is default representation of "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" in "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":", where variation can be identified with the value of the key."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Since the data is keyed by the tag, variation is known before the content is being parsed."}],"type":"paragraph"}],"kind":"contentAndMedia"}],"anchor":"Create-Codable-enums-with-external-tag","stepsSection":[{"content":[{"inlineContent":[{"text":"Identify all the variations and the tags representing variations.","type":"text"}],"type":"paragraph"}],"type":"step","code":null,"runtimePreview":null,"caption":[],"media":"Command-01.png"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case representing each variation, with case name synonymous to tag value.","type":"text"}]}],"type":"step","code":"Command-01.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}]}],"type":"step","code":"Command-02.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value."}]}],"type":"step","code":"Command-03.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Variation tag values can be declared explicitly by attaching ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" macro to the case.","type":"text"}]}],"type":"step","code":"Command-04.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"In case of multiple variation data fields, variation specific "},{"type":"codeVoice","code":"struct"},{"type":"text","text":" or "},{"type":"codeVoice","code":"class"},{"type":"text","text":" type can be created, and created type can be added to enum-case as associated value without any label."}],"type":"paragraph"}],"type":"step","code":"Command-05.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"type":"text","text":" or "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"type":"text","text":" macros respectively."}],"type":"paragraph"}],"type":"step","code":"Command-06.swift","runtimePreview":"Command-01.png","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"text":" macro to specify ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" case style per case while using different case style for associated value label.","type":"text"}]}],"type":"step","code":"Command-07.swift","runtimePreview":"Command-07.png","caption":[],"media":null}],"title":"Create Codable enums with external tag"},{"contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag value identifying variant is inside the content, next to any other fields."}]},{"type":"paragraph","inlineContent":[{"text":"The tag value is present at a specific field common across all the variations. ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" supports any type of value for tag default being ","type":"text"},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]}]}],"anchor":"Create-Codable-enums-with-internal-tag","stepsSection":[{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the field for the tag value."}],"type":"paragraph"}],"runtimePreview":null,"media":"Command-08.png","type":"step","code":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}]}],"runtimePreview":"Command-08.png","media":null,"type":"step","code":"Command-02.swift"},{"caption":[],"content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" type definition with value specifying tag field name.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Command-08.png","media":null,"type":"step","code":"Command-08.swift"},{"caption":[],"content":[{"inlineContent":[{"text":"If tag value type differs from ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type, specify explicitly with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","type":"reference","isActive":true},{"text":" macro attached to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Command-08.png","media":null,"type":"step","code":"Command-09.swift"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If tag values differ from case name, specify explicitly with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"type":"text","text":" macro attached to the case."}]}],"runtimePreview":"Command-08.png","media":null,"type":"step","code":"Command-10.swift"}],"title":"Create Codable enums with internal tag"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In this case the tag and content are adjacent to each other as two fields in each variation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supports any type of value for tag default being "},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"Create-Codable-enums-with-adjacent-tag","stepsSection":[{"code":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Identify all the variations by the tags representing variations and the fields for the tag and content value.","type":"text"}],"type":"paragraph"}],"caption":[],"media":"Command-11.png","type":"step"},{"code":"Command-02.swift","runtimePreview":"Command-11.png","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"code":"Command-08.swift","runtimePreview":"Command-11.png","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro to ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name, similar to previous section.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"type":"step"},{"code":"Command-11.swift","runtimePreview":"Command-11.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference"},{"type":"text","text":" macro to "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying content field name."}]}],"caption":[],"media":null,"type":"step"},{"code":"Command-12.swift","runtimePreview":"Command-12.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases.","type":"text"}]}],"caption":[],"media":null,"type":"step"}],"title":"Create Codable enums with adjacent tag"}]},{"action":{"overridingTitle":"Get started","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"featuredEyebrow":"Tutorial","kind":"callToAction","title":"Add common decoding\/encoding customizations"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"project","identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","interfaceLanguage":"swift"},"metadata":{"categoryPathComponent":"Usage","role":"project","category":"Discover MetaCodable","title":"Represent variations in data"},"references":{"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","abstract":[],"url":"\/tutorials\/usage\/metacodable-essentials","kind":"article","title":"MetaCodable essentials"},"Command-04.swift":{"identifier":"Command-04.swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"highlights":[{"line":5},{"line":6}],"type":"file","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"text":"of the provided case format.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CodingKeyNameStrategy","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codingkeys(_:)","title":"CodingKeys(_:)"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"text":"and protocols.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">()"}],"url":"\/documentation\/metacodable\/codedas()","title":"CodedAs()"},"Command-08.swift":{"fileType":"swift","type":"file","fileName":"Command.swift","identifier":"Command-08.swift","highlights":[{"line":4}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"Command-11.png":{"type":"image","identifier":"Command-11.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-11.png"},{"traits":["1x","dark"],"url":"\/images\/Command-11~dark.png"}],"alt":"Command variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreDecoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoredecoding()","title":"IgnoreDecoding()"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"pseudoSymbol","title":"Customize dynamic data variations detection","kind":"section"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"role":"article","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","abstract":[],"url":"\/tutorials\/usage\/advanced-metacodable","kind":"article","title":"Advanced MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecoding()","title":"IgnoreCoding()"},"Command-03.swift":{"fileType":"swift","type":"file","fileName":"Command.swift","identifier":"Command-03.swift","highlights":[{"line":5}],"syntax":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"]},"Command-11.swift":{"identifier":"Command-11.swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"highlights":[{"line":5}],"type":"file","fileType":"swift","syntax":"swift"},"Command-12.png":{"type":"image","identifier":"Command-12.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-12.png"},{"traits":["1x","dark"],"url":"\/images\/Command-12~dark.png"}],"alt":"Command variations JSON representation"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","abstract":[{"type":"text","text":"This tutorial guides you through"}],"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","kind":"section","title":"Customize field decoding\/encoding"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignoreencoding()","title":"IgnoreEncoding()"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","abstract":[{"text":"This tutorial guides you through","type":"text"}],"url":"\/tutorials\/metacodable\/essential","kind":"project","estimatedTime":"10min","title":"Use with general-purpose Swift types"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"text":" ","type":"text"},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"kind":"text","text":"()"}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"IgnoreCodingInitialized()"},"Command-10.swift":{"fileType":"swift","type":"file","fileName":"Command.swift","identifier":"Command-10.swift","highlights":[{"line":7},{"line":9}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"]},"Command-06.swift":{"identifier":"Command-06.swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9}],"type":"file","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum","kind":"project","estimatedTime":"10min","title":"Represent variations in data"},"Command-01.swift":{"type":"file","fileType":"swift","highlights":[],"identifier":"Command-01.swift","syntax":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"fileName":"Command.swift"},"Command-08.png":{"type":"image","variants":[{"url":"\/images\/Command-08.png","traits":["1x","light"]},{"url":"\/images\/Command-08~dark.png","traits":["1x","dark"]}],"alt":"Command variations JSON representation","identifier":"Command-08.png"},"Command-02.swift":{"type":"file","fileType":"swift","highlights":[],"identifier":"Command-02.swift","syntax":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileName":"Command.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"text":" ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedat(_:)","title":"CodedAt(_:)"},"Command-07.swift":{"identifier":"Command-07.swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9},{"line":10}],"type":"file","fileType":"swift","syntax":"swift"},"Command-09.swift":{"type":"file","fileType":"swift","highlights":[{"line":5}],"identifier":"Command-09.swift","syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with adjacent tag","kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"url":"\/tutorials\/metacodable\/dynamic","kind":"project","estimatedTime":"20min","title":"Represent dynamic data variations with protocol"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"role":"project","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"url":"\/tutorials\/metacodable\/helper","kind":"project","estimatedTime":"20min","title":"Add common decoding\/encoding customizations"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"pseudoSymbol","title":"Create Codable enums with internal tag","kind":"section"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","abstract":[{"text":"Provides values to be used for an enum-case instead of using case name or","type":"text"},{"text":" ","type":"text"},{"text":"additional variable ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":"s.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)"},"doc://MetaCodable/tutorials/Usage":{"role":"overview","type":"topic","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supercharges "},{"code":"Swift","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"url":"\/tutorials\/usage","kind":"overview","title":"Discover MetaCodable"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"text":" ","type":"text"},{"text":"to be decoded\/encoded at the ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path provided.","type":"text"}],"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContentAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}],"url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)"},"Command-05.swift":{"fileType":"swift","type":"file","fileName":"Command.swift","identifier":"Command-05.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"]},"Command-07.png":{"variants":[{"url":"\/images\/Command-07.png","traits":["1x","light"]},{"url":"\/images\/Command-07~dark.png","traits":["1x","dark"]}],"identifier":"Command-07.png","alt":"Command variations JSON representation","type":"image"},"Command-01.png":{"type":"image","identifier":"Command-01.png","variants":[{"traits":["1x","light"],"url":"\/images\/Command-01.png"},{"traits":["1x","dark"],"url":"\/images\/Command-01~dark.png"}],"alt":"Command variations JSON representation"},"Command-12.swift":{"fileType":"swift","type":"file","fileName":"Command.swift","identifier":"Command-12.swift","highlights":[{"line":9},{"line":10},{"line":11}],"syntax":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"role":"pseudoSymbol","type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","title":"Create custom advanced customizations"}}}